{"name":"Lean.Elab.Deriving.Basic","instances":[],"imports":["Init","Lean.Elab.Command","Lean.Elab.MutualDef"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Deriving/Basic.lean#L79-L80","name":"Lean.Elab.DerivingClassView.applyHandlers","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.applyHandlers","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Deriving/Basic.lean#L69-L77","name":"Lean.Elab.getOptDerivingClasses","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.getOptDerivingClasses","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Deriving/Basic.lean#L64-L67","name":"Lean.Elab.DerivingClassView","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Deriving/Basic.lean#L49-L62","name":"Lean.Elab.elabDeriving","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.elabDeriving","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Deriving/Basic.lean#L36-L43","name":"Lean.Elab.applyDerivingHandlers","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.applyDerivingHandlers","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Deriving/Basic.lean#L33-L34","name":"Lean.Elab.defaultHandler","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.defaultHandler","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Deriving/Basic.lean#L30-L31","name":"Lean.Elab.registerDerivingHandler","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.registerDerivingHandler","doc":"Like `registerBuiltinDerivingHandlerWithArgs` but ignoring any `with` argument. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Deriving/Basic.lean#L22-L27","name":"Lean.Elab.registerDerivingHandlerWithArgs","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.registerDerivingHandlerWithArgs","doc":"A `DerivingHandler` is called on the fully qualified names of all types it is running for\nas well as the syntax of a `with` argument, if present.\n\nFor example, `deriving instance Foo with fooArgs for Bar, Baz` invokes\n``fooHandler #[`Bar, `Baz] `(fooArgs)``. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Deriving/Basic.lean#L15-L15","name":"Lean.Elab.derivingHandlersRef","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.derivingHandlersRef","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Deriving/Basic.lean#L13-L13","name":"Lean.Elab.DerivingHandlerNoArgs","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandlerNoArgs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Deriving/Basic.lean#L12-L12","name":"Lean.Elab.DerivingHandler","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler","doc":""}]}