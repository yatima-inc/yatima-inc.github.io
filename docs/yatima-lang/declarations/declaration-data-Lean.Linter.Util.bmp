{"name":"Lean.Linter.Util","instances":[],"imports":["Init","Lean.Data.Options","Lean.Elab.Command","Lean.Server.InfoUtils"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Linter/Util.lean#L86-L86","name":"Lean.Linter.IgnoreFunction","docLink":"./Lean/Linter/Util.html#Lean.Linter.IgnoreFunction","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Linter/Util.lean#L80-L84","name":"Lean.Linter.stackMatches","docLink":"./Lean/Linter/Util.html#Lean.Linter.stackMatches","doc":"Compare the `SyntaxNodeKind`s in `pattern` to those of the `Syntax`\nelements in `stack`. Return `false` if `stack` is shorter than `pattern`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Linter/Util.lean#L63-L75","name":"Lean.Linter.findSyntaxStack?.go","docLink":"./Lean/Linter/Util.html#Lean.Linter.findSyntaxStack?.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Linter/Util.lean#L60-L76","name":"Lean.Linter.findSyntaxStack?","docLink":"./Lean/Linter/Util.html#Lean.Linter.findSyntaxStack?","doc":"Go upwards through the given `root` syntax starting from `child` and\ncollect all `Syntax` nodes on the way up.\n\nReturn `none` if the `child` is not found in `root`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Linter/Util.lean#L54-L54","name":"Lean.Linter.SyntaxStack","docLink":"./Lean/Linter/Util.html#Lean.Linter.SyntaxStack","doc":"List of `Syntax` nodes in which each succeeding element is the parent of\nthe current. The associated index is the index of the preceding element in the\nlist of children of the current element. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Linter/Util.lean#L34-L49","name":"Lean.Linter.collectMacroExpansions?.go","docLink":"./Lean/Linter/Util.html#Lean.Linter.collectMacroExpansions?.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Linter/Util.lean#L28-L49","name":"Lean.Linter.collectMacroExpansions?","docLink":"./Lean/Linter/Util.html#Lean.Linter.collectMacroExpansions?","doc":"Go upwards through the given `tree` starting from the smallest node that\ncontains the given `range` and collect all `MacroExpansionInfo`s on the way up.\nThe result is `some []` if no `MacroExpansionInfo` was found on the way and\n`none` if no `InfoTree` node was found that covers the given `range`.\n\nReturn the result reversed, s.t. the macro expansion that would be applied to\nthe original syntax first is the first element of the returned list. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Linter/Util.lean#L18-L19","name":"Lean.Linter.logLint","docLink":"./Lean/Linter/Util.html#Lean.Linter.logLint","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Linter/Util.lean#L14-L14","name":"Lean.Linter.getLinterValue","docLink":"./Lean/Linter/Util.html#Lean.Linter.getLinterValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Linter/Util.lean#L12-L12","name":"Lean.Linter.getLinterAll","docLink":"./Lean/Linter/Util.html#Lean.Linter.getLinterAll","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Linter/Util.lean#L7-L7","name":"Lean.Linter.linter.all","docLink":"./Lean/Linter/Util.html#Lean.Linter.linter.all","doc":""}]}