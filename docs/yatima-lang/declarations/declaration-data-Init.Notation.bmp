{"name":"Init.Notation","instances":[{"typeNames":["Lean.TSyntax","Lean.Syntax"],"name":"Lean.instCoeHeadTSyntaxSyntax","className":"CoeHead"},{"typeNames":["Lean.SyntaxNodeKind","Lean.SyntaxNodeKinds"],"name":"Lean.instCoeSyntaxNodeKindSyntaxNodeKinds","className":"Coe"},{"typeNames":["Lean.Syntax","Lean.TSyntax","List.cons","Lean.SyntaxNodeKind","Lean.Name.str","Lean.Name.anonymous","List.nil"],"name":"Lean.instCoeSyntaxTSyntaxConsSyntaxNodeKindStrAnonymousNil","className":"Coe"}],"imports":["Init.Prelude","Init.Coe"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L320-L323","name":"Lean.includeStr","docLink":"./Init/Notation.html#Lean.includeStr","doc":"When `parent_dir` contains the current Lean file, `include_str \"path\" / \"to\" / \"file\"` becomes\na string literal with the contents of the file at `\"parent_dir\" / \"path\" / \"to\" / \"file\"`. If this\nfile cannot be read, elaboration fails. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L318-L318","name":"Lean.deprecated","docLink":"./Init/Notation.html#Lean.deprecated","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L315-L316","name":"Lean.withAnnotateTerm","docLink":"./Init/Notation.html#Lean.withAnnotateTerm","doc":"`with_annotate_term stx e` annotates the lexical range of `stx : Syntax` with term info for `e`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L312-L313","name":"Lean.instCoeSyntaxTSyntaxConsSyntaxNodeKindStrAnonymousNil","docLink":"./Init/Notation.html#Lean.instCoeSyntaxTSyntaxConsSyntaxNodeKindStrAnonymousNil","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L307-L310","name":"Lean.Parser.Category.rawStx","docLink":"./Init/Notation.html#Lean.Parser.Category.rawStx","doc":"Category for carrying raw syntax trees between macros; any content is printed as is by the pretty printer.\nThe only accepted parser for this category is an antiquotation. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L307-L310","name":"Lean.rawStx.quot","docLink":"./Init/Notation.html#Lean.rawStx.quot","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L304-L305","name":"Lean.termThis","docLink":"./Init/Notation.html#Lean.termThis","doc":"Special identifier introduced by \"anonymous\" `have : ...`, `suffices p ...` etc. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L285-L285","name":"«term%[_|_]»","docLink":"./Init/Notation.html#«term%[_|_]»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L284-L284","name":"«term[_]»","docLink":"./Init/Notation.html#«term[_]»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L278-L282","name":"termWithout_expected_type_","docLink":"./Init/Notation.html#termWithout_expected_type_","doc":"`without_expected_type t` instructs Lean to elaborate `t` without an expected type.\nRecall that terms such as `match ... with ...` and `⟨...⟩` will postpone elaboration until\nexpected type is known. So, `without_expected_type` is not effective in this case. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L272-L272","name":"«term{_:_//_}»","docLink":"./Init/Notation.html#«term{_:_//_}»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L264-L266","name":"«term_$__»","docLink":"./Init/Notation.html#«term_$__»","doc":"Haskell-like pipe `<|` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L258-L258","name":"«term_|>_»","docLink":"./Init/Notation.html#«term_|>_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L252-L252","name":"«term_<|_»","docLink":"./Init/Notation.html#«term_<|_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L245-L247","name":"boolIfThenElse","docLink":"./Init/Notation.html#boolIfThenElse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L242-L242","name":"«termIfLet_:=_Then_Else_»","docLink":"./Init/Notation.html#«termIfLet_:=_Then_Else_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L235-L237","name":"termIfThenElse","docLink":"./Init/Notation.html#termIfThenElse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L228-L230","name":"termDepIfThenElse","docLink":"./Init/Notation.html#termDepIfThenElse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L223-L223","name":"«term_<$>_»","docLink":"./Init/Notation.html#«term_<$>_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L222-L222","name":"«term_*>_»","docLink":"./Init/Notation.html#«term_*>_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L221-L221","name":"«term_<*_»","docLink":"./Init/Notation.html#«term_<*_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L220-L220","name":"«term_<*>_»","docLink":"./Init/Notation.html#«term_<*>_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L219-L219","name":"«term_>>=_»","docLink":"./Init/Notation.html#«term_>>=_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L218-L218","name":"«term_>>_»","docLink":"./Init/Notation.html#«term_>>_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L217-L217","name":"«term_<|>_»","docLink":"./Init/Notation.html#«term_<|>_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L216-L216","name":"«term_::_»","docLink":"./Init/Notation.html#«term_::_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L214-L214","name":"«term_∉_»","docLink":"./Init/Notation.html#«term_∉_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L213-L213","name":"«term_∈_»","docLink":"./Init/Notation.html#«term_∈_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L211-L211","name":"term!_","docLink":"./Init/Notation.html#term!_","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L210-L210","name":"«term_||_»","docLink":"./Init/Notation.html#«term_||_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L209-L209","name":"«term_&&_»","docLink":"./Init/Notation.html#«term_&&_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L207-L207","name":"«term¬_»","docLink":"./Init/Notation.html#«term¬_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L206-L206","name":"«term_∨_»","docLink":"./Init/Notation.html#«term_∨_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L205-L205","name":"«term_\\/_»","docLink":"./Init/Notation.html#«term_\\/_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L204-L204","name":"«term_∧_»","docLink":"./Init/Notation.html#«term_∧_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L203-L203","name":"«term_/\\_»","docLink":"./Init/Notation.html#«term_/\\_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L187-L187","name":"«term_==_»","docLink":"./Init/Notation.html#«term_==_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L186-L186","name":"«term_=_»","docLink":"./Init/Notation.html#«term_=_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L185-L185","name":"«term_>_»","docLink":"./Init/Notation.html#«term_>_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L184-L184","name":"«term_≥_»","docLink":"./Init/Notation.html#«term_≥_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L183-L183","name":"«term_>=_»","docLink":"./Init/Notation.html#«term_>=_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L182-L182","name":"«term_<_»","docLink":"./Init/Notation.html#«term_<_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L181-L181","name":"«term_≤_»","docLink":"./Init/Notation.html#«term_≤_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L180-L180","name":"«term_<=_»","docLink":"./Init/Notation.html#«term_<=_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L163-L163","name":"«term~~~_»","docLink":"./Init/Notation.html#«term~~~_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L162-L162","name":"«term-_»","docLink":"./Init/Notation.html#«term-_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L161-L161","name":"«term_++_»","docLink":"./Init/Notation.html#«term_++_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L160-L160","name":"«term_^_»","docLink":"./Init/Notation.html#«term_^_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L159-L159","name":"«term_>>>_»","docLink":"./Init/Notation.html#«term_>>>_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L158-L158","name":"«term_<<<_»","docLink":"./Init/Notation.html#«term_<<<_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L157-L157","name":"«term_%_»","docLink":"./Init/Notation.html#«term_%_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L156-L156","name":"«term_/_»","docLink":"./Init/Notation.html#«term_/_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L155-L155","name":"«term_*_»","docLink":"./Init/Notation.html#«term_*_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L154-L154","name":"«term_-_»","docLink":"./Init/Notation.html#«term_-_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L153-L153","name":"«term_+_»","docLink":"./Init/Notation.html#«term_+_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L152-L152","name":"«term_&&&_»","docLink":"./Init/Notation.html#«term_&&&_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L151-L151","name":"«term_^^^_»","docLink":"./Init/Notation.html#«term_^^^_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L150-L150","name":"«term_|||_»","docLink":"./Init/Notation.html#«term_|||_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L148-L148","name":"«term_×_»","docLink":"./Init/Notation.html#«term_×_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L147-L147","name":"«term_∘_»","docLink":"./Init/Notation.html#«term_∘_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L145-L145","name":"rawNatLit","docLink":"./Init/Notation.html#rawNatLit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L143-L143","name":"stx!_","docLink":"./Init/Notation.html#stx!_","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L141-L141","name":"«stx_,+,?»","docLink":"./Init/Notation.html#«stx_,+,?»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L139-L140","name":"«stx_,*,?»","docLink":"./Init/Notation.html#«stx_,*,?»","doc":"Comma-separated sequence with optional trailing comma. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L138-L138","name":"«stx_,+»","docLink":"./Init/Notation.html#«stx_,+»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L136-L137","name":"«stx_,*»","docLink":"./Init/Notation.html#«stx_,*»","doc":"Comma-separated sequence. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L128-L128","name":"«stx_<|>_»","docLink":"./Init/Notation.html#«stx_<|>_»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L127-L127","name":"stx_?","docLink":"./Init/Notation.html#stx_?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L126-L126","name":"«stx_*»","docLink":"./Init/Notation.html#«stx_*»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L125-L125","name":"«stx_+»","docLink":"./Init/Notation.html#«stx_+»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L121-L121","name":"«prio(_)»","docLink":"./Init/Notation.html#«prio(_)»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L120-L120","name":"prioHigh","docLink":"./Init/Notation.html#prioHigh","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L119-L119","name":"prioMid","docLink":"./Init/Notation.html#prioMid","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L118-L118","name":"prioLow","docLink":"./Init/Notation.html#prioLow","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L117-L117","name":"prioDefault","docLink":"./Init/Notation.html#prioDefault","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L112-L115","name":"termMax_prec","docLink":"./Init/Notation.html#termMax_prec","doc":"`max:prec` as a term. It is equivalent to `eval_prec max` for `eval_prec` defined at `Meta.lean`.\nWe use `max_prec` to workaround bootstrapping issues. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L110-L111","name":"precMin1","docLink":"./Init/Notation.html#precMin1","doc":"`(min+1)` (we can only write `min+1` after `Meta.lean`) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L108-L109","name":"precMin","docLink":"./Init/Notation.html#precMin","doc":"minimum precedence used in term parsers "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L107-L107","name":"«prec(_)»","docLink":"./Init/Notation.html#«prec(_)»","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L105-L106","name":"precLead","docLink":"./Init/Notation.html#precLead","doc":"precedence used for terms not supposed to be used as arguments (`let`, `have`, ...) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L103-L104","name":"precArg","docLink":"./Init/Notation.html#precArg","doc":"precedence used for application arguments (`do`, `by`, ...) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L101-L102","name":"precMax","docLink":"./Init/Notation.html#precMax","doc":"maximum precedence used in term parsers, in particular for terms in function position (`ident`, `paren`, ...) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L96-L97","name":"Lean.instCoeSyntaxNodeKindSyntaxNodeKinds","docLink":"./Init/Notation.html#Lean.instCoeSyntaxNodeKindSyntaxNodeKinds","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L93-L94","name":"Lean.instCoeHeadTSyntaxSyntax","docLink":"./Init/Notation.html#Lean.instCoeHeadTSyntaxSyntax","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L87-L87","name":"Lean.Parser.Syntax.subPrio","docLink":"./Init/Notation.html#Lean.Parser.Syntax.subPrio","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L86-L86","name":"Lean.Parser.Syntax.addPrio","docLink":"./Init/Notation.html#Lean.Parser.Syntax.addPrio","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L84-L84","name":"Lean.Parser.Syntax.subPrec","docLink":"./Init/Notation.html#Lean.Parser.Syntax.subPrec","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L83-L83","name":"Lean.Parser.Syntax.addPrec","docLink":"./Init/Notation.html#Lean.Parser.Syntax.addPrec","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L75-L75","name":"Lean.Parser.Category.prec","docLink":"./Init/Notation.html#Lean.Parser.Category.prec","doc":"`prec` is a builtin syntax category for precedences. A precedence is a value\nthat expresses how tightly a piece of syntax binds: for example `1 + 2 * 3` is\nparsed as `1 + (2 * 3)` because `*` has a higher pr0ecedence than `+`.\nHigher numbers denote higher precedence.\nIn addition to literals like `37`, there are some special named priorities:\n* `arg` for the precedence of function arguments\n* `max` for the highest precedence used in term parsers (not actually the maximum possible value)\n* `lead` for the precedence of terms not supposed to be used as arguments\nand you can also add and subtract precedences. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L64-L64","name":"Lean.Parser.Category.prio","docLink":"./Init/Notation.html#Lean.Parser.Category.prio","doc":"`prio` is a builtin syntax category for priorities.\nPriorities are used in many different attributes.\nHigher numbers denote higher priority, and for example typeclass search will\ntry high priority instances before low priority.\nIn addition to literals like `37`, you can also use `low`, `mid`, `high`, as well as\nadd and subtract priorities. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L56-L56","name":"Lean.Parser.Category.stx","docLink":"./Init/Notation.html#Lean.Parser.Category.stx","doc":"`stx` is a builtin syntax category for syntax. This is the abbreviated\nparser notation used inside `syntax` and `macro` declarations. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L52-L52","name":"Lean.Parser.Category.attr","docLink":"./Init/Notation.html#Lean.Parser.Category.attr","doc":"`attr` is a builtin syntax category for attributes.\nDeclarations can be annotated with attributes using the `@[...]` notation. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L48-L48","name":"Lean.Parser.Category.level","docLink":"./Init/Notation.html#Lean.Parser.Category.level","doc":"`level` is a builtin syntax category for universe levels.\nThis is the `u` in `Sort u`: it can contain `max` and `imax`, addition with\nconstants, and variables. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L43-L43","name":"Lean.Parser.Category.doElem","docLink":"./Init/Notation.html#Lean.Parser.Category.doElem","doc":"`doElem` is a builtin syntax category for elements that can appear in the `do` notation.\nFor example, `let x ← e` is a `doElem`, and a `do` block consists of a list of `doElem`s. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L39-L39","name":"Lean.Parser.Category.tactic","docLink":"./Init/Notation.html#Lean.Parser.Category.tactic","doc":"`tactic` is the builtin syntax category for tactics. These appear after\n`by` in proofs, and they are programs that take in the proof context\n(the hypotheses in scope plus the type of the term to synthesize) and construct\na term of the expected type. For example, `simp` is a tactic, used in:\n```\nexample : 2 + 2 = 4 := by simp\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L29-L29","name":"Lean.Parser.Category.term","docLink":"./Init/Notation.html#Lean.Parser.Category.term","doc":"`term` is the builtin syntax category for terms. A term denotes an expression\nin lean's type theory, for example `2 + 2` is a term. The difference between\n`Term` and `Expr` is that the former is a kind of syntax, while the latter is\nthe result of elaboration. For example `by simp` is also a `Term`, but it elaborates\nto different `Expr`s depending on the context. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L22-L22","name":"Lean.Parser.Category.command","docLink":"./Init/Notation.html#Lean.Parser.Category.command","doc":"`command` is the syntax category for things that appear at the top level\nof a lean file. For example, `def foo := 1` is a `command`, as is\n`namespace Foo` and `end Foo`. Commands generally have an effect on the state of\nadding something to the environment (like a new definition), as well as\ncommands like `variable` which modify future commands within a scope. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Notation.lean#L13-L13","name":"Lean.Parser.Category","docLink":"./Init/Notation.html#Lean.Parser.Category","doc":"Auxiliary type used to represent syntax categories. We mainly use them to attach doc strings to syntax categories. "}]}