{"name":"Lean.Exception","instances":[{"typeNames":["Lean.Exception"],"name":"Lean.instInhabitedException","className":"Inhabited"},{"typeNames":[],"name":"Lean.instAddErrorMessageContext","className":"Lean.AddErrorMessageContext"},{"typeNames":["ReaderT"],"name":"Lean.instMonadRecDepthReaderT","className":"Lean.MonadRecDepth"},{"typeNames":["StateRefT'"],"name":"Lean.instMonadRecDepthStateRefT'","className":"Lean.MonadRecDepth"},{"typeNames":["Lean.MonadCacheT"],"name":"Lean.instMonadRecDepthMonadCacheT","className":"Lean.MonadRecDepth"}],"imports":["Init","Lean.Message","Lean.InternalExceptionId","Lean.Data.Options","Lean.Util.MonadCache"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L145-L152","name":"Lean.termThrowErrorAt___","docLink":"./Lean/Exception.html#Lean.termThrowErrorAt___","doc":"Macro for throwing error exceptions. The argument can be an interpolated string.\nIt is a convenient way of building `MessageData` objects.\nThe first argument must be a `Syntax` that provides position information for\nthe error message.\n`throwErrorAt ref msg` is equivalent to `withRef ref <| throwError msg`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L138-L144","name":"Lean.termThrowError__","docLink":"./Lean/Exception.html#Lean.termThrowError__","doc":"Macro for throwing error exceptions. The argument can be an interpolated string.\nIt is a convenient way of building `MessageData` objects.\nThe result of `getRef` is used as position information.\nRecall that `getRef` returns the current \"reference\" syntax.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L130-L136","name":"Lean.withIncRecDepth","docLink":"./Lean/Exception.html#Lean.withIncRecDepth","doc":"Increment the current recursion depth and then execute `x`.\nThrow an exception if maximum recursion depth has been reached.\nWe use this combinator to prevent stack overflows.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L120-L123","name":"Lean.Exception.isMaxRecDepth","docLink":"./Lean/Exception.html#Lean.Exception.isMaxRecDepth","doc":"Return true if `ex` was generated by `throwMaxRecDepthAt`.\nThis function is a bit hackish. The max rec depth exception should probably be an internal exception,\nbut it is also produced by `MacroM` which implemented in the prelude, and internal exceptions have not\nbeen defined yet.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L111-L112","name":"Lean.throwMaxRecDepthAt","docLink":"./Lean/Exception.html#Lean.throwMaxRecDepthAt","doc":"Throw a \"maximum recursion depth has been reached\" exception using the given reference syntax.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L105-L106","name":"Lean.instMonadRecDepthMonadCacheT","docLink":"./Lean/Exception.html#Lean.instMonadRecDepthMonadCacheT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L102-L103","name":"Lean.instMonadRecDepthStateRefT'","docLink":"./Lean/Exception.html#Lean.instMonadRecDepthStateRefT'","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L97-L100","name":"Lean.instMonadRecDepthReaderT","docLink":"./Lean/Exception.html#Lean.instMonadRecDepthReaderT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L92-L95","name":"Lean.MonadRecDepth","docLink":"./Lean/Exception.html#Lean.MonadRecDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L87-L88","name":"Lean.throwKernelException","docLink":"./Lean/Exception.html#Lean.throwKernelException","doc":"Throw an error exception for the given kernel exception.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L79-L82","name":"Lean.ofExcept","docLink":"./Lean/Exception.html#Lean.ofExcept","doc":"Convert an `Except` into a `m` monadic action, where `m` is any monad that\nimplements `MonadError`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L72-L73","name":"Lean.throwErrorAt","docLink":"./Lean/Exception.html#Lean.throwErrorAt","doc":"Throw an error exception using the given message data and reference syntax. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L68-L69","name":"Lean.throwUnknownConstant","docLink":"./Lean/Exception.html#Lean.throwUnknownConstant","doc":"Thrown an unknown constant error message. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L62-L65","name":"Lean.throwError","docLink":"./Lean/Exception.html#Lean.throwError","doc":"Throw an error exception using the given message data.\nThe result of `getRef` is used as position information.\nRecall that `getRef` returns the current \"reference\" syntax.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L50-L53","name":"Lean.MonadError","docLink":"./Lean/Exception.html#Lean.MonadError","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L45-L48","name":"Lean.instAddErrorMessageContext","docLink":"./Lean/Exception.html#Lean.instAddErrorMessageContext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L42-L43","name":"Lean.AddErrorMessageContext","docLink":"./Lean/Exception.html#Lean.AddErrorMessageContext","doc":"Similar to `AddMessageContext`, but for error messages.\nThe default instance just uses `AddMessageContext`.\nIn error messages, we may want to provide additional information (e.g., macro expansion stack),\nand refine the `(ref : Syntax)`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L36-L36","name":"Lean.instInhabitedException","docLink":"./Lean/Exception.html#Lean.instInhabitedException","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L32-L34","name":"Lean.Exception.getRef","docLink":"./Lean/Exception.html#Lean.Exception.getRef","doc":"Return syntax object providing position information for the exception.\nRecall that internal exceptions do not have position information.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L24-L26","name":"Lean.Exception.toMessageData","docLink":"./Lean/Exception.html#Lean.Exception.toMessageData","doc":"Convert exception into a structured message. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Exception.lean#L14-L21","name":"Lean.Exception","docLink":"./Lean/Exception.html#Lean.Exception","doc":"Exception type used in most Lean monads "}]}