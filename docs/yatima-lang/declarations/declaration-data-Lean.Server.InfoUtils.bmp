{"name":"Lean.Server.InfoUtils","instances":[{"typeNames":["String.Range"],"name":"String.instInhabitedRange","className":"Inhabited"},{"typeNames":["String.Range"],"name":"String.instReprRange","className":"Repr"},{"typeNames":["String.Range"],"name":"String.instBEqRange","className":"BEq"},{"typeNames":["String.Range"],"name":"String.instHashableRange","className":"Hashable"}],"imports":["Init","Lean.PrettyPrinter"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L326-L336","name":"Lean.Elab.InfoTree.hasSorry.go","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.hasSorry.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L324-L336","name":"Lean.Elab.InfoTree.hasSorry","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.hasSorry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L320-L322","name":"Lean.Elab.InfoTree.termGoalAt?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.termGoalAt?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L306-L318","name":"Lean.Elab.InfoTree.goalsAt?.hasNestedTactic","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.goalsAt?.hasNestedTactic","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L281-L318","name":"Lean.Elab.InfoTree.goalsAt?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.goalsAt?","doc":"Try to retrieve `TacticInfo` for `hoverPos`.\n  We retrieve all `TacticInfo` nodes s.t. `hoverPos` is inside the node's range plus trailing whitespace.\n  We usually prefer the innermost such nodes so that for composite tactics such as `induction`, we show the nested proofs' states.\n  However, if `hoverPos` is after the tactic, we prefer nodes that are not indented relative to it, meaning that e.g. at `|` in\n  ```lean\n  have := by\n    exact foo\n  |\n  ```\n  we show the (final, see below) state of `have`, not `exact`.\n\n  Moreover, we instruct the LSP server to use the state after tactic execution if\n  - the hover position is after the info's start position *and*\n  - there is no nested tactic info after the hover position (tactic combinators should decide for themselves\n    where to show intermediate states by calling `withTacticInfoContext`) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L256-L263","name":"Lean.Elab.GoalsAtResult","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.GoalsAtResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L249-L254","name":"Lean.Elab.Info.fmtHover?.isAtomicFormat","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.fmtHover?.isAtomicFormat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L214-L247","name":"Lean.Elab.Info.fmtHover?.fmtTerm?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.fmtHover?.fmtTerm?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L199-L254","name":"Lean.Elab.Info.fmtHover?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.fmtHover?","doc":"Construct a hover popup, if any, from an info node in a context."},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L187-L196","name":"Lean.Elab.Info.docString?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.docString?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L181-L185","name":"Lean.Elab.Info.type?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.type?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L150-L179","name":"Lean.Elab.InfoTree.hoverableInfoAt?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.hoverableInfoAt?","doc":"Find an info node, if any, which should be shown on hover/cursor at position `hoverPos`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L140-L147","name":"Lean.Elab.InfoTree.smallestInfo?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.smallestInfo?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L134-L138","name":"Lean.Elab.Info.occursInside?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.occursInside?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L129-L132","name":"Lean.Elab.Info.occursBefore?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.occursBefore?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L123-L127","name":"Lean.Elab.Info.isSmaller","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.isSmaller","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L117-L120","name":"Lean.Elab.Info.size?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.size?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L114-L115","name":"Lean.Elab.Info.contains","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.contains","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L111-L112","name":"Lean.Elab.Info.range?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.range?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L108-L109","name":"Lean.Elab.Info.tailPos?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.tailPos?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L105-L106","name":"Lean.Elab.Info.pos?","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.pos?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L100-L103","name":"Lean.Elab.Info.lctx","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.lctx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L88-L98","name":"Lean.Elab.Info.stx","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.stx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L82-L86","name":"Lean.Elab.InfoTree.getCompletionInfos","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.getCompletionInfos","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L78-L80","name":"Lean.Elab.Info.isCompletion","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.isCompletion","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L74-L76","name":"Lean.Elab.Info.isTerm","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.Info.isTerm","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L65-L72","name":"Lean.Elab.InfoTree.foldInfo.go","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.foldInfo.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L63-L72","name":"Lean.Elab.InfoTree.foldInfo","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.foldInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L54-L61","name":"Lean.Elab.InfoTree.deepestNodes","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.deepestNodes","doc":"For every branch of the `InfoTree`, find the deepest node in that branch for which `p` returns\n`some _`  and return the union of all such nodes. The visitor `p` is given a node together with\nits innermost surrounding `ContextInfo`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L47-L48","name":"Lean.Elab.InfoTree.collectNodesBottomUp","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.collectNodesBottomUp","doc":"Visit nodes bottom-up, passing in a surrounding context (the innermost one) and the union of nested results (empty at leaves). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L40-L43","name":"Lean.Elab.InfoTree.visitM'","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.visitM'","doc":"`InfoTree.visitM` specialized to `Unit` return type "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L30-L37","name":"Lean.Elab.InfoTree.visitM.go","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.visitM.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L25-L37","name":"Lean.Elab.InfoTree.visitM","docLink":"./Lean/Server/InfoUtils.html#Lean.Elab.InfoTree.visitM","doc":"Visit nodes, passing in a surrounding context (the innermost one) and accumulating results on the way back up. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L17-L20","name":"Lean.Syntax.getRange?","docLink":"./Lean/Server/InfoUtils.html#Lean.Syntax.getRange?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L14-L15","name":"String.Range.contains","docLink":"./Lean/Server/InfoUtils.html#String.Range.contains","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L12-L12","name":"String.instHashableRange","docLink":"./Lean/Server/InfoUtils.html#String.instHashableRange","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L12-L12","name":"String.instBEqRange","docLink":"./Lean/Server/InfoUtils.html#String.instBEqRange","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L12-L12","name":"String.instReprRange","docLink":"./Lean/Server/InfoUtils.html#String.instReprRange","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L12-L12","name":"String.instInhabitedRange","docLink":"./Lean/Server/InfoUtils.html#String.instInhabitedRange","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/InfoUtils.lean#L9-L12","name":"String.Range","docLink":"./Lean/Server/InfoUtils.html#String.Range","doc":""}]}