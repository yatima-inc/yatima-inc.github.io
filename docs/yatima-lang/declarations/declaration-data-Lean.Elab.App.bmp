{"name":"Lean.Elab.App","instances":[{"typeNames":["Lean.Elab.Term.Arg"],"name":"Lean.Elab.Term.instToStringArg","className":"ToString"},{"typeNames":["Lean.Elab.Term.NamedArg"],"name":"Lean.Elab.Term.instToStringNamedArg","className":"ToString"}],"imports":["Init","Lean.Util.FindMVar","Lean.Parser.Term","Lean.Meta.KAbstract","Lean.Meta.Tactic.ElimInfo","Lean.Elab.Term","Lean.Elab.Binders","Lean.Elab.SyntheticMVars","Lean.Elab.Arg","Lean.Elab.RecAppSyntax"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L1427-L1427","name":"Lean.Elab.Term.elabProj","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabProj","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L1426-L1426","name":"Lean.Elab.Term.elabChoice","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabChoice","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L1418-L1424","name":"Lean.Elab.Term.elabExplicit","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabExplicit","doc":"`@x` disables automatic insertion of implicit parameters of the constant `x`.\n`@e` for any term `e` also disables the insertion of implicit lambdas at this position. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L1408-L1413","name":"Lean.Elab.Term.elabPipeProj","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabPipeProj","doc":"`e |>.x` is a shorthand for `(e).x`. It is especially useful for avoiding parentheses with repeated applications. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L1406-L1406","name":"Lean.Elab.Term.elabExplicitUniv","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabExplicitUniv","doc":"`x.{u, ...}` explicitly specifies the universes `u, ...` of the constant `x`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L1404-L1404","name":"Lean.Elab.Term.elabDotIdent","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabDotIdent","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L1403-L1403","name":"Lean.Elab.Term.elabNamedPattern","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabNamedPattern","doc":"`x@e` matches the pattern `e` and binds its value to the identifier `x`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L1401-L1401","name":"Lean.Elab.Term.elabIdent","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabIdent","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L1393-L1396","name":"Lean.Elab.Term.elabApp","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabApp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L1186-L1187","name":"Lean.Elab.Term.elabExplicitUnivs","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabExplicitUnivs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L916-L920","name":"Lean.Elab.Term.LValResolution","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.LValResolution","doc":"Auxiliary inductive datatype that represents the resolution of an `LVal`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L899-L913","name":"Lean.Elab.Term.elabAppArgs.elabAsElim?","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabAppArgs.elabAsElim?","doc":"Return `some info` if we should elaborate as an eliminator. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L868-L913","name":"Lean.Elab.Term.elabAppArgs","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabAppArgs","doc":"Elaborate a `f`-application using `namedArgs` and `args` as the arguments.\n- `expectedType?` the expected type if available. It is used to propagate typing information only. This method does **not** ensure the result has this type.\n- `explicit = true` when notation `@` is used, and implicit arguments are assumed to be provided at `namedArgs` and `args`.\n- `ellipsis = true` when notation `..` is used. That is, we add `_` for missing arguments.\n- `resultIsOutParamSupport` is used to control whether special support is used when processing applications of functions that return\n   output parameter of some local instance. Example:\n   ```\n   GetElem.getElem : {Cont : Type u_1} → {Idx : Type u_2} → {elem : Type u_3} → {dom : cont → idx → Prop} → [self : GetElem cont idx elem dom] → (xs : cont) → (i : idx) → dom xs i → elem\n   ```\n   The result type `elem` is the output parameter of the local instance `self`.\n   When this parameter is set to `true`, we execute `synthesizeSyntheticMVarsUsingDefault`. For additional details, see comment at\n   `ElabAppArgs.resultIsOutParam`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L813-L834","name":"Lean.Elab.Term.ElabElim.main","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.main","doc":"Main loop of the `elimAsElab` procedure. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L806-L810","name":"Lean.Elab.Term.ElabElim.mkImplicitArg","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.mkImplicitArg","doc":"Create an implicit argument using the given `BinderInfo`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L799-L803","name":"Lean.Elab.Term.ElabElim.saveArgInfo","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.saveArgInfo","doc":"Save information for producing error messages. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L787-L788","name":"Lean.Elab.Term.ElabElim.addDiscr","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.addDiscr","doc":"Push the given expression into the `discrs` field in the state. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L783-L784","name":"Lean.Elab.Term.ElabElim.setMotive","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.setMotive","doc":"Set the `motive` field in the state. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L767-L780","name":"Lean.Elab.Term.ElabElim.getNextArg?","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.getNextArg?","doc":"Return the next argument to be processed.\nThe result is `.none` if it is an implicit argument which was not provided using a named argument.\nThe result is `.undef` if `args` is empty and `namedArgs` does contain an entry for `binderName`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L729-L760","name":"Lean.Elab.Term.ElabElim.finalize","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.finalize","doc":"Contruct the resulting application after all discriminants have bee elaborated, and we have\nconsumed as many given arguments as possible.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L713-L723","name":"Lean.Elab.Term.ElabElim.revertArgs","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.revertArgs","doc":"If the eliminator is over-applied, we \"revert\" the extra arguments. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L703-L710","name":"Lean.Elab.Term.ElabElim.mkMotive","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.mkMotive","doc":"Infer the `motive` using the expected type by `kabstract`ing the discriminants. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L700-L700","name":"Lean.Elab.Term.ElabElim.M","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L682-L698","name":"Lean.Elab.Term.ElabElim.State","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.State","doc":"State of the `elabAsElim` elaboration procedure. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L677-L679","name":"Lean.Elab.Term.ElabElim.Context","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabElim.Context","doc":"Context of the `elabAsElim` elaboration procedure. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L662-L662","name":"Lean.Elab.Term.elabAsElim","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabAsElim","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L634-L656","name":"Lean.Elab.Term.ElabAppArgs.main","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.main","doc":"Elaborate function application arguments. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L235-L236","name":"Lean.Elab.Term.ElabAppArgs.eraseNamedArg","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.eraseNamedArg","doc":"Remove named argument with name `binderName` from `namedArgs`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L193-L197","name":"Lean.Elab.Term.ElabAppArgs.synthesizeAppInstMVars","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.synthesizeAppInstMVars","doc":"Try to synthesize metavariables are `instMVars` using type class resolution.\nThe ones that cannot be synthesized yet are registered.\nRemark: we use this method before trying to apply coercions to function. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L183-L183","name":"Lean.Elab.Term.ElabAppArgs.M","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L148-L181","name":"Lean.Elab.Term.ElabAppArgs.State","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.State","doc":"Auxiliary structure for elaborating the application `f args namedArgs`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L105-L145","name":"Lean.Elab.Term.ElabAppArgs.Context","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.ElabAppArgs.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L91-L92","name":"Lean.Elab.Term.eraseNamedArg","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.eraseNamedArg","doc":"Erase entry for `binderName` from `namedArgs`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L80-L84","name":"Lean.Elab.Term.synthesizeAppInstMVars","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.synthesizeAppInstMVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L33-L36","name":"Lean.Elab.Term.throwInvalidNamedArg","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.throwInvalidNamedArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L30-L31","name":"Lean.Elab.Term.instToStringNamedArg","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.instToStringNamedArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L25-L28","name":"Lean.Elab.Term.instToStringArg","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.instToStringArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L22-L23","name":"Lean.Elab.Term.hasElabWithoutExpectedType","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.hasElabWithoutExpectedType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/App.lean#L19-L19","name":"Lean.Elab.Term.elabWithoutExpectedTypeAttr","docLink":"./Lean/Elab/App.html#Lean.Elab.Term.elabWithoutExpectedTypeAttr","doc":""}]}