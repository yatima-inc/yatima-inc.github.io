{"name":"Lean.Elab.BuiltinTerm","instances":[],"imports":["Init","Lean.Elab.Term","Lean.Elab.Eval"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L314-L323","name":"Lean.Elab.Term.elabIncludeStr","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabIncludeStr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L302-L306","name":"Lean.Elab.Term.elabWithAnnotateTerm","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabWithAnnotateTerm","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L297-L300","name":"Lean.Elab.Term.elabSetOption","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabSetOption","doc":"`set_option opt val in e` sets the option `opt` to the value `val` in the term `e`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L287-L294","name":"Lean.Elab.Term.elabOpen","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabOpen","doc":"`open ... in e` makes the given namespaces available in the term `e`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L281-L284","name":"Lean.Elab.Term.elabEnsureExpectedType","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabEnsureExpectedType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L272-L279","name":"Lean.Elab.Term.elabEnsureTypeOf","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabEnsureTypeOf","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L241-L242","name":"Lean.Elab.Term.elabTypeOf","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabTypeOf","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L235-L239","name":"Lean.Elab.Term.elabWithDeclName","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabWithDeclName","doc":"* `with_decl_name% id e` elaborates `e` in a context while changing the effective\n  declaration name to `id`.\n* `with_decl_name% ? id e` does the same, but resolves `id` as a new definition name\n  (appending the current namespaces).\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L224-L227","name":"Lean.Elab.Term.elabDeclName","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabDeclName","doc":"A macro which evaluates to the name of the currently elaborating declaration. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L220-L221","name":"Lean.Elab.Term.elabDoubleQuotedName","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabDoubleQuotedName","doc":"A resolved name literal. Evaluates to the full name of the given constant if\nexistent in the current context, or else fails. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L212-L215","name":"Lean.Elab.Term.elabQuotedName","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabQuotedName","doc":"A literal of type `Name`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L206-L209","name":"Lean.Elab.Term.elabCharLit","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabCharLit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L195-L204","name":"Lean.Elab.Term.elabScientificLit","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabScientificLit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L189-L192","name":"Lean.Elab.Term.elabRawNatLit","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabRawNatLit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L178-L187","name":"Lean.Elab.Term.elabNumLit","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabNumLit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L166-L169","name":"Lean.Elab.Term.elabStrLit","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabStrLit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L163-L164","name":"Lean.Elab.Term.elabBadCDot","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabBadCDot","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L160-L161","name":"Lean.Elab.Term.elabNoImplicitLambda","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabNoImplicitLambda","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L153-L158","name":"Lean.Elab.Term.elabByTactic","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabByTactic","doc":"`by tac` constructs a term of the expected type by running the tactic(s) `tac`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L137-L143","name":"Lean.Elab.Term.elabWaitIfContainsMVar","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabWaitIfContainsMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L129-L135","name":"Lean.Elab.Term.elabWaitIfTypeContainsMVar","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabWaitIfTypeContainsMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L122-L127","name":"Lean.Elab.Term.elabWaitIfTypeMVar","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabWaitIfTypeMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L103-L114","name":"Lean.Elab.Term.elabLetMVar","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabLetMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L65-L101","name":"Lean.Elab.Term.elabSyntheticHole","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabSyntheticHole","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L60-L63","name":"Lean.Elab.Term.elabHole","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabHole","doc":"A placeholder term, to be synthesized by unification. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L42-L57","name":"Lean.Elab.Term.elabCompletion","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabCompletion","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L36-L40","name":"Lean.Elab.Term.elabPipeCompletion","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabPipeCompletion","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L27-L28","name":"Lean.Elab.Term.elabTypeStx","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabTypeStx","doc":"A type universe. `Type ≡ Type 0`, `Type u ≡ Sort (u + 1)`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L23-L24","name":"Lean.Elab.Term.elabSort","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabSort","doc":"A specific universe in Lean's infinite hierarchy of universes. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/BuiltinTerm.lean#L13-L14","name":"Lean.Elab.Term.elabProp","docLink":"./Lean/Elab/BuiltinTerm.html#Lean.Elab.Term.elabProp","doc":"The universe of propositions. `Prop ≡ Sort 0`. "}]}