{"name":"Lean.Meta.Basic","instances":[{"typeNames":["Lean.Meta.ParamInfo"],"name":"Lean.Meta.instInhabitedParamInfo","className":"Inhabited"},{"typeNames":["Lean.Meta.InfoCacheKey"],"name":"Lean.Meta.instInhabitedInfoCacheKey","className":"Inhabited"},{"typeNames":["Lean.Meta.InfoCacheKey"],"name":"Lean.Meta.instBEqInfoCacheKey","className":"BEq"},{"typeNames":["Lean.Meta.InfoCacheKey"],"name":"Lean.Meta.InfoCacheKey.instHashableInfoCacheKey","className":"Hashable"},{"typeNames":["Lean.Meta.Cache"],"name":"Lean.Meta.instInhabitedCache","className":"Inhabited"},{"typeNames":["Lean.Meta.PostponedEntry"],"name":"Lean.Meta.instInhabitedPostponedEntry","className":"Inhabited"},{"typeNames":["Lean.Meta.State"],"name":"Lean.Meta.instInhabitedState","className":"Inhabited"},{"typeNames":["Lean.Meta.SavedState"],"name":"Lean.Meta.instInhabitedSavedState","className":"Inhabited"},{"typeNames":["Lean.Meta.MetaM"],"name":"Lean.Meta.instMonadMetaM","className":"Monad"},{"typeNames":["Lean.Meta.MetaM"],"name":"Lean.Meta.instInhabitedMetaM","className":"Inhabited"},{"typeNames":["Lean.Meta.MetaM"],"name":"Lean.Meta.instMonadLCtxMetaM","className":"Lean.MonadLCtx"},{"typeNames":["Lean.Meta.MetaM"],"name":"Lean.Meta.instMonadMCtxMetaM","className":"Lean.MonadMCtx"},{"typeNames":["Lean.Meta.MetaM"],"name":"Lean.Meta.instMonadEnvMetaM","className":"Lean.MonadEnv"},{"typeNames":["Lean.Meta.MetaM"],"name":"Lean.Meta.instAddMessageContextMetaM","className":"Lean.AddMessageContext"},{"typeNames":["Lean.Meta.SavedState","Lean.Meta.MetaM"],"name":"Lean.Meta.instMonadBacktrackSavedStateMetaM","className":"Lean.MonadBacktrack"},{"typeNames":["Lean.Meta.MetaM"],"name":"Lean.Meta.instMetaEvalMetaM","className":"Lean.MetaEval"},{"typeNames":["Lean.Meta.MetaM"],"name":"Lean.Meta.instOrElseMetaM","className":"OrElse"},{"typeNames":["Lean.Meta.MetaM"],"name":"Lean.Meta.instAlternativeMetaM","className":"Alternative"}],"imports":["Init","Lean.Data.LOption","Lean.Environment","Lean.Class","Lean.ReducibilityAttrs","Lean.Util.Trace","Lean.Util.RecDepth","Lean.Util.PPExt","Lean.Util.ReplaceExpr","Lean.Util.OccursCheck","Lean.Util.MonadBacktrack","Lean.Compiler.InlineAttrs","Lean.Meta.TransparencyMode","Lean.Meta.DiscrTreeTypes","Lean.Eval","Lean.CoreM"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1706-L1707","name":"Lean.Meta.etaExpand","docLink":"./Lean/Meta/Basic.html#Lean.Meta.etaExpand","doc":"Eta expand the given expression.\nExample:\n```\netaExpand (mkConst ``Nat.add)\n```\nproduces `fun x y => Nat.add x y`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1695-L1696","name":"Lean.Meta.isDefEqNoConstantApprox","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isDefEqNoConstantApprox","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1692-L1693","name":"Lean.Meta.isDefEqGuarded","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isDefEqGuarded","doc":"Similar to `isDefEq`, but returns `false` if an exception has been thrown. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1688-L1689","name":"Lean.Meta.isExprDefEqGuarded","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isExprDefEqGuarded","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1685-L1686","name":"Lean.Meta.isDefEq","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isDefEq","doc":"Determines whether two expressions are definitionally equal to each other.\n\n  To control how metavariables are assigned and unified, metavariables and their context have a \"depth\".\n  Given a metavariable `?m` and a `MetavarContext` `mctx`, `?m` is not assigned if `?m.depth != mctx.depth`.\n  The combinator `withNewMCtxDepth x` will bump the depth while executing `x`.\n  So, `withNewMCtxDepth (isDefEq a b)` is `isDefEq` without any mvar assignment happening\n  whereas `isDefEq a b` will assign any metavariables of the current depth in `a` and `b` to unify them.\n\n  For matching (where only mvars in `b` should be assigned), we create the term inside the `withNewMCtxDepth`.\n  For an example, see [Lean.Meta.Simp.tryTheoremWithExtraArgs?](https://github.com/leanprover/lean4/blob/master/src/Lean/Meta/Tactic/Simp/Rewrite.lean#L100-L106)\n "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1667-L1671","name":"Lean.Meta.isExprDefEq","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isExprDefEq","doc":"See `isDefEq`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1660-L1664","name":"Lean.Meta.isLevelDefEq","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isLevelDefEq","doc":"Determines whether two universe level expressions are definitionally equal to each other.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1628-L1655","name":"Lean.Meta.checkpointDefEq","docLink":"./Lean/Meta/Basic.html#Lean.Meta.checkpointDefEq","doc":"`checkpointDefEq x` executes `x` and process all postponed universe level constraints produced by `x`.\n  We keep the modifications only if `processPostponed` return true and `x` returned `true`.\n\n  If `mayPostpone == false`, all new postponed universe level constraints must be solved before returning.\n  We currently try to postpone universe constraints as much as possible, even when by postponing them we\n  are not sure whether `x` really succeeded or not.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1601-L1617","name":"Lean.Meta.processPostponed.loop","docLink":"./Lean/Meta/Basic.html#Lean.Meta.processPostponed.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1596-L1618","name":"Lean.Meta.processPostponed","docLink":"./Lean/Meta/Basic.html#Lean.Meta.processPostponed","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1581-L1582","name":"Lean.Meta.mkLevelErrorMessage","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkLevelErrorMessage","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1578-L1579","name":"Lean.Meta.mkLevelStuckErrorMessage","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkLevelStuckErrorMessage","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1550-L1553","name":"Lean.Meta.getResetPostponed","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getResetPostponed","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1547-L1548","name":"Lean.Meta.getNumPostponed","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getNumPostponed","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1542-L1545","name":"Lean.Meta.isListLevelDefEqAux","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isListLevelDefEqAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1533-L1540","name":"Lean.Meta.isInductivePredicate","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isInductivePredicate","doc":"Return `true` if `declName` is an inductive predicate. That is, `inductive` type in `Prop`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1521-L1528","name":"Lean.Meta.sortFVarIds","docLink":"./Lean/Meta/Basic.html#Lean.Meta.sortFVarIds","doc":"Sort free variables using an order `x < y` iff `x` was defined before `y`.\nIf a free variable is not in the local context, we use their id. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1515-L1516","name":"Lean.Meta.mapError","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mapError","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1508-L1513","name":"Lean.Meta.mapErrorImp","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mapErrorImp","doc":"Execute `x`, and apply `f` to the produced error message "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1502-L1505","name":"Lean.Meta.orelseMergeErrors","docLink":"./Lean/Meta/Basic.html#Lean.Meta.orelseMergeErrors","doc":"Similar to `orelse`, but merge errors. Note that internal errors are not caught.\nThe default `mergeRef` uses the `ref` (position information) for the first message.\nThe default `mergeMsg` combines error messages using `Format.line ++ Format.line` as a separator. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1475-L1477","name":"Lean.Meta.instAlternativeMetaM","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instAlternativeMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1473-L1473","name":"Lean.Meta.instOrElseMetaM","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instOrElseMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1469-L1471","name":"Lean.Meta.orElse","docLink":"./Lean/Meta/Basic.html#Lean.Meta.orElse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1465-L1467","name":"Lean.Meta.ppExpr","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ppExpr","doc":"Pretty-print the given expression. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1461-L1462","name":"Lean.Meta.instantiateLambda","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instantiateLambda","doc":"Given `e` of the form `fun (a_1 : A_1) ... (a_n : A_n) => t[a_1, ..., a_n]` and `p_1 : A_1, ... p_n : A_n`, return `t[p_1, ..., p_n]`.\nIt uses `whnf` to reduce `e` if it is not a lambda "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1447-L1448","name":"Lean.Meta.instantiateForall","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instantiateForall","doc":"Given `e` of the form `forall (a_1 : A_1) ... (a_n : A_n), B[a_1, ..., a_n]` and `p_1 : A_1, ... p_n : A_n`, return `B[p_1, ..., p_n]`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1431-L1435","name":"Lean.Meta.setInlineAttribute","docLink":"./Lean/Meta/Basic.html#Lean.Meta.setInlineAttribute","doc":"Mark declaration `declName` with the attribute `[inline]`.\n  This method does not check whether the given declaration is a definition.\n\n  Recall that this attribute can only be set in the same module where `declName` has been declared.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1422-L1423","name":"Lean.Meta.whnfI","docLink":"./Lean/Meta/Basic.html#Lean.Meta.whnfI","doc":"`whnf` with instances transparency."},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1418-L1419","name":"Lean.Meta.whnfD","docLink":"./Lean/Meta/Basic.html#Lean.Meta.whnfD","doc":"`whnf` with default transparency."},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1414-L1415","name":"Lean.Meta.whnfR","docLink":"./Lean/Meta/Basic.html#Lean.Meta.whnfR","doc":"`whnf` with reducible transparency."},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1409-L1411","name":"Lean.Meta.normalizeLevel","docLink":"./Lean/Meta/Basic.html#Lean.Meta.normalizeLevel","doc":"Instantiate assigned universe metavariables in `u`, and then normalize it. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1405-L1406","name":"Lean.Meta.fullApproxDefEq","docLink":"./Lean/Meta/Basic.html#Lean.Meta.fullApproxDefEq","doc":"Similar to `approxDefEq`, but uses all available approximations.\nWe don't use `constApprox` by default at `approxDefEq` because it often produces undesirable solution for monadic code.\nFor example, suppose we have `pure (x > 0)` which has type `?m Prop`. We also have the goal `[Pure ?m]`.\nNow, assume the expected type is `IO Bool`. Then, the unification constraint `?m Prop =?= IO Bool` could be solved\nas `?m := fun _ => IO Bool` using `constApprox`, but this spurious solution would generate a failure when we try to\nsolve `[Pure (fun _ => IO Bool)]` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1392-L1393","name":"Lean.Meta.approxDefEq","docLink":"./Lean/Meta/Basic.html#Lean.Meta.approxDefEq","doc":"Execute `x` using approximate unification: `foApprox`, `ctxApprox` and `quasiPatternApprox`.  "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1385-L1386","name":"Lean.Meta.withMCtx","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withMCtx","doc":"`withMCtx mctx k` replaces the metavariable context and then executes `k`.\n  The metavariable context is restored after executing `k`.\n\n  This method is used to implement the type class resolution procedure. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1372-L1373","name":"Lean.Meta.withMVarContext","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withMVarContext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1368-L1369","name":"Lean.MVarId.withContext","docLink":"./Lean/Meta/Basic.html#Lean.MVarId.withContext","doc":"Execute `x` using the given metavariable `LocalContext` and `LocalInstances`.\nThe type class resolution cache is flushed when executing `x` if its `LocalInstances` are\ndifferent from the current ones. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1357-L1358","name":"Lean.Meta.withLCtx","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withLCtx","doc":"`withLCtx lctx localInsts k` replaces the local context and local instances, and then executes `k`.\nThe local context and instances are restored after executing `k`.\nThis method assumes that the local instances in `localInsts` are in the local context `lctx`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1341-L1342","name":"Lean.Meta.withNewMCtxDepth","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withNewMCtxDepth","doc":"Save cache and `MetavarContext`, bump the `MetavarContext` depth, execute `x`,\n  and restore saved data.\n\n  Metavariable context depths are used to control which metavariables may be assigned in `isDefEq`.\n  See the docstring of `isDefEq` for more information.\n   "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1323-L1324","name":"Lean.Meta.withExistingLocalDecls","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withExistingLocalDecls","doc":"`withExistingLocalDecls decls k`, adds the given local declarations to the local context,\n  and then executes `k`. This method assumes declarations in `decls` have valid `FVarId`s.\n  After executing `k`, the local context is restored.\n\n  Remark: this method is used, for example, to implement the `match`-compiler.\n  Each `match`-alternative commes with a local declarations (corresponding to pattern variables),\n  and we use `withExistingLocalDecls` to add them to the local context before we process\n  them.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1304-L1305","name":"Lean.Meta.withLocalInstances","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withLocalInstances","doc":"Register any local instance in `decls` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1291-L1301","name":"Lean.Meta.withLocalInstancesImp","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withLocalInstancesImp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1288-L1289","name":"Lean.Meta.withLetDecl","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withLetDecl","doc":"Add the local declaration `<name> : <type> := <val>` to the local context and execute `k x`, where `x` is a new\nfree variable corresponding to the `let`-declaration. After executing `k x`, the local context is restored.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1267-L1274","name":"Lean.Meta.withInstImplicitAsImplict","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withInstImplicitAsImplict","doc":"Execute `k` using a local context where any `x` in `xs` that is tagged as\ninstance implicit is treated as a regular implicit. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1261-L1262","name":"Lean.Meta.withNewBinderInfos","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withNewBinderInfos","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1252-L1254","name":"Lean.Meta.withLocalDeclsD","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withLocalDeclsD","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1245-L1250","name":"Lean.Meta.withLocalDecls.loop","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withLocalDecls.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1238-L1250","name":"Lean.Meta.withLocalDecls","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withLocalDecls","doc":"Append an array of free variables `xs` to the local context and execute `k xs`.\ndeclInfos takes the form of an array consisting of:\n- the name of the variable\n- the binder info of the variable\n- a type constructor for the variable, where the array consists of all of the free variables\n  defined prior to this one. This is needed because the type of the variable may depend on prior variables.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1228-L1229","name":"Lean.Meta.withLocalDeclD","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withLocalDeclD","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1225-L1226","name":"Lean.Meta.withLocalDecl","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withLocalDecl","doc":"Create a free variable `x` with name, binderInfo and type, add it to the context and run in `k`.\nThen revert the context. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1194-L1208","name":"Lean.Meta.lambdaMetaTelescope.process","docLink":"./Lean/Meta/Basic.html#Lean.Meta.lambdaMetaTelescope.process","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1191-L1208","name":"Lean.Meta.lambdaMetaTelescope","docLink":"./Lean/Meta/Basic.html#Lean.Meta.lambdaMetaTelescope","doc":"Similar to `forallMetaTelescopeReducingAux` but for lambda expressions. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1187-L1188","name":"Lean.Meta.forallMetaBoundedTelescope","docLink":"./Lean/Meta/Basic.html#Lean.Meta.forallMetaBoundedTelescope","doc":"Similar to `forallMetaTelescopeReducing`, stops\nconstructing the telescope when it reaches size `maxMVars`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1182-L1183","name":"Lean.Meta.forallMetaTelescopeReducing","docLink":"./Lean/Meta/Basic.html#Lean.Meta.forallMetaTelescopeReducing","doc":"Similar to `forallMetaTelescope`, but if `e = forall ..xs, A`\nit will reduce `A` to construct further mvars.  "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1177-L1178","name":"Lean.Meta.forallMetaTelescope","docLink":"./Lean/Meta/Basic.html#Lean.Meta.forallMetaTelescope","doc":"Given `e` of the form `forall ..xs, A`, this combinator will create a new\nmetavariable for each `x` in `xs` and instantiate `A` with these.\nReturns a product containing\n- the new metavariables\n- the binder info for the `xs`\n- the instantiated `A`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1135-L1139","name":"Lean.Meta.getParamNames","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getParamNames","doc":"Return the parameter names for the given global declaration. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1131-L1132","name":"Lean.Meta.lambdaTelescope","docLink":"./Lean/Meta/Basic.html#Lean.Meta.lambdaTelescope","doc":"Given `e` of the form `fun ..xs => A`, execute `k xs A`.\nThis combinator will declare local declarations, create free variables for them,\nexecute `k` with updated local context, and make sure the cache is restored after executing `k`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1124-L1125","name":"Lean.Meta.lambdaLetTelescope","docLink":"./Lean/Meta/Basic.html#Lean.Meta.lambdaLetTelescope","doc":"Similar to `lambdaTelescope` but for lambda and let expressions. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1096-L1097","name":"Lean.Meta.forallBoundedTelescope","docLink":"./Lean/Meta/Basic.html#Lean.Meta.forallBoundedTelescope","doc":"Similar to `forallTelescopeReducing`, stops constructing the telescope when\nit reaches size `maxFVars`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1087-L1088","name":"Lean.Meta.forallTelescopeReducing","docLink":"./Lean/Meta/Basic.html#Lean.Meta.forallTelescopeReducing","doc":"Similar to `forallTelescope`, but given `type` of the form `forall xs, A`,\nit reduces `A` and continues bulding the telescope if it is a `forall`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1078-L1079","name":"Lean.Meta.forallTelescope","docLink":"./Lean/Meta/Basic.html#Lean.Meta.forallTelescope","doc":"Given `type` of the form `forall xs, A`, execute `k xs A`.\nThis combinator will declare local declarations, create free variables for them,\nexecute `k` with updated local context, and make sure the cache is restored after executing `k`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1068-L1069","name":"Lean.Meta.withNewLocalInstances","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withNewLocalInstances","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L1062-L1063","name":"Lean.Meta.isClass?","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isClass?","doc":"`isClass? type` return `some ClsName` if `type` is an instance of the class `ClsName`.\nExample:\n```\n#eval do\n  let x ← mkAppM ``Inhabited #[mkConst ``Nat]\n  IO.println (← isClass? x)\n  -- (some Inhabited)\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L929-L930","name":"Lean.Meta.withNewLocalInstance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withNewLocalInstance","doc":"Add entry `{ className := className, fvar := fvar }` to localInstances,\nand then execute continuation `k`.\nIt resets the type class cache using `resettingSynthInstanceCache`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L912-L913","name":"Lean.Meta.resettingSynthInstanceCacheWhen","docLink":"./Lean/Meta/Basic.html#Lean.Meta.resettingSynthInstanceCacheWhen","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L909-L910","name":"Lean.Meta.resettingSynthInstanceCache","docLink":"./Lean/Meta/Basic.html#Lean.Meta.resettingSynthInstanceCache","doc":"Reset `synthInstance` cache, execute `x`, and restore cache "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L901-L902","name":"Lean.Meta.restoreSynthInstanceCache","docLink":"./Lean/Meta/Basic.html#Lean.Meta.restoreSynthInstanceCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L896-L899","name":"Lean.Meta.saveAndResetSynthInstanceCache","docLink":"./Lean/Meta/Basic.html#Lean.Meta.saveAndResetSynthInstanceCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L840-L844","name":"Lean.Meta.getTheoremInfo","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getTheoremInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L837-L838","name":"Lean.Meta.savingCache","docLink":"./Lean/Meta/Basic.html#Lean.Meta.savingCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L829-L830","name":"Lean.Meta.withAssignableSyntheticOpaque","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withAssignableSyntheticOpaque","doc":"Execute `x` allowing `isDefEq` to assign synthetic opaque metavariables. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L820-L826","name":"Lean.Meta.withAtLeastTransparency","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withAtLeastTransparency","doc":"Execute `x` ensuring the transparency setting is at least `mode`.\nRecall that `.all > .default > .instances > .reducible`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L813-L814","name":"Lean.Meta.withReducibleAndInstances","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withReducibleAndInstances","doc":"`withReducibleAndInstances x` excutes `x` using the `.instances` transparency setting. In this setting only definitions tagged as `[reducible]`\nor type class instances are unfolded.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L806-L807","name":"Lean.Meta.withReducible","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withReducible","doc":"`withReducible x` excutes `x` using the reducible transparency setting. In this setting only definitions tagged as `[reducible]` are unfolded. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L802-L803","name":"Lean.Meta.withDefault","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withDefault","doc":"`withDefault x` excutes `x` using the default transparency setting. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L798-L799","name":"Lean.Meta.withTransparency","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withTransparency","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L795-L796","name":"Lean.Meta.withoutProofIrrelevance","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withoutProofIrrelevance","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L792-L793","name":"Lean.Meta.withTrackingZeta","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withTrackingZeta","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L789-L790","name":"Lean.Meta.withConfig","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withConfig","doc":"`withConfig f x` executes `x` using the updated configuration object obtained by applying `f`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L785-L786","name":"Lean.Meta.elimMVarDeps","docLink":"./Lean/Meta/Basic.html#Lean.Meta.elimMVarDeps","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L782-L783","name":"Lean.Meta.mkFunUnit","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkFunUnit","doc":"`fun _ : Unit => a` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L778-L779","name":"Lean.Meta.mkArrow","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkArrow","doc":"Creates the expression `d → b` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L774-L775","name":"Lean.Meta.mkLetFVars","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkLetFVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L771-L772","name":"Lean.Meta.mkLambdaFVars","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkLambdaFVars","doc":"Takes an array `xs` of free variables and metavariables and a\nbody term `e` and creates `fun ..xs => e`, suitably\nabstracting `e` and the types in `xs`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L765-L766","name":"Lean.Meta.mkForallFVars","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkForallFVars","doc":"Takes an array `xs` of free variables or metavariables and a term `e` that may contain those variables, and abstracts and binds them as universal quantifiers.\n\n- if `usedOnly = true` then only variables that the expression body depends on will appear.\n- if `usedLetOnly = true` same as `usedOnly` except for let-bound variables. (That is, local constants which have been assigned a value.)\n "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L757-L758","name":"Lean.Meta.collectForwardDeps","docLink":"./Lean/Meta/Basic.html#Lean.Meta.collectForwardDeps","doc":"Collect forward dependencies for the free variables in `toRevert`.\nRecall that when reverting free variables `xs`, we must also revert their forward dependencies.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L750-L751","name":"Lean.Meta.abstract","docLink":"./Lean/Meta/Basic.html#Lean.Meta.abstract","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L746-L747","name":"Lean.Expr.abstractM","docLink":"./Lean/Meta/Basic.html#Lean.Expr.abstractM","doc":"Replace free (or meta) variables `xs` with loose bound variables.\nSimilar to `Expr.abstract`, but handles metavariables correctly.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L739-L740","name":"Lean.Meta.abstractRange","docLink":"./Lean/Meta/Basic.html#Lean.Meta.abstractRange","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L735-L736","name":"Lean.Expr.abstractRangeM","docLink":"./Lean/Meta/Basic.html#Lean.Expr.abstractRangeM","doc":"Similar to `abstracM` but consider only the first `min n xs.size` entries in `xs`\n\nIt is also similar to `Expr.abstractRange`, but handles metavariables correctly.\nIt uses `elimMVarDeps` to ensure `e` and the type of the free variables `xs` do not\ncontain a metavariable `?m` s.t. local context of `?m` contains a free variable in `xs`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L717-L726","name":"Lean.Meta.liftMkBindingM","docLink":"./Lean/Meta/Basic.html#Lean.Meta.liftMkBindingM","doc":"Lift a `MkBindingM` monadic action `x` to `MetaM`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L709-L712","name":"Lean.Meta.getLocalDeclFromUserName","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getLocalDeclFromUserName","doc":"Given a user-facing name for a free variable, return its declaration in the current local context.\nThrow an exception if free variable is not declared.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L702-L703","name":"Lean.Meta.getFVarLocalDecl","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getFVarLocalDecl","doc":"Get the local declaration associated to the given `Expr` in the current local\ncontext. Fails if the given expression is not a fvar or if no such declaration exists. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L697-L698","name":"Lean.FVarId.isLetVar","docLink":"./Lean/Meta/Basic.html#Lean.FVarId.isLetVar","doc":"Return `true` is the free variable is a let-variable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L693-L694","name":"Lean.FVarId.getUserName","docLink":"./Lean/Meta/Basic.html#Lean.FVarId.getUserName","doc":"Return the user-facing name for the given free variable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L689-L690","name":"Lean.FVarId.getValue?","docLink":"./Lean/Meta/Basic.html#Lean.FVarId.getValue?","doc":"Return `some value` if the given free variable is a let-declaration, and `none` otherwise. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L685-L686","name":"Lean.FVarId.getBinderInfo","docLink":"./Lean/Meta/Basic.html#Lean.FVarId.getBinderInfo","doc":"Return the binder information for the given free variable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L681-L682","name":"Lean.FVarId.getType","docLink":"./Lean/Meta/Basic.html#Lean.FVarId.getType","doc":"Return the type of the given free variable. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L677-L678","name":"Lean.Meta.getLocalDecl","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getLocalDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L671-L674","name":"Lean.FVarId.getDecl","docLink":"./Lean/Meta/Basic.html#Lean.FVarId.getDecl","doc":"Return the local declaration for the given free variable.\nThrow an exception if local declaration is not in the current local context.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L664-L665","name":"Lean.Meta.findLocalDecl?","docLink":"./Lean/Meta/Basic.html#Lean.Meta.findLocalDecl?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L660-L661","name":"Lean.FVarId.findDecl?","docLink":"./Lean/Meta/Basic.html#Lean.FVarId.findDecl?","doc":"Return `some decl` if `fvarId` is declared in the current local context.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L654-L655","name":"Lean.Meta.throwUnknownFVar","docLink":"./Lean/Meta/Basic.html#Lean.Meta.throwUnknownFVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L650-L651","name":"Lean.FVarId.throwUnknown","docLink":"./Lean/Meta/Basic.html#Lean.FVarId.throwUnknown","doc":"Throw an exception saying `fvarId` is not declared in the current local context.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L644-L645","name":"Lean.Meta.setMVarUserName","docLink":"./Lean/Meta/Basic.html#Lean.Meta.setMVarUserName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L640-L641","name":"Lean.MVarId.setUserName","docLink":"./Lean/Meta/Basic.html#Lean.MVarId.setUserName","doc":"Set the user-facing name for the given metavariable.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L634-L635","name":"Lean.Meta.isReadOnlyLevelMVar","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isReadOnlyLevelMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L627-L631","name":"Lean.LMVarId.isReadOnly","docLink":"./Lean/Meta/Basic.html#Lean.LMVarId.isReadOnly","doc":"Return true if the given universe metavariable is \"read-only\".\nThat is, its `depth` is different from the current metavariable context depth.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L620-L621","name":"Lean.Meta.getLevelMVarDepth","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getLevelMVarDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L614-L617","name":"Lean.LMVarId.getLevel","docLink":"./Lean/Meta/Basic.html#Lean.LMVarId.getLevel","doc":"Return the level of the given universe level metavariable.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L608-L609","name":"Lean.Meta.isReadOnlyOrSyntheticOpaqueExprMVar","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isReadOnlyOrSyntheticOpaqueExprMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L601-L605","name":"Lean.MVarId.isReadOnlyOrSyntheticOpaque","docLink":"./Lean/Meta/Basic.html#Lean.MVarId.isReadOnlyOrSyntheticOpaque","doc":"Return true if `mvarId.isReadOnly` return true or if `mvarId` is a synthetic opaque metavariable.\n\nRecall `isDefEq` will not assign a value to `mvarId` if `mvarId.isReadOnlyOrSyntheticOpaque`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L593-L594","name":"Lean.Meta.isReadOnlyExprMVar","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isReadOnlyExprMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L589-L590","name":"Lean.MVarId.isReadOnly","docLink":"./Lean/Meta/Basic.html#Lean.MVarId.isReadOnly","doc":"Return true if the given metavariable is \"read-only\".\nThat is, its `depth` is different from the current metavariable context depth.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L582-L583","name":"Lean.Meta.setMVarType","docLink":"./Lean/Meta/Basic.html#Lean.Meta.setMVarType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L578-L579","name":"Lean.MVarId.setType","docLink":"./Lean/Meta/Basic.html#Lean.MVarId.setType","doc":"Update the type of the given metavariable. This function assumes the new type is\ndefinitionally equal to the current one "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L573-L574","name":"Lean.Meta.setMVarKind","docLink":"./Lean/Meta/Basic.html#Lean.Meta.setMVarKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L569-L570","name":"Lean.MVarId.setKind","docLink":"./Lean/Meta/Basic.html#Lean.MVarId.setKind","doc":"Set `mvarId` kind in the current metavariable context.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L560-L564","name":"Lean.Meta.isSyntheticMVar","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isSyntheticMVar","doc":"Reture `true` if `e` is a synthetic (or synthetic opaque) metavariable "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L556-L557","name":"Lean.Meta.getMVarDeclKind","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getMVarDeclKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L552-L553","name":"Lean.MVarId.getKind","docLink":"./Lean/Meta/Basic.html#Lean.MVarId.getKind","doc":"Return `mvarId` kind. Throw an exception if `mvarId` is not declarated in the current metavariable context.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L546-L547","name":"Lean.Meta.getMVarDecl","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getMVarDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L540-L543","name":"Lean.MVarId.getDecl","docLink":"./Lean/Meta/Basic.html#Lean.MVarId.getDecl","doc":"Return `mvarId` declaration in the current metavariable context.\nThrow an exception if `mvarId` is not declarated in the current metavariable context.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L533-L534","name":"Lean.Meta.findMVarDecl?","docLink":"./Lean/Meta/Basic.html#Lean.Meta.findMVarDecl?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L529-L530","name":"Lean.MVarId.findDecl?","docLink":"./Lean/Meta/Basic.html#Lean.MVarId.findDecl?","doc":"Return `some mvarDecl` where `mvarDecl` is `mvarId` declaration in the current metavariable context.\nReturn `none` if `mvarId` has no declaration in the current metavariable context.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L522-L523","name":"Lean.Meta.shouldReduceReducibleOnly","docLink":"./Lean/Meta/Basic.html#Lean.Meta.shouldReduceReducibleOnly","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L519-L520","name":"Lean.Meta.shouldReduceAll","docLink":"./Lean/Meta/Basic.html#Lean.Meta.shouldReduceAll","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L516-L517","name":"Lean.Meta.getTransparency","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getTransparency","doc":"Return current transparency setting/mode. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L511-L513","name":"Lean.Meta.mkConstWithFreshMVarLevels","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkConstWithFreshMVarLevels","doc":"Create a constant with the given name and new universe metavariables.\nExample: ``mkConstWithFreshMVarLevels `Monad`` returns `@Monad.{?u, ?v}`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L504-L505","name":"Lean.Meta.mkFreshLevelMVarsFor","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkFreshLevelMVarsFor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L500-L502","name":"Lean.Meta.mkFreshLevelMVars","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkFreshLevelMVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L492-L498","name":"Lean.Meta.mkFreshExprMVarWithId","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkFreshExprMVarWithId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L481-L483","name":"Lean.Meta.mkFreshTypeMVar","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkFreshTypeMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L478-L479","name":"Lean.Meta.mkFreshExprMVar","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkFreshExprMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L462-L465","name":"Lean.Meta.mkFreshLevelMVar","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkFreshLevelMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L456-L460","name":"Lean.Meta.mkFreshExprMVarAt","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mkFreshExprMVarAt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L448-L449","name":"Lean.Meta.withIncRecDepth","docLink":"./Lean/Meta/Basic.html#Lean.Meta.withIncRecDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L443-L445","name":"Lean.Meta.whnfForall","docLink":"./Lean/Meta/Basic.html#Lean.Meta.whnfForall","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L441-L441","name":"Lean.Meta.synthPending","docLink":"./Lean/Meta/Basic.html#Lean.Meta.synthPending","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L440-L440","name":"Lean.Meta.isLevelDefEqAux","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isLevelDefEqAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L439-L439","name":"Lean.Meta.isExprDefEqAux","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isExprDefEqAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L438-L438","name":"Lean.Meta.inferType","docLink":"./Lean/Meta/Basic.html#Lean.Meta.inferType","doc":"Returns the inferred type of the given expression, or fails if it is not type-correct. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L436-L436","name":"Lean.Meta.whnf","docLink":"./Lean/Meta/Basic.html#Lean.Meta.whnf","doc":"Reduces an expression to its Weak Head Normal Form.\nThis is when the topmost expression has been fully reduced,\nbut may contain subexpressions which have not been reduced. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L422-L426","name":"Lean.Meta.useEtaStruct","docLink":"./Lean/Meta/Basic.html#Lean.Meta.useEtaStruct","doc":"`useEtaStruct inductName` return `true` if we eta for structures is enabled for\n  for the inductive datatype `inductName`.\n\n  Recall we have three different settings: `.none` (never use it), `.all` (always use it), `.notClasses`\n  (enabled only for structure-like inductive types that are not classes).\n\n  The parameter `inductName` affects the result only if the current setting is `.notClasses`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L410-L411","name":"Lean.Meta.modifyPostponed","docLink":"./Lean/Meta/Basic.html#Lean.Meta.modifyPostponed","doc":"Modify the array of postponed universe level constraints. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L406-L407","name":"Lean.Meta.setPostponed","docLink":"./Lean/Meta/Basic.html#Lean.Meta.setPostponed","doc":"Set the array of postponed universe level constraints. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L402-L403","name":"Lean.Meta.getPostponed","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getPostponed","doc":"Return the array of postponed universe level constraints. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L398-L399","name":"Lean.Meta.getZetaFVarIds","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getZetaFVarIds","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L395-L396","name":"Lean.Meta.resetZetaFVarIds","docLink":"./Lean/Meta/Basic.html#Lean.Meta.resetZetaFVarIds","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L392-L393","name":"Lean.Meta.getConfig","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getConfig","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L389-L390","name":"Lean.Meta.getLocalInstances","docLink":"./Lean/Meta/Basic.html#Lean.Meta.getLocalInstances","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L386-L387","name":"Lean.Meta.modifyDefEqCache","docLink":"./Lean/Meta/Basic.html#Lean.Meta.modifyDefEqCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L383-L384","name":"Lean.Meta.modifyInferTypeCache","docLink":"./Lean/Meta/Basic.html#Lean.Meta.modifyInferTypeCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L380-L381","name":"Lean.Meta.modifyCache","docLink":"./Lean/Meta/Basic.html#Lean.Meta.modifyCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L374-L375","name":"Lean.Meta.map2MetaM","docLink":"./Lean/Meta/Basic.html#Lean.Meta.map2MetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L371-L372","name":"Lean.Meta.map1MetaM","docLink":"./Lean/Meta/Basic.html#Lean.Meta.map1MetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L368-L369","name":"Lean.Meta.mapMetaM","docLink":"./Lean/Meta/Basic.html#Lean.Meta.mapMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L365-L366","name":"Lean.Meta.liftMetaM","docLink":"./Lean/Meta/Basic.html#Lean.Meta.liftMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L356-L357","name":"Lean.Meta.throwIsDefEqStuck","docLink":"./Lean/Meta/Basic.html#Lean.Meta.throwIsDefEqStuck","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L353-L354","name":"Lean.Meta.instMetaEvalMetaM","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instMetaEvalMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L349-L351","name":"Lean.Meta.MetaM.toIO","docLink":"./Lean/Meta/Basic.html#Lean.Meta.MetaM.toIO","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L346-L347","name":"Lean.Meta.MetaM.run'","docLink":"./Lean/Meta/Basic.html#Lean.Meta.MetaM.run'","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L343-L344","name":"Lean.Meta.MetaM.run","docLink":"./Lean/Meta/Basic.html#Lean.Meta.MetaM.run","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L339-L341","name":"Lean.Meta.instMonadBacktrackSavedStateMetaM","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instMonadBacktrackSavedStateMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L335-L337","name":"Lean.Meta.SavedState.restore","docLink":"./Lean/Meta/Basic.html#Lean.Meta.SavedState.restore","doc":"Restore backtrackable parts of the state. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L331-L332","name":"Lean.Meta.saveState","docLink":"./Lean/Meta/Basic.html#Lean.Meta.saveState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L328-L329","name":"Lean.Meta.instAddMessageContextMetaM","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instAddMessageContextMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L324-L326","name":"Lean.Meta.instMonadEnvMetaM","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instMonadEnvMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L320-L322","name":"Lean.Meta.instMonadMCtxMetaM","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instMonadMCtxMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L317-L318","name":"Lean.Meta.instMonadLCtxMetaM","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instMonadLCtxMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L314-L315","name":"Lean.Meta.instInhabitedMetaM","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instInhabitedMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L312-L312","name":"Lean.Meta.instMonadMetaM","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instMonadMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L308-L308","name":"Lean.Meta.MetaM","docLink":"./Lean/Meta/Basic.html#Lean.Meta.MetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L288-L306","name":"Lean.Meta.Context","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Context","doc":"Contextual information for the `MetaM` monad.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L283-L283","name":"Lean.Meta.instInhabitedSavedState","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instInhabitedSavedState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L280-L283","name":"Lean.Meta.SavedState","docLink":"./Lean/Meta/Basic.html#Lean.Meta.SavedState","doc":"Backtrackable state for the `MetaM` monad.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L275-L275","name":"Lean.Meta.instInhabitedState","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instInhabitedState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L268-L275","name":"Lean.Meta.State","docLink":"./Lean/Meta/Basic.html#Lean.Meta.State","doc":"`MetaM` monad state.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L263-L263","name":"Lean.Meta.instInhabitedPostponedEntry","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instInhabitedPostponedEntry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L256-L263","name":"Lean.Meta.PostponedEntry","docLink":"./Lean/Meta/Basic.html#Lean.Meta.PostponedEntry","doc":"Auxiliary structure for representing postponed universe constraints.\nRemark: the fields `ref` and `rootDefEq?` are used for error message generation only.\nRemark: we may consider improving the error message generation in the future.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L245-L249","name":"Lean.Meta.DefEqContext","docLink":"./Lean/Meta/Basic.html#Lean.Meta.DefEqContext","doc":"\"Context\" for a postponed universe constraint.\n`lhs` and `rhs` are the surrounding `isDefEq` call when the postponed constraint was created.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L239-L239","name":"Lean.Meta.instInhabitedCache","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instInhabitedCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L232-L239","name":"Lean.Meta.Cache","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Cache","doc":"Cache datastructures for type inference, type class resolution, whnf, and definitional equality.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L227-L227","name":"Lean.Meta.DefEqCache","docLink":"./Lean/Meta/Basic.html#Lean.Meta.DefEqCache","doc":"A mapping `(s, t) ↦ isDefEq s t`.\nTODO: consider more efficient representations (e.g., a proper set) and caching policies (e.g., imperfect cache).\nWe should also investigate the impact on memory consumption. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L221-L221","name":"Lean.Meta.WhnfCache","docLink":"./Lean/Meta/Basic.html#Lean.Meta.WhnfCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L220-L220","name":"Lean.Meta.FunInfoCache","docLink":"./Lean/Meta/Basic.html#Lean.Meta.FunInfoCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L219-L219","name":"Lean.Meta.InferTypeCache","docLink":"./Lean/Meta/Basic.html#Lean.Meta.InferTypeCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L217-L217","name":"Lean.Meta.SynthInstanceCache","docLink":"./Lean/Meta/Basic.html#Lean.Meta.SynthInstanceCache","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L211-L212","name":"Lean.Meta.InfoCacheKey.instHashableInfoCacheKey","docLink":"./Lean/Meta/Basic.html#Lean.Meta.InfoCacheKey.instHashableInfoCacheKey","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L208-L208","name":"Lean.Meta.instBEqInfoCacheKey","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instBEqInfoCacheKey","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L208-L208","name":"Lean.Meta.instInhabitedInfoCacheKey","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instInhabitedInfoCacheKey","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L197-L208","name":"Lean.Meta.InfoCacheKey","docLink":"./Lean/Meta/Basic.html#Lean.Meta.InfoCacheKey","doc":"Key for the function information cache.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L185-L192","name":"Lean.Meta.FunInfo","docLink":"./Lean/Meta/Basic.html#Lean.Meta.FunInfo","doc":"Function information cache. See `ParamInfo`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L178-L179","name":"Lean.Meta.ParamInfo.isExplicit","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo.isExplicit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L175-L176","name":"Lean.Meta.ParamInfo.isStrictImplicit","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo.isStrictImplicit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L172-L173","name":"Lean.Meta.ParamInfo.isInstImplicit","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo.isInstImplicit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L169-L170","name":"Lean.Meta.ParamInfo.isImplicit","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo.isImplicit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L167-L167","name":"Lean.Meta.instInhabitedParamInfo","docLink":"./Lean/Meta/Basic.html#Lean.Meta.instInhabitedParamInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L125-L167","name":"Lean.Meta.ParamInfo","docLink":"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo","doc":"Function parameter information cache.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L49-L120","name":"Lean.Meta.Config","docLink":"./Lean/Meta/Basic.html#Lean.Meta.Config","doc":"Configuration flags for the `MetaM` monad.\nMany of them are used to control the `isDefEq` function that checks whether two terms are definitionally equal or not.\nRecall that when `isDefEq` is trying to check whether\n`?m@C a₁ ... aₙ` and `t` are definitionally equal (`?m@C a₁ ... aₙ =?= t`), where\n`?m@C` as a shorthand for `C |- ?m : t` where `t` is the type of `?m`.\nWe solve it using the assignment `?m := fun a₁ ... aₙ => t` if\n1) `a₁ ... aₙ` are pairwise distinct free variables that are ​*not*​ let-variables.\n2) `a₁ ... aₙ` are not in `C`\n3) `t` only contains free variables in `C` and/or `{a₁, ..., aₙ}`\n4) For every metavariable `?m'@C'` occurring in `t`, `C'` is a subprefix of `C`\n5) `?m` does not occur in `t`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Basic.lean#L34-L34","name":"Lean.Meta.isDefEqStuckExceptionId","docLink":"./Lean/Meta/Basic.html#Lean.Meta.isDefEqStuckExceptionId","doc":""}]}