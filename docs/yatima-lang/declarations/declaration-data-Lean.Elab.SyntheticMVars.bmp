{"name":"Lean.Elab.SyntheticMVars","instances":[],"imports":["Init","Lean.Util.ForEachExpr","Lean.Elab.Term","Lean.Elab.Tactic.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/SyntheticMVars.lean#L498-L504","name":"Lean.Elab.Term.runPendingTacticsAt","docLink":"./Lean/Elab/SyntheticMVars.html#Lean.Elab.Term.runPendingTacticsAt","doc":"Collect unassigned metavariables at `e` that have associated tactic blocks, and then execute them using `runTactic`.\nWe use this method at the `match .. with` elaborator when it cannot be postponed anymore, but it is still waiting\nthe result of a tactic block.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/SyntheticMVars.lean#L489-L491","name":"Lean.Elab.Term.elabTermAndSynthesize","docLink":"./Lean/Elab/SyntheticMVars.html#Lean.Elab.Term.elabTermAndSynthesize","doc":"Elaborate `stx`, and make sure all pending synthetic metavariables created while elaborating `stx` are solved. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/SyntheticMVars.lean#L485-L486","name":"Lean.Elab.Term.withSynthesizeLight","docLink":"./Lean/Elab/SyntheticMVars.html#Lean.Elab.Term.withSynthesizeLight","doc":"Similar to `withSynthesize`, but sets `mayPostpone` to `true`, and do not use `synthesizeUsingDefault` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/SyntheticMVars.lean#L481-L482","name":"Lean.Elab.Term.withSynthesize","docLink":"./Lean/Elab/SyntheticMVars.html#Lean.Elab.Term.withSynthesize","doc":"Execute `k`, and synthesize pending synthetic metavariables created while executing `k` are solved.\nIf `mayPostpone == false`, then all of them must be synthesized.\nRemark: even if `mayPostpone == true`, the method still uses `synthesizeUsingDefault` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/SyntheticMVars.lean#L461-L463","name":"Lean.Elab.Term.synthesizeSyntheticMVarsUsingDefault","docLink":"./Lean/Elab/SyntheticMVars.html#Lean.Elab.Term.synthesizeSyntheticMVarsUsingDefault","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/SyntheticMVars.lean#L452-L453","name":"Lean.Elab.Term.synthesizeSyntheticMVarsNoPostponing","docLink":"./Lean/Elab/SyntheticMVars.html#Lean.Elab.Term.synthesizeSyntheticMVarsNoPostponing","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/SyntheticMVars.lean#L415-L446","name":"Lean.Elab.Term.synthesizeSyntheticMVars.loop","docLink":"./Lean/Elab/SyntheticMVars.html#Lean.Elab.Term.synthesizeSyntheticMVars.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/SyntheticMVars.lean#L414-L449","name":"Lean.Elab.Term.synthesizeSyntheticMVars","docLink":"./Lean/Elab/SyntheticMVars.html#Lean.Elab.Term.synthesizeSyntheticMVars","doc":"Try to process pending synthetic metavariables. If `mayPostpone == false`,\n    then `pendingMVars` is `[]` after executing this method.\n\n    It keeps executing `synthesizeSyntheticMVarsStep` while progress is being made.\n    If `mayPostpone == false`, then it applies default instances to `SyntheticMVarKind.typeClass` (if available)\n    metavariables that are still unresolved, and then tries to resolve metavariables\n    with `mayPostpone == false`. That is, we force them to produce error messages and/or commit to\n    a \"best option\". If, after that, we still haven't made progress, we report \"stuck\" errors.\n\n    Remark: we set `ignoreStuckTC := true` when elaborating `simp` arguments. Then,\n    pending TC problems become implicit parameters for the simp theorem.\n  "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/SyntheticMVars.lean#L328-L358","name":"Lean.Elab.Term.runTactic","docLink":"./Lean/Elab/SyntheticMVars.html#Lean.Elab.Term.runTactic","doc":"Try to synthesize a term `val` using the tactic code `tacticCode`, and then assign `mvarId := val`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/SyntheticMVars.lean#L241-L256","name":"Lean.Elab.Term.reportStuckSyntheticMVar","docLink":"./Lean/Elab/SyntheticMVars.html#Lean.Elab.Term.reportStuckSyntheticMVar","doc":"We use this method to report typeclass (and coercion) resolution problems that are \"stuck\".\nThat is, there is nothing else to do, and we don't have enough information to synthesize them using TC resolution.\n"}]}