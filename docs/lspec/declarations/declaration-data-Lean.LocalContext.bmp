{"name":"Lean.LocalContext","instances":[{"typeNames":["Lean.LocalDecl"],"name":"Lean.instInhabitedLocalDecl","className":"Inhabited"},{"typeNames":["Lean.LocalContext"],"name":"Lean.instInhabitedLocalContext","className":"Inhabited"},{"typeNames":["Lean.LocalContext","Lean.LocalDecl"],"name":"Lean.LocalContext.instForInLocalContextLocalDecl","className":"ForIn"},{"typeNames":[],"name":"Lean.instMonadLCtx","className":"Lean.MonadLCtx"}],"imports":["Init","Std.Data.PersistentArray","Lean.Expr","Lean.Hygiene"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L432-L435","name":"Lean.LocalContext.replaceFVarId","docLink":"./Lean/LocalContext.html#Lean.LocalContext.replaceFVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L426-L430","name":"Lean.LocalDecl.replaceFVarId","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.replaceFVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L423-L424","name":"Lean.instMonadLCtx","docLink":"./Lean/LocalContext.html#Lean.instMonadLCtx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L418-L419","name":"Lean.MonadLCtx","docLink":"./Lean/LocalContext.html#Lean.MonadLCtx","doc":"Class used to denote that `m` has a local context. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L399-L413","name":"Lean.LocalContext.sanitizeNames","docLink":"./Lean/LocalContext.html#Lean.LocalContext.sanitizeNames","doc":"If option `pp.sanitizeNames` is set to `true`, add tombstone to shadowed local declaration names and ones contains macroscopes. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L395-L396","name":"Lean.LocalContext.all","docLink":"./Lean/LocalContext.html#Lean.LocalContext.all","doc":"Return `true` if all declarations in `lctx` satisfy `p`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L391-L392","name":"Lean.LocalContext.any","docLink":"./Lean/LocalContext.html#Lean.LocalContext.any","doc":"Return `true` if `lctx` contains a local declaration satisfying `p`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L385-L388","name":"Lean.LocalContext.allM","docLink":"./Lean/LocalContext.html#Lean.LocalContext.allM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L380-L383","name":"Lean.LocalContext.anyM","docLink":"./Lean/LocalContext.html#Lean.LocalContext.anyM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L377-L378","name":"Lean.LocalContext.mkForall","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkForall","doc":"Creates the expression `(x₁:α₁) → .. → (xₙ:αₙ) → b` for free variables `xs = #[x₁, .., xₙ]`,\nsuitably abstracting `b` and the types for each of the `xᵢ`, `αᵢ`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L372-L373","name":"Lean.LocalContext.mkLambda","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkLambda","doc":"Creates the expression `fun x₁ .. xₙ => b` for free variables `xs = #[x₁, .., xₙ]`,\nsuitably abstracting `b` and the types for each of the `xᵢ`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L350-L368","name":"Lean.LocalContext.mkBinding","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkBinding","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L347-L348","name":"Lean.LocalContext.isSubPrefixOf","docLink":"./Lean/LocalContext.html#Lean.LocalContext.isSubPrefixOf","doc":"Given `lctx₁ - exceptFVars` of the form `(x_1 : A_1) ... (x_n : A_n)`, then return true\niff there is a local context `B_1* (x_1 : A_1) ... B_n* (x_n : A_n)` which is a prefix\nof `lctx₂` where `B_i`'s are (possibly empty) sequences of local declarations. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L330-L342","name":"Lean.LocalContext.isSubPrefixOfAux","docLink":"./Lean/LocalContext.html#Lean.LocalContext.isSubPrefixOfAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L327-L328","name":"Lean.LocalContext.findDeclRev?","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findDeclRev?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L324-L325","name":"Lean.LocalContext.findDecl?","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findDecl?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L321-L322","name":"Lean.LocalContext.size","docLink":"./Lean/LocalContext.html#Lean.LocalContext.size","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L318-L319","name":"Lean.LocalContext.foldr","docLink":"./Lean/LocalContext.html#Lean.LocalContext.foldr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L315-L316","name":"Lean.LocalContext.foldl","docLink":"./Lean/LocalContext.html#Lean.LocalContext.foldl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L310-L313","name":"Lean.LocalContext.instForInLocalContextLocalDecl","docLink":"./Lean/LocalContext.html#Lean.LocalContext.instForInLocalContextLocalDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L305-L308","name":"Lean.LocalContext.findDeclRevM?","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findDeclRevM?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L300-L303","name":"Lean.LocalContext.findDeclM?","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findDeclM?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L295-L298","name":"Lean.LocalContext.forM","docLink":"./Lean/LocalContext.html#Lean.LocalContext.forM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L290-L293","name":"Lean.LocalContext.foldrM","docLink":"./Lean/LocalContext.html#Lean.LocalContext.foldrM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L285-L288","name":"Lean.LocalContext.foldlM","docLink":"./Lean/LocalContext.html#Lean.LocalContext.foldlM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L282-L283","name":"Lean.LocalContext.getAt?","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getAt?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L278-L279","name":"Lean.LocalContext.numIndices","docLink":"./Lean/LocalContext.html#Lean.LocalContext.numIndices","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L274-L275","name":"Lean.LocalContext.setBinderInfo","docLink":"./Lean/LocalContext.html#Lean.LocalContext.setBinderInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L264-L272","name":"Lean.LocalContext.modifyLocalDecl","docLink":"./Lean/LocalContext.html#Lean.LocalContext.modifyLocalDecl","doc":"Low-level function for updating the local context.\nAssumptions about `f`, the resulting nested expressions must be definitionally equal to their original values,\nthe `index` nor `fvarId` are modified.  "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L250-L258","name":"Lean.LocalContext.renameUserName","docLink":"./Lean/LocalContext.html#Lean.LocalContext.renameUserName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L243-L247","name":"Lean.LocalContext.setUserName","docLink":"./Lean/LocalContext.html#Lean.LocalContext.setUserName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L240-L241","name":"Lean.LocalContext.lastDecl","docLink":"./Lean/LocalContext.html#Lean.LocalContext.lastDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L234-L237","name":"Lean.LocalContext.getUnusedName","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getUnusedName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L225-L226","name":"Lean.LocalContext.usesUserName","docLink":"./Lean/LocalContext.html#Lean.LocalContext.usesUserName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L218-L222","name":"Lean.LocalContext.findFromUserName?","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findFromUserName?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L209-L215","name":"Lean.LocalContext.pop","docLink":"./Lean/LocalContext.html#Lean.LocalContext.pop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L201-L206","name":"Lean.LocalContext.erase","docLink":"./Lean/LocalContext.html#Lean.LocalContext.erase","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L191-L192","name":"Lean.LocalContext.getFVars","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getFVars","doc":"Return all of the free variables in the given context. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L185-L188","name":"Lean.LocalContext.getFVarIds","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getFVarIds","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L182-L183","name":"Lean.LocalContext.containsFVar","docLink":"./Lean/LocalContext.html#Lean.LocalContext.containsFVar","doc":"Returns true when the lctx contains the free variable `e`.\nPanics if `e` is not an fvar. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L177-L178","name":"Lean.LocalContext.contains","docLink":"./Lean/LocalContext.html#Lean.LocalContext.contains","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L174-L175","name":"Lean.LocalContext.getFVar!","docLink":"./Lean/LocalContext.html#Lean.LocalContext.getFVar!","doc":"Gets the declaration for expression `e` in the local context.\nIf `e` is not a free variable or not present then panics. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L167-L170","name":"Lean.LocalContext.get!","docLink":"./Lean/LocalContext.html#Lean.LocalContext.get!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L164-L165","name":"Lean.LocalContext.findFVar?","docLink":"./Lean/LocalContext.html#Lean.LocalContext.findFVar?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L161-L162","name":"Lean.LocalContext.find?","docLink":"./Lean/LocalContext.html#Lean.LocalContext.find?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L153-L158","name":"Lean.LocalContext.addDecl","docLink":"./Lean/LocalContext.html#Lean.LocalContext.addDecl","doc":"Low level API for adding a local declaration.\nDo not use directly. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L144-L149","name":"Lean.LocalContext.mkLetDecl","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkLetDecl","doc":"Low level API for let declarations. Do not use directly."},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L135-L140","name":"Lean.LocalContext.mkLocalDecl","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkLocalDecl","doc":"Low level API for creating local declarations.\nIt is used to implement actions in the monads `Elab` and `Tactic`.\nIt should not be used directly since the argument `(fvarId : FVarId)` is\nassumed to be unique. You can create a unique fvarId with `mkFreshFVarId`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L127-L128","name":"Lean.LocalContext.isEmpty","docLink":"./Lean/LocalContext.html#Lean.LocalContext.isEmpty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L124-L124","name":"Lean.LocalContext.empty","docLink":"./Lean/LocalContext.html#Lean.LocalContext.empty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L122-L122","name":"Lean.LocalContext.mkEmpty","docLink":"./Lean/LocalContext.html#Lean.LocalContext.mkEmpty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L117-L117","name":"Lean.instInhabitedLocalContext","docLink":"./Lean/LocalContext.html#Lean.instInhabitedLocalContext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L114-L117","name":"Lean.LocalContext","docLink":"./Lean/LocalContext.html#Lean.LocalContext","doc":"A LocalContext is an ordered set of local variable declarations.\nIt is used to store the free variables (also known as local constants) that\nare in scope.\n\nWhen inspecting a goal or expected type in the infoview, the local\ncontext is all of the variables above the `⊢` symbol.\n "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L99-L101","name":"Lean.LocalDecl.hasExprMVar","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.hasExprMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L96-L97","name":"Lean.LocalDecl.toExpr","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.toExpr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L92-L94","name":"Lean.LocalDecl.setBinderInfo","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setBinderInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L88-L90","name":"Lean.LocalDecl.setUserName","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setUserName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L84-L86","name":"Lean.LocalDecl.setValue","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L80-L82","name":"Lean.LocalDecl.hasValue","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.hasValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L76-L78","name":"Lean.LocalDecl.value","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.value","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L72-L74","name":"Lean.LocalDecl.value?","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.value?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L69-L70","name":"Lean.LocalDecl.isAuxDecl","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.isAuxDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L65-L67","name":"Lean.LocalDecl.binderInfo","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.binderInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L61-L63","name":"Lean.LocalDecl.setType","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L57-L59","name":"Lean.LocalDecl.type","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.type","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L53-L55","name":"Lean.LocalDecl.userName","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.userName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L49-L51","name":"Lean.LocalDecl.fvarId","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.fvarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L45-L47","name":"Lean.LocalDecl.setIndex","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.setIndex","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L41-L43","name":"Lean.LocalDecl.index","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.index","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L37-L39","name":"Lean.LocalDecl.isLet","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.isLet","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L32-L34","name":"Lean.LocalDecl.binderInfoEx","docLink":"./Lean/LocalContext.html#Lean.LocalDecl.binderInfoEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L29-L30","name":"Lean.mkLetDeclEx","docLink":"./Lean/LocalContext.html#Lean.mkLetDeclEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L26-L27","name":"Lean.mkLocalDeclEx","docLink":"./Lean/LocalContext.html#Lean.mkLocalDeclEx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L23-L23","name":"Lean.instInhabitedLocalDecl","docLink":"./Lean/LocalContext.html#Lean.instInhabitedLocalDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/LocalContext.lean#L20-L23","name":"Lean.LocalDecl","docLink":"./Lean/LocalContext.html#Lean.LocalDecl","doc":"A declaration for a LocalContext. This is used to register which free variables are in scope.\nEach declaration comes with\n- `index` the position of the decl in the local context\n- `fvarId` the unique id of the free variables\n- `userName` the pretty-printable name of the variable\n- `type` the type.\nA `cdecl` is a local variable, a `ldecl` is a let-bound free variable with a `value : Expr`.\n"}]}