{"name":"Lean.Elab.InfoTree.Main","instances":[{"typeNames":["Lean.Elab.CustomInfo"],"name":"Lean.Elab.instToFormatCustomInfo","className":"Std.ToFormat"}],"imports":["Init","Lean.Data.Position","Lean.Message","Lean.Data.Json","Lean.Meta.Basic","Lean.Meta.PPGoal","Lean.Elab.InfoTree.Types"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L339-L340","name":"Lean.Elab.getInfoTrees","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.getInfoTrees","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L336-L337","name":"Lean.Elab.enableInfoTree","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.enableInfoTree","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L324-L334","name":"Lean.Elab.withInfoHole","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withInfoHole","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L316-L322","name":"Lean.Elab.withMacroExpansionInfo","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withMacroExpansionInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L311-L313","name":"Lean.Elab.assignInfoHoleId","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.assignInfoHoleId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L308-L309","name":"Lean.Elab.getInfoHoleIdAssignment?","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.getInfoHoleIdAssignment?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L296-L306","name":"Lean.Elab.withSaveInfoContext","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withSaveInfoContext","doc":"Resets the trees state `t₀`, runs `x` to produce a new trees\nstate `t₁` and sets the state to be `t₀ ++ (InfoTree.context Γ <$> t₁)`\nwhere `Γ` is the context derived from the monad state. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L290-L291","name":"Lean.Elab.withInfoContext","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withInfoContext","doc":"Run `x` as a new child infotree node with header given by `mkInfo`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L279-L287","name":"Lean.Elab.withInfoTreeContext","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withInfoTreeContext","doc":"Saves the current list of trees `t₀`, runs `x` to produce a new tree list `t₁` and\nruns `mkInfoTree t₁` to get `n : InfoTree` and then restores the trees to be `t₀ ++ [n]`."},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L262-L275","name":"Lean.Elab.withInfoContext'","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.withInfoContext'","doc":"Use this to descend a node on the infotree that is being built.\n\nIt saves the current list of trees `t₀` and resets it and then runs `x >>= mkInfo`, producing either an `i : Info` or a hole id.\nRunning `x >>= mkInfo` will modify the trees state and produce a new list of trees `t₁`.\nIn the `i : Info` case, `t₁` become the children of a node `node i t₁` that is appended to `t₀`.\n "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L249-L254","name":"Lean.Elab.resolveGlobalConstWithInfos","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.resolveGlobalConstWithInfos","doc":"Similar to resolveGlobalConstNoOverloadWithInfo, except if there are multiple name resolutions then it returns them as a list. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L241-L246","name":"Lean.Elab.resolveGlobalConstNoOverloadWithInfo","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.resolveGlobalConstNoOverloadWithInfo","doc":"This does the same job as resolveGlobalConstNoOverload; resolving an identifier\nsyntax to a unique fully resolved name or throwing if there are ambiguities.\nBut also adds this resolved name to the infotree. This means that when you hover\nover a name in the sourcefile you will see the fully resolved name in the hover info."},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L234-L235","name":"Lean.Elab.addCompletionInfo","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.addCompletionInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L230-L232","name":"Lean.Elab.pushInfoLeaf","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.pushInfoLeaf","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L226-L228","name":"Lean.Elab.pushInfoTree","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.pushInfoTree","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L221-L224","name":"Lean.Elab.getResetInfoTrees","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.getResetInfoTrees","doc":"Returns the current array of InfoTrees and resets it to an empty array. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L200-L212","name":"Lean.Elab.InfoTree.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.InfoTree.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L196-L198","name":"Lean.Elab.Info.updateContext?","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.Info.updateContext?","doc":"Helper function for propagating the tactic metavariable context to its children nodes.\n  We need this function because we preserve `TacticInfo` nodes during backtracking *and* their\n  children. Moreover, we backtrack the metavariable context to undo metavariable assignments.\n  `TacticInfo` nodes save the metavariable context before/after the tactic application, and\n  can be pretty printed without any extra information. This is not the case for `TermInfo` nodes.\n  Without this function, the formatting method would often fail when processing `TermInfo` nodes\n  that are children of `TacticInfo` nodes that have been preserved during backtracking.\n  Saving the metavariable context at `TermInfo` nodes is also not a good option because\n  at `TermInfo` creation time, the metavariable context often miss information, e.g.,\n  a TC problem has not been resolved, a postponed subterm has not been elaborated, etc.\n\n  See `Term.SavedState.restore`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L170-L180","name":"Lean.Elab.Info.toElabInfo?","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.Info.toElabInfo?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L158-L168","name":"Lean.Elab.Info.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.Info.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L155-L156","name":"Lean.Elab.FieldRedeclInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.FieldRedeclInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L152-L153","name":"Lean.Elab.FVarAliasInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.FVarAliasInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L149-L150","name":"Lean.Elab.UserWidgetInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.UserWidgetInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L144-L147","name":"Lean.Elab.MacroExpansionInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.MacroExpansionInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L137-L142","name":"Lean.Elab.TacticInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.TacticInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L131-L135","name":"Lean.Elab.ContextInfo.ppGoals","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.ppGoals","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L127-L129","name":"Lean.Elab.FieldInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.FieldInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L124-L125","name":"Lean.Elab.CommandInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CommandInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L118-L122","name":"Lean.Elab.CompletionInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CompletionInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L110-L116","name":"Lean.Elab.TermInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.TermInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L107-L108","name":"Lean.Elab.TermInfo.runMetaM","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.TermInfo.runMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L88-L89","name":"Lean.Elab.ContextInfo.ppSyntax","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.ppSyntax","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L84-L86","name":"Lean.Elab.ContextInfo.toPPContext","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.toPPContext","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L73-L82","name":"Lean.Elab.ContextInfo.runMetaM","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.runMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L65-L71","name":"Lean.Elab.InfoTree.substitute","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.InfoTree.substitute","doc":"Instantiate the holes on the given `tree` with the assignment table.\n(analoguous to instantiating the metavariables in an expression) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L53-L61","name":"Lean.Elab.InfoTree.findInfo?","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.InfoTree.findInfo?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L51-L51","name":"Lean.Elab.instToFormatCustomInfo","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.instToFormatCustomInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L48-L49","name":"Lean.Elab.CustomInfo.format","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CustomInfo.format","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L38-L46","name":"Lean.Elab.CompletionInfo.stx","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.CompletionInfo.stx","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L32-L34","name":"Lean.Elab.ContextInfo.save","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.save","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Main.lean#L22-L30","name":"Lean.Elab.ContextInfo.saveNoFileMap","docLink":"./Lean/Elab/InfoTree/Main.html#Lean.Elab.ContextInfo.saveNoFileMap","doc":""}]}