{"name":"Lean.Elab.InfoTree.Types","instances":[{"typeNames":["Lean.Elab.ContextInfo"],"name":"Lean.Elab.instInhabitedContextInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.ElabInfo"],"name":"Lean.Elab.instInhabitedElabInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.TermInfo"],"name":"Lean.Elab.instInhabitedTermInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.CommandInfo"],"name":"Lean.Elab.instInhabitedCommandInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.FieldInfo"],"name":"Lean.Elab.instInhabitedFieldInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.TacticInfo"],"name":"Lean.Elab.instInhabitedTacticInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.MacroExpansionInfo"],"name":"Lean.Elab.instInhabitedMacroExpansionInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.CustomInfo"],"name":"Lean.Elab.instInhabitedCustomInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.UserWidgetInfo"],"name":"Lean.Elab.instInhabitedUserWidgetInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.Info"],"name":"Lean.Elab.instInhabitedInfo","className":"Inhabited"},{"typeNames":["Lean.Elab.InfoTree"],"name":"Lean.Elab.instInhabitedInfoTree","className":"Inhabited"},{"typeNames":["Lean.Elab.InfoState"],"name":"Lean.Elab.instInhabitedInfoState","className":"Inhabited"},{"typeNames":[],"name":"Lean.Elab.instMonadInfoTree","className":"Lean.Elab.MonadInfoTree"}],"imports":["Init","Lean.Message","Lean.Data.Json"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L190-L191","name":"Lean.Elab.setInfoState","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.setInfoState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L186-L188","name":"Lean.Elab.instMonadInfoTree","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instMonadInfoTree","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L180-L182","name":"Lean.Elab.MonadInfoTree","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L178-L178","name":"Lean.Elab.instInhabitedInfoState","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedInfoState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L171-L178","name":"Lean.Elab.InfoState","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState","doc":"This structure is the state that is being used to build an InfoTree object.\nDuring elaboration, some parts of the info tree may be `holes` which need to be filled later.\nThe `assignments` field is used to assign these holes.\nThe `trees` field is a list of pending child trees for the infotree node currently being built.\n\nYou should not need to use `InfoState` directly, instead infotrees should be built with the help of the methods here\nsuch as `pushInfoLeaf` to create leaf nodes and `withInfoContext` to create a nested child node.\n\nTo see how `trees` is used, look at the function body of `withInfoContext'`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L159-L159","name":"Lean.Elab.instInhabitedInfoTree","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedInfoTree","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L152-L159","name":"Lean.Elab.InfoTree","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoTree","doc":"The InfoTree is a structure that is generated during elaboration and used\n    by the language server to look up information about objects at particular points\n    in the Lean document. For example, tactic information and expected type information in\n    the infoview and information about completions.\n\n    The infotree consists of nodes which may have child nodes. Each node\n    has an `Info` object that contains details about what kind of information\n    is present. Each `Info` object also contains a `Syntax` instance, this is used to\n    map positions in the Lean document to particular info objects.\n\n    An example of a function that extracts information from an infotree for a given\n    position is `InfoTree.goalsAt?` which finds `TacticInfo`.\n\n    Information concerning expressions requires that a context also be saved.\n    `context` nodes store a local context that is used to process expressions\n    in nodes below.\n\n    Because the info tree is generated during elaboration, some parts of the infotree\n    for a particular piece of syntax may not be ready yet. Hence InfoTree supports metavariable-like\n    `hole`s which are filled in later in the same way that unassigned metavariables are.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L129-L129","name":"Lean.Elab.instInhabitedInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L118-L129","name":"Lean.Elab.Info","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info","doc":"Header information for a node in `InfoTree`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L114-L115","name":"Lean.Elab.FieldRedeclInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldRedeclInfo","doc":"Contains the syntax of an identifier which is part of a field redeclaration, like:\n```\nstructure Foo := x : Nat\nstructure Bar extends Foo :=\n  x := 0\n--^ here\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L101-L103","name":"Lean.Elab.FVarAliasInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FVarAliasInfo","doc":"Specifies that the given free variables should be considered semantically identical in the current local context.\nUsed for e.g. connecting variables before and after `match` generalization.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L95-L95","name":"Lean.Elab.instInhabitedUserWidgetInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedUserWidgetInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L89-L95","name":"Lean.Elab.UserWidgetInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.UserWidgetInfo","doc":"An info that represents a user-widget.\nUser-widgets are custom pieces of code that run on the editor client.\nYou can learn about user widgets at `src/Lean/Widget/UserWidget`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L83-L83","name":"Lean.Elab.instInhabitedCustomInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedCustomInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L80-L83","name":"Lean.Elab.CustomInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CustomInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L78-L78","name":"Lean.Elab.instInhabitedMacroExpansionInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedMacroExpansionInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L74-L78","name":"Lean.Elab.MacroExpansionInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MacroExpansionInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L72-L72","name":"Lean.Elab.instInhabitedTacticInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedTacticInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L67-L72","name":"Lean.Elab.TacticInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TacticInfo","doc":"The information needed to render the tactic state in the infoview.\n\n    We store the list of goals before and after the execution of a tactic.\n    We also store the metavariable context at each time since we want metavariables\n    unassigned at tactic execution time to be displayed as `?m...`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L60-L60","name":"Lean.Elab.instInhabitedFieldInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedFieldInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L52-L60","name":"Lean.Elab.FieldInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.FieldInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L41-L49","name":"Lean.Elab.CompletionInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CompletionInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L39-L39","name":"Lean.Elab.instInhabitedCommandInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedCommandInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L38-L39","name":"Lean.Elab.CommandInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.CommandInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L36-L36","name":"Lean.Elab.instInhabitedTermInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedTermInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L31-L36","name":"Lean.Elab.TermInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.TermInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L29-L29","name":"Lean.Elab.instInhabitedElabInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedElabInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L26-L29","name":"Lean.Elab.ElabInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ElabInfo","doc":"An elaboration step "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L23-L23","name":"Lean.Elab.instInhabitedContextInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.instInhabitedContextInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/InfoTree/Types.lean#L15-L23","name":"Lean.Elab.ContextInfo","docLink":"./Lean/Elab/InfoTree/Types.html#Lean.Elab.ContextInfo","doc":"Context after executing `liftTermElabM`.\nNote that the term information collected during elaboration may contain metavariables, and their\nassignments are stored at `mctx`. "}]}