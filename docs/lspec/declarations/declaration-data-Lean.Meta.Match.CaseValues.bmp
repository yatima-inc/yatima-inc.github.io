{"name":"Lean.Meta.Match.CaseValues","instances":[{"typeNames":["Lean.Meta.CaseValueSubgoal"],"name":"Lean.Meta.instInhabitedCaseValueSubgoal","className":"Inhabited"},{"typeNames":["Lean.Meta.CaseValuesSubgoal"],"name":"Lean.Meta.instInhabitedCaseValuesSubgoal","className":"Inhabited"}],"imports":["Init","Lean.Meta.Tactic.Subst","Lean.Meta.Tactic.Clear","Lean.Meta.Match.Value"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Match/CaseValues.lean#L83-L102","name":"Lean.Meta.caseValues.loop","docLink":"./Lean/Meta/Match/CaseValues.html#Lean.Meta.caseValues.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Match/CaseValues.lean#L82-L103","name":"Lean.Meta.caseValues","docLink":"./Lean/Meta/Match/CaseValues.html#Lean.Meta.caseValues","doc":"Split goal `... |- C x` into values.size + 1 subgoals\n  1) `..., (h_1 : x = value[0])  |- C value[0]`\n  ...\n  n) `..., (h_n : x = value[n - 1])  |- C value[n - 1]`\n  n+1) `..., (h_1 : x != value[0]) ... (h_n : x != value[n-1]) |- C x`\n  where `n = values.size`\n  where `fvarId` is `x`s id.\n  The type of `x` must have decidable equality.\n\n  Remark: the last subgoal is for the \"else\" catchall case, and its `subst` is `{}`.\n  Remark: the fiels `newHs` has size 1 forall but the last subgoal.\n\n  If `substNewEqs = true`, then the new `h_i` equality hypotheses are substituted in the first `n` cases.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Match/CaseValues.lean#L65-L65","name":"Lean.Meta.instInhabitedCaseValuesSubgoal","docLink":"./Lean/Meta/Match/CaseValues.html#Lean.Meta.instInhabitedCaseValuesSubgoal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Match/CaseValues.lean#L61-L65","name":"Lean.Meta.CaseValuesSubgoal","docLink":"./Lean/Meta/Match/CaseValues.html#Lean.Meta.CaseValuesSubgoal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Match/CaseValues.lean#L55-L59","name":"Lean.Meta.caseValue","docLink":"./Lean/Meta/Match/CaseValues.html#Lean.Meta.caseValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Match/CaseValues.lean#L16-L16","name":"Lean.Meta.instInhabitedCaseValueSubgoal","docLink":"./Lean/Meta/Match/CaseValues.html#Lean.Meta.instInhabitedCaseValueSubgoal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Match/CaseValues.lean#L12-L16","name":"Lean.Meta.CaseValueSubgoal","docLink":"./Lean/Meta/Match/CaseValues.html#Lean.Meta.CaseValueSubgoal","doc":""}]}