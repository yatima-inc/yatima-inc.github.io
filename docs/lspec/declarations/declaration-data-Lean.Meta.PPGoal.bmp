{"name":"Lean.Meta.PPGoal","instances":[],"imports":["Init","Lean.Meta.InferType","Lean.Meta.MatchUtil"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L226-L256","name":"Lean.Meta.ppGoal.ppVars","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ppGoal.ppVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L216-L225","name":"Lean.Meta.ppGoal.pushPending","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ppGoal.pushPending","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L203-L268","name":"Lean.Meta.ppGoal","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ppGoal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L196-L201","name":"Lean.Meta.getGoalPrefix","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.getGoalPrefix","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L179-L189","name":"Lean.Meta.ToHide.collect","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.collect","doc":"If `pp.inaccessibleNames == false`, then collect two sets of `FVarId`s : `hiddenInaccessible` and `hiddenInaccessibleProp`\n1- `hiddenInaccessible` contains `FVarId`s of free variables with inaccessible names that\n    a) are not propositions or\n    b) are propositions containing \"visible\" names.\n2- `hiddenInaccessibleProp` contains `FVarId`s of free variables with inaccessible names that are propositions\n   containing \"visible\" names.\nBoth sets do not contain `FVarId`s that contain visible backward or forward dependencies.\nThe `goalTarget` counts as a forward dependency.\n\nWe say a name is visible if it is a free variable with FVarId not in `hiddenInaccessible` nor `hiddenInaccessibleProp`\n\nFor propositions in `hiddenInaccessibleProp`, we show only their types when displaying a goal.\n\nRemark: when `pp.inaccessibleNames == true`, we still compute `hiddenInaccessibleProp` to prevent the\ngoal from being littered with irrelevant names.\n\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L144-L148","name":"Lean.Meta.ToHide.fixpoint","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.fixpoint","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L126-L142","name":"Lean.Meta.ToHide.fixpointStep","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.fixpointStep","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L113-L124","name":"Lean.Meta.ToHide.visitVisibleExpr.visit","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.visitVisibleExpr.visit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L110-L124","name":"Lean.Meta.ToHide.visitVisibleExpr","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.visitVisibleExpr","doc":"If `e` is visible, then any inaccessible in `e` marked as hidden should be unmarked. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L104-L107","name":"Lean.Meta.ToHide.hasInaccessibleNameDep","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.hasInaccessibleNameDep","doc":"Return true if the given local declaration has a \"nonvisible dependency\", that is, it contains\na free variable that is `hiddenInaccessible` or `hiddenInaccessibleProp` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L98-L100","name":"Lean.Meta.ToHide.hasVisibleDep","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.hasVisibleDep","doc":"Return true if the given local declaration has a \"visible dependency\", that is, it contains\n   a free variable that is `hiddenInaccessible`\n\n   Recall that hiddenInaccessibleProps are visible, only their names are hidden "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L80-L85","name":"Lean.Meta.ToHide.moveToHiddeProp","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.moveToHiddeProp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L73-L78","name":"Lean.Meta.ToHide.unmark","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.unmark","doc":"If `fvarId` isMarked, then unmark it. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L68-L70","name":"Lean.Meta.ToHide.isMarked","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.isMarked","doc":"Return true if `fvarId` is marked as an hidden inaccessible or inaccessible proposition "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L65-L65","name":"Lean.Meta.ToHide.M","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L56-L63","name":"Lean.Meta.ToHide.Context","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L49-L54","name":"Lean.Meta.ToHide.State","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.ToHide.State","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L44-L45","name":"Lean.Meta.withPPForTacticGoal","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.withPPForTacticGoal","doc":"Set pretty-printing options (`pp.showLetValues = true` and `pp.inaccessibleNames = true`) for visualizing goals.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L38-L39","name":"Lean.Meta.withPPShowLetValues","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.withPPShowLetValues","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L35-L36","name":"Lean.Meta.withPPShowLetValuesImp","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.withPPShowLetValuesImp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L32-L33","name":"Lean.Meta.withPPInaccessibleNames","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.withPPInaccessibleNames","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L29-L30","name":"Lean.Meta.withPPInaccessibleNamesImp","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.withPPInaccessibleNamesImp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L23-L23","name":"Lean.Meta.pp.showLetValues","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.pp.showLetValues","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L17-L17","name":"Lean.Meta.pp.inaccessibleNames","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.pp.inaccessibleNames","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/PPGoal.lean#L11-L11","name":"Lean.Meta.pp.auxDecls","docLink":"./Lean/Meta/PPGoal.html#Lean.Meta.pp.auxDecls","doc":""}]}