{"name":"Lean.Parser.Term","instances":[{"typeNames":["Lean.TSyntax","List.cons","Lean.SyntaxNodeKind","Lean.Name.str","Lean.Name.anonymous","List.nil","Lean.TSyntax","List.cons","Lean.SyntaxNodeKind","Lean.Name.str","Lean.Name.anonymous","List.nil"],"name":"Lean.Parser.Term.instCoeTSyntaxConsSyntaxNodeKindStrAnonymousNil","className":"Coe"},{"typeNames":["Lean.TSyntax","List.cons","Lean.SyntaxNodeKind","Lean.Name.str","Lean.Name.anonymous","List.nil","Lean.TSyntax","List.cons","Lean.SyntaxNodeKind","Lean.Name.str","Lean.Name.anonymous","List.nil"],"name":"Lean.Parser.Term.instCoeTSyntaxConsSyntaxNodeKindStrAnonymousNil_1","className":"Coe"}],"imports":["Init","Lean.Parser.Attr","Lean.Parser.Level"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L351-L351","name":"Lean.Parser.Level.quot","docLink":"./Lean/Parser/Term.html#Lean.Parser.Level.quot","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L349-L349","name":"Lean.Parser.Tactic.quotSeq","docLink":"./Lean/Parser/Term.html#Lean.Parser.Tactic.quotSeq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L348-L348","name":"Lean.Parser.Tactic.quot","docLink":"./Lean/Parser/Term.html#Lean.Parser.Tactic.quot","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L344-L344","name":"Lean.Parser.Term.dotIdent","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.dotIdent","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L342-L342","name":"Lean.Parser.Term.dynamicQuot","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.dynamicQuot","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L340-L340","name":"Lean.Parser.Term.stateRefT","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.stateRefT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L337-L337","name":"Lean.Parser.Term.macroLastArg","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.macroLastArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L336-L336","name":"Lean.Parser.Term.macroDollarArg","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.macroDollarArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L335-L335","name":"Lean.Parser.Term.macroArg","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.macroArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L332-L332","name":"Lean.Parser.Term.assert","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.assert","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L331-L331","name":"Lean.Parser.Term.dbgTrace","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.dbgTrace","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L330-L330","name":"Lean.Parser.Term.unreachable","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.unreachable","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L329-L329","name":"Lean.Parser.Term.panic","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.panic","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L327-L327","name":"Lean.Parser.Term.attr.quot","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.attr.quot","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L326-L326","name":"Lean.Parser.Term.matchDiscr.quot","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.matchDiscr.quot","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L325-L325","name":"Lean.Parser.Term.bracketedBinder.quot","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.bracketedBinder.quot","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L324-L324","name":"Lean.Parser.Term.bracketedBinderF","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.bracketedBinderF","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L323-L323","name":"Lean.Parser.Term.funBinder.quot","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.funBinder.quot","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L320-L320","name":"Lean.Parser.Term.subst","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.subst","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L318-L318","name":"Lean.Parser.Term.pipeCompletion","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.pipeCompletion","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L317-L317","name":"Lean.Parser.Term.pipeProj","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.pipeProj","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L315-L315","name":"Lean.Parser.Term.namedPattern","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.namedPattern","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L314-L314","name":"Lean.Parser.Term.explicitUniv","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.explicitUniv","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L310-L312","name":"Lean.Parser.Term.isIdent","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.isIdent","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L308-L308","name":"Lean.Parser.Term.arrow","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.arrow","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L307-L307","name":"Lean.Parser.Term.completion","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.completion","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L306-L306","name":"Lean.Parser.Term.proj","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.proj","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L304-L304","name":"Lean.Parser.Term.app","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.app","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L297-L300","name":"Lean.Parser.Term.argument","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.argument","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L296-L296","name":"Lean.Parser.Term.ellipsis","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.ellipsis","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L295-L295","name":"Lean.Parser.Term.namedArgument","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.namedArgument","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L293-L293","name":"Lean.Parser.Term.noErrorIfUnused","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.noErrorIfUnused","doc":"Helper parser for marking `match`-alternatives that should not trigger errors if unused.\nWe use them to implement `macro_rules` and `elab_rules`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L287-L287","name":"Lean.Parser.Term.defaultOrOfNonempty","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.defaultOrOfNonempty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L285-L285","name":"Lean.Parser.Term.waitIfContainsMVar","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.waitIfContainsMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L284-L284","name":"Lean.Parser.Term.waitIfTypeContainsMVar","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.waitIfTypeContainsMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L283-L283","name":"Lean.Parser.Term.waitIfTypeMVar","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.waitIfTypeMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L282-L282","name":"Lean.Parser.Term.letMVar","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.letMVar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L280-L280","name":"Lean.Parser.Term.noImplicitLambda","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.noImplicitLambda","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L279-L279","name":"Lean.Parser.Term.ensureExpectedType","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.ensureExpectedType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L278-L278","name":"Lean.Parser.Term.ensureTypeOf","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.ensureTypeOf","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L277-L277","name":"Lean.Parser.Term.typeOf","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.typeOf","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L276-L276","name":"Lean.Parser.Term.withDeclName","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.withDeclName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L275-L275","name":"Lean.Parser.Term.declName","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.declName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L273-L273","name":"Lean.Parser.Term.forInMacro'","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.forInMacro'","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L272-L272","name":"Lean.Parser.Term.forInMacro","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.forInMacro","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L270-L270","name":"Lean.Parser.Term.binop_lazy","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.binop_lazy","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L269-L269","name":"Lean.Parser.Term.binop","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.binop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L268-L268","name":"Lean.Parser.Term.binrel_no_prop","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.binrel_no_prop","doc":"Similar to `binrel`, but coerse `Prop` arguments into `Bool`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L266-L266","name":"Lean.Parser.Term.binrel","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.binrel","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L264-L264","name":"Lean.Parser.Term.noindex","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.noindex","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L262-L262","name":"Lean.Parser.Term.matchAltsWhereDecls","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.matchAltsWhereDecls","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L259-L259","name":"Lean.Parser.Term.whereDecls","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.whereDecls","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L256-L256","name":"Lean.Parser.Term.letrec","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.letrec","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L254-L254","name":"Lean.Parser.Term.letRecDecls","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.letRecDecls","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L253-L253","name":"Lean.Parser.Term.letRecDecl","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.letRecDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L252-L252","name":"Lean.Parser.Term.attributes","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.attributes","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L250-L250","name":"Lean.Parser.Term.attrInstance","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.attrInstance","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L249-L249","name":"Lean.Parser.Term.attrKind","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.attrKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L248-L248","name":"Lean.Parser.Term.local","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.local","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L247-L247","name":"Lean.Parser.Term.scoped","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.scoped","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L245-L245","name":"Lean.Parser.Term.have","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.have","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L244-L244","name":"Lean.Parser.Term.haveDecl","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.haveDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L243-L243","name":"Lean.Parser.Term.haveEqnsDecl","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.haveEqnsDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L242-L242","name":"Lean.Parser.Term.haveIdDecl","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.haveIdDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L241-L241","name":"Lean.Parser.Term.haveIdLhs","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.haveIdLhs","doc":"like `let_fun` but with optional name "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L237-L238","name":"Lean.Parser.Term.instCoeTSyntaxConsSyntaxNodeKindStrAnonymousNil_1","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.instCoeTSyntaxConsSyntaxNodeKindStrAnonymousNil_1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L235-L235","name":"Lean.Parser.Term.let_tmp","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.let_tmp","doc":"`let`-declaration that is only included in the elaborated term if variable is still there.\nIt is often used when building macros.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L230-L230","name":"Lean.Parser.Term.let_delayed","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.let_delayed","doc":"`let_delayed x := v; b` is similar to `let x := v; b`, but `b` is elaborated before `v`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L226-L226","name":"Lean.Parser.Term.let_fun","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.let_fun","doc":"`let_fun x := v; b` is syntax sugar for `(fun x => b) v`. It is very similar to `let x := v; b`, but they are not equivalent.\nIn `let_fun`, the value `v` has been abstracted away and cannot be accessed in `b`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L221-L221","name":"Lean.Parser.Term.let","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.let","doc":"`let` is used to declare a local definition. Example:\n```\nlet x := 1\nlet y := x + 1\nx + y\n```\nSince functions are first class citizens in Lean, you can use `let` to declare local functions too.\n```\nlet double := fun x => 2*x\ndouble (double 3)\n```\nFor recursive definitions, you should use `let rec`.\nYou can also perform pattern matching using `let`. For example, assume `p` has type `Nat × Nat`, then you can write\n```\nlet (x, y) := p\nx + y\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L201-L201","name":"Lean.Parser.Term.letDecl","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.letDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L199-L199","name":"Lean.Parser.Term.letEqnsDecl","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.letEqnsDecl","doc":"Remark: the following `(\" := \" <|> matchAlts)` is a hack we use to produce a better error message at `letDecl`.\nConsider this following example\n```\ndef myFun (n : Nat) : IO Nat :=\n  let q ← (10 : Nat)\n  n + q\n```\nWithout the hack, we get the error `expected '|'` at `←`. Reason: at `letDecl`, we use the parser `(letIdDecl <|> letPatDecl <|> letEqnsDecl)`,\n`letIdDecl` and `letEqnsDecl` have the same prefix `letIdLhs`, but `letIdDecl` uses `atomic`.\nNote that the hack relies on the fact that the parser `\":=\"` never succeeds at `(\" := \" <|> matchAlts)`. It is there just to make sure we produce the error `expected ':=' or '|'`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L186-L186","name":"Lean.Parser.Term.letPatDecl","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.letPatDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L185-L185","name":"Lean.Parser.Term.letIdDecl","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.letIdDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L184-L184","name":"Lean.Parser.Term.letIdLhs","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.letIdLhs","doc":"Remark: we use `checkWsBefore` to ensure `let x[i] := e; b` is not parsed as `let x [i] := e; b` where `[i]` is an `instBinder`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L182-L182","name":"Lean.Parser.Term.letIdBinder","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.letIdBinder","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L180-L180","name":"Lean.Parser.Term.doubleQuotedName","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.doubleQuotedName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L177-L177","name":"Lean.Parser.Term.quotedName","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.quotedName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L176-L176","name":"Lean.Parser.Term.borrowed","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.borrowed","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L174-L174","name":"Lean.Parser.Term.trailing_parser","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.trailing_parser","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L173-L173","name":"Lean.Parser.Term.leading_parser","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.leading_parser","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L172-L172","name":"Lean.Parser.Term.withAnonymousAntiquot","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.withAnonymousAntiquot","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L171-L171","name":"Lean.Parser.Term.optExprPrecedence","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.optExprPrecedence","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L169-L169","name":"Lean.Parser.Term.fun","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.fun","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L168-L168","name":"Lean.Parser.Term.basicFun","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.basicFun","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L166-L166","name":"Lean.Parser.Term.funBinder","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.funBinder","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L165-L165","name":"Lean.Parser.Term.funStrictImplicitBinder","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.funStrictImplicitBinder","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L164-L164","name":"Lean.Parser.Term.funImplicitBinder","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.funImplicitBinder","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L162-L162","name":"Lean.Parser.Term.nomatch","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.nomatch","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L161-L161","name":"Lean.Parser.Term.match","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.match","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L159-L159","name":"Lean.Parser.Term.motive","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.motive","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L157-L157","name":"Lean.Parser.Term.generalizingParam","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.generalizingParam","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L156-L156","name":"Lean.Parser.Term.falseVal","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.falseVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L155-L155","name":"Lean.Parser.Term.trueVal","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.trueVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L153-L153","name":"Lean.Parser.Term.matchDiscr","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.matchDiscr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L150-L151","name":"Lean.Parser.Term.matchAlts","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.matchAlts","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L147-L148","name":"Lean.Parser.Term.instCoeTSyntaxConsSyntaxNodeKindStrAnonymousNil","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.instCoeTSyntaxConsSyntaxNodeKindStrAnonymousNil","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L145-L145","name":"Lean.Parser.Term.matchAltExpr","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.matchAltExpr","doc":"Useful for syntax quotations. Note that generic patterns such as `` `(matchAltExpr| | ... => $rhs) `` should also\nwork with other `rhsParser`s (of arity 1). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L139-L141","name":"Lean.Parser.Term.matchAlt","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.matchAlt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L137-L137","name":"Lean.Parser.Term.forall","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.forall","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L134-L134","name":"Lean.Parser.Term.depArrow","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.depArrow","doc":"It is feasible to support dependent arrows such as `{α} → α → α` without sacrificing the quality of the error messages for the longer case.\n`{α} → α → α` would be short for `{α : Type} → α → α`\nHere is the encoding:\n```\ndef implicitShortBinder := node `Lean.Parser.Term.implicitBinder $ \"{\" >> many1 binderIdent >> pushNone >> \"}\"\ndef depArrowShortPrefix := try (implicitShortBinder >> unicodeSymbol \" → \" \" -> \")\ndef depArrowLongPrefix  := bracketedBinder true >> unicodeSymbol \" → \" \" -> \"\ndef depArrowPrefix      := depArrowShortPrefix <|> depArrowLongPrefix\n@[builtinTermParser] def depArrow := leading_parser depArrowPrefix >> termParser\n```\nNote that no changes in the elaborator are needed.\nWe decided to not use it because terms such as `{α} → α → α` may look too cryptic.\nNote that we did not add a `explicitShortBinder` parser since `(α) → α → α` is really cryptic as a short for `(α : Type) → α → α`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L116-L117","name":"Lean.Parser.Term.bracketedBinder","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.bracketedBinder","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L115-L115","name":"Lean.Parser.Term.instBinder","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.instBinder","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L114-L114","name":"Lean.Parser.Term.strictImplicitBinder","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.strictImplicitBinder","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L113-L113","name":"Lean.Parser.Term.strictImplicitRightBracket","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.strictImplicitRightBracket","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L112-L112","name":"Lean.Parser.Term.strictImplicitLeftBracket","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.strictImplicitLeftBracket","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L111-L111","name":"Lean.Parser.Term.implicitBinder","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.implicitBinder","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L110-L110","name":"Lean.Parser.Term.explicitBinder","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.explicitBinder","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L109-L109","name":"Lean.Parser.Term.binderDefault","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.binderDefault","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L108-L108","name":"Lean.Parser.Term.binderTactic","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.binderTactic","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L107-L107","name":"Lean.Parser.Term.binderType","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.binderType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L106-L106","name":"Lean.Parser.Term.binderIdent","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.binderIdent","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L105-L105","name":"Lean.Parser.Term.inaccessible","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.inaccessible","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L104-L104","name":"Lean.Parser.Term.explicit","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.explicit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L103-L103","name":"Lean.Parser.Term.optType","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.optType","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L102-L102","name":"Lean.Parser.Term.typeSpec","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.typeSpec","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L98-L101","name":"Lean.Parser.Term.structInst","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.structInst","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L97-L97","name":"Lean.Parser.Term.optEllipsis","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.optEllipsis","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L96-L96","name":"Lean.Parser.Term.structInstFieldAbbrev","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.structInstFieldAbbrev","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L95-L95","name":"Lean.Parser.Term.structInstField","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.structInstField","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L94-L94","name":"Lean.Parser.Term.structInstLVal","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.structInstLVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L93-L93","name":"Lean.Parser.Term.structInstArrayRef","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.structInstArrayRef","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L92-L92","name":"Lean.Parser.Term.show","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.show","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L91-L91","name":"Lean.Parser.Term.suffices","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.suffices","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L90-L90","name":"Lean.Parser.Term.sufficesDecl","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.sufficesDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L89-L89","name":"Lean.Parser.Term.showRhs","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.showRhs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L88-L88","name":"Lean.Parser.Term.fromTerm","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.fromTerm","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L87-L87","name":"Lean.Parser.Term.optIdent","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.optIdent","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L86-L86","name":"Lean.Parser.Term.anonymousCtor","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.anonymousCtor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L85-L85","name":"Lean.Parser.Term.paren","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.paren","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L84-L84","name":"Lean.Parser.Term.parenSpecial","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.parenSpecial","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L83-L83","name":"Lean.Parser.Term.tupleTail","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.tupleTail","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L82-L82","name":"Lean.Parser.Term.typeAscription","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.typeAscription","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L81-L81","name":"Lean.Parser.Term.cdot","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.cdot","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L80-L80","name":"Lean.Parser.Term.sorry","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.sorry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L79-L79","name":"Lean.Parser.Term.syntheticHole","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.syntheticHole","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L78-L78","name":"Lean.Parser.Term.hole","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.hole","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L77-L77","name":"Lean.Parser.Term.prop","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.prop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L76-L76","name":"Lean.Parser.Term.sort","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.sort","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L75-L75","name":"Lean.Parser.Term.type","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.type","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L74-L74","name":"Lean.Parser.Term.char","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.char","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L73-L73","name":"Lean.Parser.Term.str","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.str","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L72-L72","name":"Lean.Parser.Term.scientific","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.scientific","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L71-L71","name":"Lean.Parser.Term.num","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.num","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L70-L70","name":"Lean.Parser.Term.ident","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.ident","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L67-L67","name":"Lean.Parser.Term.optSemicolon","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.optSemicolon","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L64-L64","name":"Lean.Parser.Term.byTactic'","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.byTactic'","doc":"This is the same as `byTactic`, but it uses a different syntax kind. This is\nused by `show` and `suffices` instead of `byTactic` because these syntaxes don't\nsupport arbitrary terms where `byTactic` is accepted. Mathport uses this to e.g.\nsafely find-replace `by exact $e` by `$e` in any context without causing\nincorrect syntax when the full expression is `show $T by exact $e`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L56-L56","name":"Lean.Parser.Term.byTactic","docLink":"./Lean/Parser/Term.html#Lean.Parser.Term.byTactic","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L50-L50","name":"Lean.Parser.semicolonOrLinebreak","docLink":"./Lean/Parser/Term.html#Lean.Parser.semicolonOrLinebreak","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L49-L49","name":"Lean.Parser.darrow","docLink":"./Lean/Parser/Term.html#Lean.Parser.darrow","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L44-L45","name":"Lean.Parser.Tactic.seq1","docLink":"./Lean/Parser/Term.html#Lean.Parser.Tactic.seq1","doc":"Raw sequence for quotation and grouping "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L40-L41","name":"Lean.Parser.Tactic.tacticSeq","docLink":"./Lean/Parser/Term.html#Lean.Parser.Tactic.tacticSeq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L38-L39","name":"Lean.Parser.Tactic.tacticSeqBracketed","docLink":"./Lean/Parser/Term.html#Lean.Parser.Tactic.tacticSeqBracketed","doc":"The syntax `{ tacs }` is an alternative syntax for `· tacs`.\nIt runs the tactics in sequence, and fails if the goal is not solved. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L34-L35","name":"Lean.Parser.Tactic.tacticSeq1Indented","docLink":"./Lean/Parser/Term.html#Lean.Parser.Tactic.tacticSeq1Indented","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L29-L30","name":"Lean.Parser.convParser","docLink":"./Lean/Parser/Term.html#Lean.Parser.convParser","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L26-L27","name":"Lean.Parser.tacticParser","docLink":"./Lean/Parser/Term.html#Lean.Parser.tacticParser","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L19-L19","name":"Lean.Parser.Command.docComment","docLink":"./Lean/Parser/Term.html#Lean.Parser.Command.docComment","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L17-L17","name":"Lean.Parser.Command.commentBody.formatter","docLink":"./Lean/Parser/Term.html#Lean.Parser.Command.commentBody.formatter","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L16-L16","name":"Lean.Parser.Command.commentBody.parenthesizer","docLink":"./Lean/Parser/Term.html#Lean.Parser.Command.commentBody.parenthesizer","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Term.lean#L13-L14","name":"Lean.Parser.Command.commentBody","docLink":"./Lean/Parser/Term.html#Lean.Parser.Command.commentBody","doc":""}]}