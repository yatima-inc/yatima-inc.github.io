{"name":"Lean.Data.SMap","instances":[{"typeNames":["Lean.SMap"],"name":"Lean.SMap.instInhabitedSMap","className":"Inhabited"},{"typeNames":["Lean.SMap"],"name":"Lean.instReprSMap","className":"Repr"}],"imports":["Init","Std.Data.HashMap","Std.Data.PersistentHashMap"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L105-L106","name":"Lean.instReprSMap","docLink":"./Lean/Data/SMap.html#Lean.instReprSMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L102-L103","name":"Lean.List.toSMap","docLink":"./Lean/Data/SMap.html#Lean.List.toSMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L97-L98","name":"Lean.SMap.toList","docLink":"./Lean/Data/SMap.html#Lean.SMap.toList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L94-L95","name":"Lean.SMap.numBuckets","docLink":"./Lean/Data/SMap.html#Lean.SMap.numBuckets","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L91-L92","name":"Lean.SMap.stageSizes","docLink":"./Lean/Data/SMap.html#Lean.SMap.stageSizes","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L88-L89","name":"Lean.SMap.size","docLink":"./Lean/Data/SMap.html#Lean.SMap.size","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L85-L86","name":"Lean.SMap.fold","docLink":"./Lean/Data/SMap.html#Lean.SMap.fold","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L82-L83","name":"Lean.SMap.foldStage2","docLink":"./Lean/Data/SMap.html#Lean.SMap.foldStage2","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L79-L80","name":"Lean.SMap.switch","docLink":"./Lean/Data/SMap.html#Lean.SMap.switch","doc":"Move from stage 1 into stage 2. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L74-L76","name":"Lean.SMap.forM","docLink":"./Lean/Data/SMap.html#Lean.SMap.forM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L70-L72","name":"Lean.SMap.find?'","docLink":"./Lean/Data/SMap.html#Lean.SMap.find?'","doc":"Similar to `find?`, but searches for result in the hashmap first.\nSo, the result is correct only if we never \"overwrite\" `map₁` entries using `map₂`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L64-L66","name":"Lean.SMap.contains","docLink":"./Lean/Data/SMap.html#Lean.SMap.contains","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L59-L62","name":"Lean.SMap.find!","docLink":"./Lean/Data/SMap.html#Lean.SMap.find!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L56-L57","name":"Lean.SMap.findD","docLink":"./Lean/Data/SMap.html#Lean.SMap.findD","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L52-L54","name":"Lean.SMap.find?","docLink":"./Lean/Data/SMap.html#Lean.SMap.find?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L48-L50","name":"Lean.SMap.insert'","docLink":"./Lean/Data/SMap.html#Lean.SMap.insert'","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L44-L46","name":"Lean.SMap.insert","docLink":"./Lean/Data/SMap.html#Lean.SMap.insert","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L41-L42","name":"Lean.SMap.fromHashMap","docLink":"./Lean/Data/SMap.html#Lean.SMap.fromHashMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L39-L39","name":"Lean.SMap.empty","docLink":"./Lean/Data/SMap.html#Lean.SMap.empty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L38-L38","name":"Lean.SMap.instInhabitedSMap","docLink":"./Lean/Data/SMap.html#Lean.SMap.instInhabitedSMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Data/SMap.lean#L30-L33","name":"Lean.SMap","docLink":"./Lean/Data/SMap.html#Lean.SMap","doc":"Staged map for implementing the Environment. The idea is to store\n   imported entries into a hashtable and local entries into a persistent hashtable.\n\n   Hypotheses:\n   - The number of entries (i.e., declarations) coming from imported files is much bigger than\n     the number of entries in the current file.\n   - HashMap is faster than PersistentHashMap.\n   - When we are reading imported files, we have exclusive access to the map, and efficient\n     destructive updates are performed.\n\n   Remarks:\n   - We never remove declarations from the Environment. In principle, we could support\n     deletion by using `(PHashMap α (Option β))` where the value `none` would indicate\n     that an entry was \"removed\" from the hashtable.\n   - We do not need additional bookkeeping for extracting the local entries.\n"}]}