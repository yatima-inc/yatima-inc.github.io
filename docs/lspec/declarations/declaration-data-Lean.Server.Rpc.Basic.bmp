{"name":"Lean.Server.Rpc.Basic","instances":[{"typeNames":[],"name":"Lean.Server.instMonadRpcSession","className":"Lean.Server.MonadRpcSession"},{"typeNames":["Lean.Server.RpcEncoding"],"name":"Lean.Server.instNonemptyRpcEncoding","className":"Nonempty"},{"typeNames":[],"name":"Lean.Server.instRpcEncoding","className":"Lean.Server.RpcEncoding"},{"typeNames":["Option","Option"],"name":"Lean.Server.instRpcEncodingOption","className":"Lean.Server.RpcEncoding"},{"typeNames":["Array","Array"],"name":"Lean.Server.instRpcEncodingArray","className":"Lean.Server.RpcEncoding"},{"typeNames":["Prod","Prod"],"name":"Lean.Server.instRpcEncodingProd","className":"Lean.Server.RpcEncoding"},{"typeNames":["Lean.Server.WithRpcRef"],"name":"Lean.Server.instInhabitedWithRpcRef","className":"Inhabited"}],"imports":["Init","Lean.Data.Lsp.Extra"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/Rpc/Basic.lean#L98-L104","name":"Lean.Server.WithRpcRef.decodeUnsafeAs","docLink":"./Lean/Server/Rpc/Basic.html#Lean.Server.WithRpcRef.decodeUnsafeAs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/Rpc/Basic.lean#L94-L96","name":"Lean.Server.WithRpcRef.encodeUnsafe","docLink":"./Lean/Server/Rpc/Basic.html#Lean.Server.WithRpcRef.encodeUnsafe","doc":"This is unsafe because we must ensure that:\n- the stored `NonScalar` is never used to access the value as a type other than `α`\n- the type `α` is not a scalar "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/Rpc/Basic.lean#L85-L85","name":"Lean.Server.instInhabitedWithRpcRef","docLink":"./Lean/Server/Rpc/Basic.html#Lean.Server.instInhabitedWithRpcRef","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/Rpc/Basic.lean#L83-L85","name":"Lean.Server.WithRpcRef","docLink":"./Lean/Server/Rpc/Basic.html#Lean.Server.WithRpcRef","doc":"Marks fields to encode as opaque references in LSP packets. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/Rpc/Basic.lean#L79-L80","name":"Lean.Server.RpcEncoding.DerivingParams","docLink":"./Lean/Server/Rpc/Basic.html#Lean.Server.RpcEncoding.DerivingParams","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/Rpc/Basic.lean#L69-L77","name":"Lean.Server.instRpcEncodingProd","docLink":"./Lean/Server/Rpc/Basic.html#Lean.Server.instRpcEncodingProd","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/Rpc/Basic.lean#L65-L67","name":"Lean.Server.instRpcEncodingArray","docLink":"./Lean/Server/Rpc/Basic.html#Lean.Server.instRpcEncodingArray","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/Rpc/Basic.lean#L56-L62","name":"Lean.Server.instRpcEncodingOption","docLink":"./Lean/Server/Rpc/Basic.html#Lean.Server.instRpcEncodingOption","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/Rpc/Basic.lean#L52-L54","name":"Lean.Server.instRpcEncoding","docLink":"./Lean/Server/Rpc/Basic.html#Lean.Server.instRpcEncoding","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/Rpc/Basic.lean#L49-L50","name":"Lean.Server.instNonemptyRpcEncoding","docLink":"./Lean/Server/Rpc/Basic.html#Lean.Server.instNonemptyRpcEncoding","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/Rpc/Basic.lean#L44-L46","name":"Lean.Server.RpcEncoding","docLink":"./Lean/Server/Rpc/Basic.html#Lean.Server.RpcEncoding","doc":"`RpcEncoding α β` means that `α` may participate in RPC calls with its on-the-wire LSP encoding\nbeing `β`. This is useful when `α` contains fields which must be marshalled in a special way. In\nparticular, we encode `WithRpcRef` fields as opaque references rather than send their content.\n\nStructures with `From/ToJson` use JSON as their `RpcEncoding`. Structures containing\nnon-JSON-serializable fields can be auto-encoded in two ways:\n- `deriving RpcEncoding` acts like `From/ToJson` but marshalls any `WithRpcRef` fields\n  as `Lsp.RpcRef`s.\n- `deriving RpcEncoding with { withRef := true }` generates an encoding for\n  `WithRpcRef TheType`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/Rpc/Basic.lean#L27-L30","name":"Lean.Server.instMonadRpcSession","docLink":"./Lean/Server/Rpc/Basic.html#Lean.Server.instMonadRpcSession","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Server/Rpc/Basic.lean#L21-L24","name":"Lean.Server.MonadRpcSession","docLink":"./Lean/Server/Rpc/Basic.html#Lean.Server.MonadRpcSession","doc":"Monads with an RPC session in their state. "}]}