{"name":"Lean.Structure","instances":[{"typeNames":["Lean.StructureFieldInfo"],"name":"Lean.instInhabitedStructureFieldInfo","className":"Inhabited"},{"typeNames":["Lean.StructureFieldInfo"],"name":"Lean.instReprStructureFieldInfo","className":"Repr"},{"typeNames":["Lean.StructureInfo"],"name":"Lean.instInhabitedStructureInfo","className":"Inhabited"},{"typeNames":["_private.Lean.Structure.0.Lean.StructureState"],"name":"Lean.instInhabitedStructureState","className":"Inhabited"},{"typeNames":["Lean.StructureDescr"],"name":"Lean.instInhabitedStructureDescr","className":"Inhabited"}],"imports":["Init","Lean.Environment","Lean.ProjFns"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L202-L208","name":"Lean.getStructureLikeNumFields","docLink":"./Lean/Structure.html#Lean.getStructureLikeNumFields","doc":"Return number of fields for a structure-like type "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L196-L199","name":"Lean.isStructureLike","docLink":"./Lean/Structure.html#Lean.isStructureLike","doc":"Return true iff `constName` is the a non-recursive inductive datatype that has only one constructor. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L192-L193","name":"Lean.getPathToBaseStructure?","docLink":"./Lean/Structure.html#Lean.getPathToBaseStructure?","doc":"If `baseStructName` is an ancestor structure for `structName`, then return a sequence of projection functions\nto go from `structName` to `baseStructName`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L175-L186","name":"Lean.getPathToBaseStructureAux","docLink":"./Lean/Structure.html#Lean.getPathToBaseStructureAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L166-L173","name":"Lean.getDefaultFnForField?","docLink":"./Lean/Structure.html#Lean.getDefaultFnForField?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L163-L164","name":"Lean.mkDefaultFnOfProjFn","docLink":"./Lean/Structure.html#Lean.mkDefaultFnOfProjFn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L157-L161","name":"Lean.getProjFnInfoForField?","docLink":"./Lean/Structure.html#Lean.getProjFnInfoForField?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L151-L155","name":"Lean.getProjFnForField?","docLink":"./Lean/Structure.html#Lean.getProjFnForField?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L148-L149","name":"Lean.isStructure","docLink":"./Lean/Structure.html#Lean.isStructure","doc":"Return true if `constName` is the name of an inductive datatype\n  created using the `structure` or `class` commands.\n\n  We perform the check by testing whether auxiliary projection functions\n  have been created. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L139-L140","name":"Lean.getStructureFieldsFlattened","docLink":"./Lean/Structure.html#Lean.getStructureFieldsFlattened","doc":"Return field names for the given structure, including \"flattened\" fields from parent\nstructures. To omit `toParent` projections, set `includeSubobjectFields := false`.\n\nFor example, given `Bar` such that\n```lean\nstructure Foo where a : Nat\nstructure Bar extends Foo where b : Nat\n```\nreturn `#[toFoo,a,b]` or `#[a,b]` with subobject fields omitted. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L116-L120","name":"Lean.findField?","docLink":"./Lean/Structure.html#Lean.findField?","doc":"`findField? env S fname`. If `fname` is defined in a parent `S'` of `S`, return `S'` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L110-L113","name":"Lean.getAllParentStructures.visit","docLink":"./Lean/Structure.html#Lean.getAllParentStructures.visit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L107-L113","name":"Lean.getAllParentStructures","docLink":"./Lean/Structure.html#Lean.getAllParentStructures","doc":"Return all parent structures "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L99-L104","name":"Lean.getParentStructures","docLink":"./Lean/Structure.html#Lean.getParentStructures","doc":"Return immediate parent structures "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L92-L96","name":"Lean.isSubobjectField?","docLink":"./Lean/Structure.html#Lean.isSubobjectField?","doc":"If `fieldName` represents the relation to a parent structure `S`, return `S` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L85-L89","name":"Lean.getFieldInfo?","docLink":"./Lean/Structure.html#Lean.getFieldInfo?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L79-L83","name":"Lean.getStructureFields","docLink":"./Lean/Structure.html#Lean.getStructureFields","doc":"Get direct field names for the given structure. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L70-L76","name":"Lean.getStructureCtor","docLink":"./Lean/Structure.html#Lean.getStructureCtor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L65-L68","name":"Lean.getStructureInfo?","docLink":"./Lean/Structure.html#Lean.getStructureInfo?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L58-L63","name":"Lean.registerStructure","docLink":"./Lean/Structure.html#Lean.registerStructure","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L56-L56","name":"Lean.instInhabitedStructureDescr","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureDescr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L53-L56","name":"Lean.StructureDescr","docLink":"./Lean/Structure.html#Lean.StructureDescr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L46-L46","name":"Lean.structureExt","docLink":"./Lean/Structure.html#Lean.structureExt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L44-L44","name":"Lean.instInhabitedStructureState","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L34-L39","name":"Lean.StructureInfo.getProjFn?","docLink":"./Lean/Structure.html#Lean.StructureInfo.getProjFn?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L31-L32","name":"Lean.StructureInfo.lt","docLink":"./Lean/Structure.html#Lean.StructureInfo.lt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L29-L29","name":"Lean.instInhabitedStructureInfo","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L25-L29","name":"Lean.StructureInfo","docLink":"./Lean/Structure.html#Lean.StructureInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L22-L23","name":"Lean.StructureFieldInfo.lt","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo.lt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L20-L20","name":"Lean.instReprStructureFieldInfo","docLink":"./Lean/Structure.html#Lean.instReprStructureFieldInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L20-L20","name":"Lean.instInhabitedStructureFieldInfo","docLink":"./Lean/Structure.html#Lean.instInhabitedStructureFieldInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Structure.lean#L13-L20","name":"Lean.StructureFieldInfo","docLink":"./Lean/Structure.html#Lean.StructureFieldInfo","doc":""}]}