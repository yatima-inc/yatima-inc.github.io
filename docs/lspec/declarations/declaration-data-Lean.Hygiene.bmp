{"name":"Lean.Hygiene","instances":[{"typeNames":["Lean.Unhygienic"],"name":"Lean.Unhygienic.instMonadQuotationUnhygienic","className":"Lean.MonadQuotation"}],"imports":["Init","Lean.Data.Name","Lean.Data.Options","Lean.Data.Format"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Hygiene.lean#L107-L111","name":"Lean.sanitizeSyntax","docLink":"./Lean/Hygiene.html#Lean.sanitizeSyntax","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Hygiene.lean#L91-L96","name":"Lean.sanitizeName","docLink":"./Lean/Hygiene.html#Lean.sanitizeName","doc":"Erase macro scopes from `userName` and add \"tombstone\" + superscript (or `._hyg`). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Hygiene.lean#L74-L79","name":"Lean.NameSanitizerState","docLink":"./Lean/Hygiene.html#Lean.NameSanitizerState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Hygiene.lean#L72-L72","name":"Lean.getSanitizeNames","docLink":"./Lean/Hygiene.html#Lean.getSanitizeNames","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Hygiene.lean#L66-L66","name":"Lean.pp.sanitizeNames","docLink":"./Lean/Hygiene.html#Lean.pp.sanitizeNames","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Hygiene.lean#L42-L42","name":"Lean.Unhygienic.run","docLink":"./Lean/Hygiene.html#Lean.Unhygienic.run","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Hygiene.lean#L33-L40","name":"Lean.Unhygienic.instMonadQuotationUnhygienic","docLink":"./Lean/Hygiene.html#Lean.Unhygienic.instMonadQuotationUnhygienic","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Hygiene.lean#L31-L31","name":"Lean.Unhygienic","docLink":"./Lean/Hygiene.html#Lean.Unhygienic","doc":"Simplistic MonadQuotation that does not guarantee globally fresh names, that\nis, between different runs of this or other MonadQuotation implementations.\nIt is only safe if the syntax quotations do not introduce bindings around\nantiquotations, and if references to globals are prefixed with `_root_.`\n(which is not allowed to refer to a local variable)\n`Unhygienic` can also be seen as a model implementation of `MonadQuotation`\n(since it is completely hygienic as long as it is \"run\" only once and can\nassume that there are no other implentations in use, as is the case for the\nelaboration monads that carry their macro scope state through the entire\nprocessing of a file). It uses the state monad to query and allocate the\nnext macro scope, and uses the reader monad to store the stack of scopes\ncorresponding to `withFreshMacroScope` calls.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Hygiene.lean#L13-L15","name":"Lean.Unhygienic.Context","docLink":"./Lean/Hygiene.html#Lean.Unhygienic.Context","doc":""}]}