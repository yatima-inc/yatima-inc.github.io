{"name":"Lean.Compiler.Util","instances":[],"imports":["Init","Lean.Compiler.CompilerM","Lean.Meta.Match.MatcherInfo"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Compiler/Util.lean#L132-L133","name":"Lean.Compiler.isRuntimeBultinType","docLink":"./Lean/Compiler/Util.html#Lean.Compiler.isRuntimeBultinType","doc":"Return `true` iff `declName` is the name of a type with builtin support in the runtime.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Compiler/Util.lean#L120-L127","name":"Lean.Compiler.builtinRuntimeTypes","docLink":"./Lean/Compiler/Util.html#Lean.Compiler.builtinRuntimeTypes","doc":"List of types that have builtin runtime support\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Compiler/Util.lean#L113-L115","name":"Lean.Compiler.getCtorArity?","docLink":"./Lean/Compiler/Util.html#Lean.Compiler.getCtorArity?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Compiler/Util.lean#L108-L111","name":"Lean.Compiler.updateMotive","docLink":"./Lean/Compiler/Util.html#Lean.Compiler.updateMotive","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Compiler/Util.lean#L100-L106","name":"Lean.Compiler.isCasesApp?","docLink":"./Lean/Compiler/Util.html#Lean.Compiler.isCasesApp?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Compiler/Util.lean#L88-L98","name":"Lean.Compiler.getCasesInfo?","docLink":"./Lean/Compiler/Util.html#Lean.Compiler.getCasesInfo?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Compiler/Util.lean#L64-L69","name":"Lean.Compiler.CasesInfo","docLink":"./Lean/Compiler/Util.html#Lean.Compiler.CasesInfo","doc":"Store information about `matcher` and `casesOn` declarations.\n\nWe treat them uniformly in the code generator.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Compiler/Util.lean#L52-L57","name":"Lean.Compiler.mkLcCast","docLink":"./Lean/Compiler/Util.html#Lean.Compiler.mkLcCast","doc":"Create `lcCast expectedType e : expectedType` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Compiler/Util.lean#L46-L49","name":"Lean.Compiler.mkLcUnreachable","docLink":"./Lean/Compiler/Util.html#Lean.Compiler.mkLcUnreachable","doc":"Create `lcUnreachable type` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Compiler/Util.lean#L42-L43","name":"Lean.Compiler.mkLcProof","docLink":"./Lean/Compiler/Util.html#Lean.Compiler.mkLcProof","doc":"Create `lcProof p` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Compiler/Util.lean#L35-L39","name":"Lean.Compiler.isLcCast?","docLink":"./Lean/Compiler/Util.html#Lean.Compiler.isLcCast?","doc":"Return `true` if `e` is a `lcCast` application.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Compiler/Util.lean#L29-L30","name":"Lean.Compiler.isLcUnreachable","docLink":"./Lean/Compiler/Util.html#Lean.Compiler.isLcUnreachable","doc":"Return `true` if `e` is a `lcUnreachable` application.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Compiler/Util.lean#L23-L24","name":"Lean.Compiler.isLCProof","docLink":"./Lean/Compiler/Util.html#Lean.Compiler.isLCProof","doc":"Return `true` if `e` is a `lcProof` application.\nRecall that we use `lcProof` to erase all nested proofs.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Compiler/Util.lean#L16-L17","name":"Lean.Compiler.isCompilerRelevantMData","docLink":"./Lean/Compiler/Util.html#Lean.Compiler.isCompilerRelevantMData","doc":"Return `true` if `mdata` should be preserved.\nRight now, we don't preserve any `MData`, but this may\nchange in the future when we add support for debugging information\n"}]}