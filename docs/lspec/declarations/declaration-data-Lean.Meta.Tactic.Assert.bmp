{"name":"Lean.Meta.Tactic.Assert","instances":[],"imports":["Init","Lean.Meta.Tactic.Util","Lean.Meta.Tactic.FVarSubst","Lean.Meta.Tactic.Intro","Lean.Meta.Tactic.Revert"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Assert.lean#L126-L127","name":"Lean.Meta.assertHypotheses","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.assertHypotheses","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Assert.lean#L111-L123","name":"Lean.MVarId.assertHypotheses","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.MVarId.assertHypotheses","doc":"Convert the given goal `Ctx |- target` into `Ctx, (hs[0].userName : hs[0].type) ... |-target`.\nIt assumes `hs[i].val` has type `hs[i].type`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Assert.lean#L103-L106","name":"Lean.Meta.Hypothesis","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.Hypothesis","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Assert.lean#L100-L101","name":"Lean.Meta.assertAfter","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.assertAfter","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Assert.lean#L76-L97","name":"Lean.MVarId.assertAfter","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.MVarId.assertAfter","doc":"Convert the given goal `Ctx |- target` into a goal containing `(userName : type)` after the local declaration with if `fvarId`.\nIt assumes `val` has type `type`, and that `type` is well-formed after `fvarId`.\nNote that `val` does not need to be well-formed after `fvarId`. That is, it may contain variables that are defined after `fvarId`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Assert.lean#L67-L70","name":"Lean.Meta.AssertAfterResult","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.AssertAfterResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Assert.lean#L64-L65","name":"Lean.Meta.assertExt","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.assertExt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Assert.lean#L50-L61","name":"Lean.MVarId.assertExt","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.MVarId.assertExt","doc":"Convert the given goal `Ctx |- target` into `Ctx |- (hName : type) -> hName = val -> target`.\nIt assumes `val` has type `type` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Assert.lean#L44-L45","name":"Lean.Meta.define","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.define","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Assert.lean#L33-L41","name":"Lean.MVarId.define","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.MVarId.define","doc":"Convert the given goal `Ctx |- target` into `Ctx |- let name : type := val; target`.\nIt assumes `val` has type `type` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Assert.lean#L27-L28","name":"Lean.Meta.assert","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.Meta.assert","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Assert.lean#L16-L24","name":"Lean.MVarId.assert","docLink":"./Lean/Meta/Tactic/Assert.html#Lean.MVarId.assert","doc":"Convert the given goal `Ctx |- target` into `Ctx |- type -> target`.\nIt assumes `val` has type `type` "}]}