{"name":"Lean.Meta.SynthInstance","instances":[{"typeNames":["Lean.Meta.SynthInstance.GeneratorNode"],"name":"Lean.Meta.SynthInstance.instInhabitedGeneratorNode","className":"Inhabited"},{"typeNames":["Lean.Meta.SynthInstance.ConsumerNode"],"name":"Lean.Meta.SynthInstance.instInhabitedConsumerNode","className":"Inhabited"},{"typeNames":["Lean.Meta.SynthInstance.MkTableKey.M"],"name":"Lean.Meta.SynthInstance.MkTableKey.instMonadMCtxM","className":"Lean.MonadMCtx"},{"typeNames":["Lean.Meta.SynthInstance.Answer"],"name":"Lean.Meta.SynthInstance.instInhabitedAnswer","className":"Inhabited"},{"typeNames":["Lean.Meta.SynthInstance.SynthM"],"name":"Lean.Meta.SynthInstance.instInhabitedSynthM","className":"Inhabited"}],"imports":["Init","Lean.Meta.Basic","Lean.Meta.Instances","Lean.Meta.AbstractMVars","Lean.Meta.WHNF","Lean.Meta.Check","Lean.Util.Profile"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L742-L749","name":"Lean.Meta.synthInstance","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L737-L740","name":"Lean.Meta.trySynthInstance","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.trySynthInstance","doc":"Return `LOption.some r` if succeeded, `LOption.none` if it failed, and `LOption.undef` if\ninstance cannot be synthesized right now because `type` contains metavariables. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L664-L732","name":"Lean.Meta.synthInstance?","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L582-L596","name":"Lean.Meta.SynthInstance.main","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.main","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L573-L580","name":"Lean.Meta.SynthInstance.synth","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.synth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L570-L571","name":"Lean.Meta.SynthInstance.getResult","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L558-L568","name":"Lean.Meta.SynthInstance.step","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.step","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L544-L556","name":"Lean.Meta.SynthInstance.resume","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.resume","doc":"Given `(cNode, answer)` on the top of the resume stack, continue execution by using `answer` to solve the\nnext subgoal. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L536-L539","name":"Lean.Meta.SynthInstance.getNextToResume","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getNextToResume","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L520-L534","name":"Lean.Meta.SynthInstance.generate","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.generate","doc":"Try the next instance in the node on the top of the generator stack. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L516-L517","name":"Lean.Meta.SynthInstance.modifyTop","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.modifyTop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L513-L514","name":"Lean.Meta.SynthInstance.getTop","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getTop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L479-L511","name":"Lean.Meta.SynthInstance.consume","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.consume","doc":"Process the next subgoal in the given consumer node. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L412-L424","name":"Lean.Meta.SynthInstance.addAnswer","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.addAnswer","doc":"Create a new answer after `cNode` resolved all subgoals.\nThat is, `cNode.subgoals == []`.\nAnd then, store it in the tabled entries map, and wakeup waiters. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L393-L397","name":"Lean.Meta.SynthInstance.isNewAnswer","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.isNewAnswer","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L379-L391","name":"Lean.Meta.SynthInstance.wakeUp","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.wakeUp","doc":"Move waiters that are waiting for the given answer to the resume stack. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L370-L376","name":"Lean.Meta.SynthInstance.tryAnswer","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.tryAnswer","doc":"Assign a precomputed answer to `mvar`.\nIf it succeeds, the result is a new updated metavariable context and a new list of subgoals. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L364-L365","name":"Lean.Meta.SynthInstance.tryResolve","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.tryResolve","doc":"Try to synthesize metavariable `mvar` using the instance `inst`.\nRemark: `mctx` contains `mvar`.\nIf it succeeds, the result is a new updated metavariable context and a new list of subgoals.\nA subgoal is created for each instance implicit parameter of `inst`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L319-L357","name":"Lean.Meta.SynthInstance.tryResolveCore","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.tryResolveCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L307-L317","name":"Lean.Meta.SynthInstance.getSubgoals","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getSubgoals","doc":"`getSubgoals lctx localInsts xs inst` creates the subgoals for the instance `inst`.\n  The subgoals are in the context of the free variables `xs`, and\n  `(lctx, localInsts)` is the local context and instances before we added the free variables to it.\n\n  This extra complication is required because\n    1- We want all metavariables created by `synthInstance` to share the same local context.\n    2- We want to ensure that applications such as `mvar xs` are higher order patterns.\n\n  The method `getGoals` create a new metavariable for each parameter of `inst`.\n  For example, suppose the type of `inst` is `forall (x_1 : A_1) ... (x_n : A_n), B x_1 ... x_n`.\n  Then, we create the metavariables `?m_i : forall xs, A_i`, and return the subset of these\n  metavariables that are instance implicit arguments, and the expressions:\n    - `inst (?m_1 xs) ... (?m_n xs)` (aka `instVal`)\n    - `B (?m_1 xs) ... (?m_n xs)` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L268-L271","name":"Lean.Meta.SynthInstance.SubgoalsResult","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SubgoalsResult","doc":"See `getSubgoals` and `getSubgoalsAux`\n\n   We use the parameter `j` to reduce the number of `instantiate*` invocations.\n   It is the same approach we use at `forallTelescope` and `lambdaTelescope`.\n   Given `getSubgoalsAux args j subgoals instVal type`,\n   we have that `type.instantiateRevRange j args.size args` does not have loose bound variables. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L256-L260","name":"Lean.Meta.SynthInstance.mkTableKeyFor","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.mkTableKeyFor","doc":"Create a `key` for the goal associated with the given metavariable.\n  That is, we create a key for the type of the metavariable.\n\n  We must instantiate assigned metavariables before we invoke `mkTableKey`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L246-L249","name":"Lean.Meta.SynthInstance.getEntry","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getEntry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L243-L244","name":"Lean.Meta.SynthInstance.findEntry?","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.findEntry?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L231-L241","name":"Lean.Meta.SynthInstance.newSubgoal","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.newSubgoal","doc":"Create a new generator node for `mvar` and add `waiter` as its waiter.\n`key` must be `mkTableKey mctx mvarType`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L215-L226","name":"Lean.Meta.SynthInstance.mkGeneratorNode?","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.mkGeneratorNode?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L189-L213","name":"Lean.Meta.SynthInstance.getInstances","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getInstances","doc":"Return globals and locals instances that may unify with `type` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L185-L186","name":"Lean.Meta.SynthInstance.instInhabitedSynthM","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedSynthM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L182-L183","name":"Lean.Meta.SynthInstance.mapMetaM","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.mapMetaM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L179-L180","name":"Lean.Meta.SynthInstance.checkMaxHeartbeats","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.checkMaxHeartbeats","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L177-L177","name":"Lean.Meta.SynthInstance.SynthM","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.SynthM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L171-L175","name":"Lean.Meta.SynthInstance.State","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.State","doc":"Remark: the SynthInstance.State is not really an extension of `Meta.State`.\nThe field `postponed` is not needed, and the field `mctx` is misleading since\n`synthInstance` methods operate over different `MetavarContext`s simultaneously.\nThat being said, we still use `extends` because it makes it simpler to move from\n`M` to `MetaM`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L160-L162","name":"Lean.Meta.SynthInstance.Context","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L156-L158","name":"Lean.Meta.SynthInstance.TableEntry","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.TableEntry","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L154-L154","name":"Lean.Meta.SynthInstance.instInhabitedAnswer","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedAnswer","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L150-L154","name":"Lean.Meta.SynthInstance.Answer","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Answer","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L145-L148","name":"Lean.Meta.SynthInstance.mkTableKey","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.mkTableKey","doc":"Remark: `mkTableKey` assumes `e` does not contain assigned metavariables. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L117-L140","name":"Lean.Meta.SynthInstance.MkTableKey.normExpr","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.normExpr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L97-L115","name":"Lean.Meta.SynthInstance.MkTableKey.normLevel","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.normLevel","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L93-L95","name":"Lean.Meta.SynthInstance.MkTableKey.instMonadMCtxM","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.instMonadMCtxM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L91-L91","name":"Lean.Meta.SynthInstance.MkTableKey.M","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L85-L89","name":"Lean.Meta.SynthInstance.MkTableKey.State","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.MkTableKey.State","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L59-L61","name":"Lean.Meta.SynthInstance.Waiter.isRoot","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter.isRoot","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L55-L57","name":"Lean.Meta.SynthInstance.Waiter","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.Waiter","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L53-L53","name":"Lean.Meta.SynthInstance.instInhabitedConsumerNode","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedConsumerNode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L47-L53","name":"Lean.Meta.SynthInstance.ConsumerNode","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.ConsumerNode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L45-L45","name":"Lean.Meta.SynthInstance.instInhabitedGeneratorNode","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.instInhabitedGeneratorNode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L39-L45","name":"Lean.Meta.SynthInstance.GeneratorNode","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.GeneratorNode","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L36-L37","name":"Lean.Meta.SynthInstance.hasInferTCGoalsRLAttribute","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.hasInferTCGoalsRLAttribute","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L33-L33","name":"Lean.Meta.SynthInstance.inferTCGoalsRLAttr","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.inferTCGoalsRLAttr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L28-L29","name":"Lean.Meta.SynthInstance.getMaxHeartbeats","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.SynthInstance.getMaxHeartbeats","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L22-L22","name":"Lean.Meta.synthInstance.maxSize","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance.maxSize","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/SynthInstance.lean#L17-L17","name":"Lean.Meta.synthInstance.maxHeartbeats","docLink":"./Lean/Meta/SynthInstance.html#Lean.Meta.synthInstance.maxHeartbeats","doc":""}]}