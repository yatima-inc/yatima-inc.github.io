{"name":"Lean.Meta.Eqns","instances":[{"typeNames":["Lean.Meta.EqnsExtState"],"name":"Lean.Meta.instInhabitedEqnsExtState","className":"Inhabited"}],"imports":["Init","Lean.Meta.Basic","Lean.Meta.AppBuilder"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Eqns.lean#L137-L145","name":"Lean.Meta.getUnfoldEqnFor?","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.getUnfoldEqnFor?","doc":"Return a \"unfold\" theorem for the given declaration.\nBy default, we not create unfold theorems for nonrecursive definitions.\nYou can use `nonRec := true` to override this behavior.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Eqns.lean#L127-L130","name":"Lean.Meta.registerGetUnfoldEqnFn","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.registerGetUnfoldEqnFn","doc":"Register a new function for retrieving a \"unfold\" equation theorem.\n\n  We generate this kind of equation theorem on demand, and it is generated by more than one module.\n  For example, the structural and well-founded recursion modules generate it.\n  Most recent getters are tried first.\n\n  A getter returns an `Option Name`. The result is `none` if the getter failed.\n  Otherwise, it is a theorem name. Example: the definition\n\n  ```\n  def f (xs : List Nat) : List Nat :=\n    match xs with\n    | [] => []\n    | x::xs => (x+1)::f xs\n  ```\n  should have the theorem\n  ```\n  (xs : Nat) →\n    f xs =\n      match xs with\n      | [] => []\n      | x::xs => (x+1)::f xs\n  ```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Eqns.lean#L98-L98","name":"Lean.Meta.GetUnfoldEqnFn","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.GetUnfoldEqnFn","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Eqns.lean#L83-L96","name":"Lean.Meta.getEqnsFor?","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.getEqnsFor?","doc":"Return equation theorems for the given declaration.\nBy default, we not create equation theorems for nonrecursive definitions.\nYou can use `nonRec := true` to override this behavior, a dummy `rfl` proof is created on the fly.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Eqns.lean#L57-L57","name":"Lean.Meta.eqnsExt","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.eqnsExt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Eqns.lean#L54-L54","name":"Lean.Meta.instInhabitedEqnsExtState","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.instInhabitedEqnsExtState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Eqns.lean#L52-L54","name":"Lean.Meta.EqnsExtState","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.EqnsExtState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Eqns.lean#L40-L43","name":"Lean.Meta.registerGetEqnsFn","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.registerGetEqnsFn","doc":"Register a new function for retrieving equation theorems.\n  We generate equations theorems on demand, and they are generated by more than one module.\n  For example, the structural and well-founded recursion modules generate them.\n  Most recent getters are tried first.\n\n  A getter returns an `Option (Array Name)`. The result is `none` if the getter failed.\n  Otherwise, it is a sequence of theorem names where each one of them corresponds to\n  an alternative. Example: the definition\n\n  ```\n  def f (xs : List Nat) : List Nat :=\n    match xs with\n    | [] => []\n    | x::xs => (x+1)::f xs\n  ```\n  should have two equational theorems associated with it\n  ```\n  f [] = []\n  ```\n  and\n  ```\n  (x : Nat) → (xs : List Nat) → f (x :: xs) = (x+1) :: f xs\n  ```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Eqns.lean#L11-L11","name":"Lean.Meta.GetEqnsFn","docLink":"./Lean/Meta/Eqns.html#Lean.Meta.GetEqnsFn","doc":""}]}