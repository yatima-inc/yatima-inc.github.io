{"name":"Lean.Elab.PreDefinition.Structural.SmartUnfolding","instances":[],"imports":["Init","Lean.Elab.PreDefinition.Basic","Lean.Elab.PreDefinition.Structural.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/PreDefinition/Structural/SmartUnfolding.lean#L64-L69","name":"Lean.Elab.Structural.addSmartUnfoldingDef","docLink":"./Lean/Elab/PreDefinition/Structural/SmartUnfolding.html#Lean.Elab.Structural.addSmartUnfoldingDef","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/PreDefinition/Structural/SmartUnfolding.lean#L29-L62","name":"Lean.Elab.Structural.addSmartUnfoldingDefAux.visit","docLink":"./Lean/Elab/PreDefinition/Structural/SmartUnfolding.html#Lean.Elab.Structural.addSmartUnfoldingDefAux.visit","doc":"Auxiliary method for annotating `match`-alternatives with `markSmartUnfoldingMatch` and `markSmartUnfoldingMatchAlt`.\n\n     It uses the following approach:\n     - Whenever it finds a `match` application `e` s.t. `recArgHasLooseBVarsAt preDef.declName recArgPos e`,\n       it marks the `match` with `markSmartUnfoldingMatch`, and each alternative that does not contain a nested marked `match`\n       is marked with `markSmartUnfoldingMatchAlt`.\n\n     Recall that the condition `recArgHasLooseBVarsAt preDef.declName recArgPos e` is the one used at `mkBRecOn`.\n  "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/PreDefinition/Structural/SmartUnfolding.lean#L12-L62","name":"Lean.Elab.Structural.addSmartUnfoldingDefAux","docLink":"./Lean/Elab/PreDefinition/Structural/SmartUnfolding.html#Lean.Elab.Structural.addSmartUnfoldingDefAux","doc":""}]}