{"name":"Lean.Compiler.Main","instances":[],"imports":["Init","Lean.Compiler.Decl","Lean.Compiler.TerminalCases"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Compiler/Main.lean#L37-L42","name":"Lean.Compiler.compile","docLink":"./Lean/Compiler/Main.html#Lean.Compiler.compile","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Compiler/Main.lean#L31-L35","name":"Lean.Compiler.checkpoint","docLink":"./Lean/Compiler/Main.html#Lean.Compiler.checkpoint","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Compiler/Main.lean#L27-L29","name":"Lean.Compiler.shouldGenerateCode.isCompIrrelevant","docLink":"./Lean/Compiler/Main.html#Lean.Compiler.shouldGenerateCode.isCompIrrelevant","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Compiler/Main.lean#L21-L29","name":"Lean.Compiler.shouldGenerateCode","docLink":"./Lean/Compiler/Main.html#Lean.Compiler.shouldGenerateCode","doc":"We do not generate code for `declName` if\n- Its type is a proposition.\n- Its type is a type former.\n- It is tagged as `[macroInline]`.\n- It is a type class instance.\n\nRemark: we still generate code for declarations tagged as `[inline]`\nand `[specialize]` since they can be partially applied.\n"}]}