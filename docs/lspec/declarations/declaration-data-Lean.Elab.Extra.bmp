{"name":"Lean.Elab.Extra","instances":[],"imports":["Init","Lean.Elab.App"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Extra.lean#L385-L400","name":"Lean.Elab.Term.BinOp.elabDefaultOrNonempty","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.BinOp.elabDefaultOrNonempty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Extra.lean#L382-L382","name":"Lean.Elab.Term.BinOp.elabBinRelNoProp","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.BinOp.elabBinRelNoProp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Extra.lean#L380-L380","name":"Lean.Elab.Term.BinOp.elabBinRel","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.BinOp.elabBinRel","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Extra.lean#L373-L378","name":"Lean.Elab.Term.BinOp.elabBinRelCore.toBoolIfNecessary","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.BinOp.elabBinRelCore.toBoolIfNecessary","doc":"If `noProp == true` and `e` has type `Prop`, then coerce it to `Bool`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Extra.lean#L344-L378","name":"Lean.Elab.Term.BinOp.elabBinRelCore","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.BinOp.elabBinRelCore","doc":"Elaboration functionf for `binrel%` and `binrel_no_prop%` notations.\n  We use the infrastructure for `binop%` to make sure we propagate information between the left and right hand sides\n  of a binary relation.\n\n  Recall that the `binrel_no_prop%` notation is used for relations such as `==` which do not support `Prop`, but\n  we still want to be able to write `(5 > 2) == (2 > 1)`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Extra.lean#L334-L334","name":"Lean.Elab.Term.BinOp.elabBinOpLazy","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.BinOp.elabBinOpLazy","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Extra.lean#L330-L331","name":"Lean.Elab.Term.BinOp.elabBinOp","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.BinOp.elabBinOp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Extra.lean#L50-L76","name":"Lean.Elab.Term.elabForIn'","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.elabForIn'","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Elab/Extra.lean#L24-L48","name":"Lean.Elab.Term.elabForIn","docLink":"./Lean/Elab/Extra.html#Lean.Elab.Term.elabForIn","doc":""}]}