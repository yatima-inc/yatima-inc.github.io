{"name":"Init.Prelude","instances":[{"typeNames":[],"name":"instNonempty","className":"Nonempty"},{"typeNames":[],"name":"instNonemptyForAll","className":"Nonempty"},{"typeNames":[],"name":"instNonemptyForAll_1","className":"Nonempty"},{"typeNames":[],"name":"instInhabitedSort","className":"Inhabited"},{"typeNames":[],"name":"instInhabitedForAll","className":"Inhabited"},{"typeNames":[],"name":"instInhabitedForAll_1","className":"Inhabited"},{"typeNames":["Bool"],"name":"instInhabitedBool","className":"Inhabited"},{"typeNames":["NonemptyType"],"name":"instInhabitedNonemptyType","className":"Inhabited"},{"typeNames":["Eq","Bool"],"name":"instDecidableEqBool","className":"Decidable"},{"typeNames":[],"name":"instBEq","className":"BEq"},{"typeNames":["And"],"name":"instDecidableAnd","className":"Decidable"},{"typeNames":["Or"],"name":"instDecidableOr","className":"Decidable"},{"typeNames":["Not"],"name":"instDecidableNot","className":"Decidable"},{"typeNames":["Nat"],"name":"instInhabitedNat","className":"Inhabited"},{"typeNames":["Nat"],"name":"instOfNatNat","className":"OfNat"},{"typeNames":["Eq"],"name":"instTransEq","className":"Trans"},{"typeNames":["Eq"],"name":"instTransEq_1","className":"Trans"},{"typeNames":[],"name":"instHAdd","className":"HAdd"},{"typeNames":[],"name":"instHSub","className":"HSub"},{"typeNames":[],"name":"instHMul","className":"HMul"},{"typeNames":[],"name":"instHDiv","className":"HDiv"},{"typeNames":[],"name":"instHMod","className":"HMod"},{"typeNames":[],"name":"instHPow","className":"HPow"},{"typeNames":[],"name":"instHAppend","className":"HAppend"},{"typeNames":[],"name":"instHOrElse","className":"HOrElse"},{"typeNames":[],"name":"instHAndThen","className":"HAndThen"},{"typeNames":[],"name":"instHAnd","className":"HAnd"},{"typeNames":[],"name":"instHXor","className":"HXor"},{"typeNames":[],"name":"instHOr","className":"HOr"},{"typeNames":[],"name":"instHShiftLeft","className":"HShiftLeft"},{"typeNames":[],"name":"instHShiftRight","className":"HShiftRight"},{"typeNames":["Nat"],"name":"instAddNat","className":"Add"},{"typeNames":["Nat"],"name":"instMulNat","className":"Mul"},{"typeNames":["Nat","Nat"],"name":"instPowNat","className":"Pow"},{"typeNames":["Nat"],"name":"instBEqNat","className":"BEq"},{"typeNames":["Eq","Nat"],"name":"instDecidableEqNat","className":"Decidable"},{"typeNames":["Nat"],"name":"instLENat","className":"LE"},{"typeNames":["Nat"],"name":"instLTNat","className":"LT"},{"typeNames":["LE.le","Nat","instLENat"],"name":"Nat.decLe","className":"Decidable"},{"typeNames":["LT.lt","Nat","instLTNat"],"name":"Nat.decLt","className":"Decidable"},{"typeNames":["Nat"],"name":"instSubNat","className":"Sub"},{"typeNames":["Eq","Fin"],"name":"instDecidableEqFin","className":"Decidable"},{"typeNames":["Fin"],"name":"instLTFin","className":"LT"},{"typeNames":["Fin"],"name":"instLEFin","className":"LE"},{"typeNames":["LT.lt","Fin","instLTFin"],"name":"Fin.decLt","className":"Decidable"},{"typeNames":["LE.le","Fin","instLEFin"],"name":"Fin.decLe","className":"Decidable"},{"typeNames":["Eq","UInt8"],"name":"instDecidableEqUInt8","className":"Decidable"},{"typeNames":["UInt8"],"name":"instInhabitedUInt8","className":"Inhabited"},{"typeNames":["Eq","UInt16"],"name":"instDecidableEqUInt16","className":"Decidable"},{"typeNames":["UInt16"],"name":"instInhabitedUInt16","className":"Inhabited"},{"typeNames":["Eq","UInt32"],"name":"instDecidableEqUInt32","className":"Decidable"},{"typeNames":["UInt32"],"name":"instInhabitedUInt32","className":"Inhabited"},{"typeNames":["UInt32"],"name":"instLTUInt32","className":"LT"},{"typeNames":["UInt32"],"name":"instLEUInt32","className":"LE"},{"typeNames":["LT.lt","UInt32","instLTUInt32"],"name":"instDecidableLtUInt32InstLTUInt32","className":"Decidable"},{"typeNames":["LE.le","UInt32","instLEUInt32"],"name":"instDecidableLeUInt32InstLEUInt32","className":"Decidable"},{"typeNames":["Eq","UInt64"],"name":"instDecidableEqUInt64","className":"Decidable"},{"typeNames":["UInt64"],"name":"instInhabitedUInt64","className":"Inhabited"},{"typeNames":["Eq","USize"],"name":"instDecidableEqUSize","className":"Decidable"},{"typeNames":["USize"],"name":"instInhabitedUSize","className":"Inhabited"},{"typeNames":["Eq","Char"],"name":"instDecidableEqChar","className":"Decidable"},{"typeNames":["Option"],"name":"instInhabitedOption","className":"Inhabited"},{"typeNames":["List"],"name":"instInhabitedList","className":"Inhabited"},{"typeNames":["Eq","List"],"name":"instDecidableEqList","className":"Decidable"},{"typeNames":["Eq","String"],"name":"instDecidableEqString","className":"Decidable"},{"typeNames":["String.Pos"],"name":"instInhabitedPos","className":"Inhabited"},{"typeNames":["Eq","String.Pos"],"name":"instDecidableEqPos","className":"Decidable"},{"typeNames":["Substring"],"name":"instInhabitedSubstring","className":"Inhabited"},{"typeNames":["String.Pos","String.Pos","String.Pos"],"name":"instHAddPos","className":"HAdd"},{"typeNames":["String.Pos","String.Pos","String.Pos"],"name":"instHSubPos","className":"HSub"},{"typeNames":["String.Pos","Char","String.Pos"],"name":"instHAddPosChar","className":"HAdd"},{"typeNames":["String.Pos","String","String.Pos"],"name":"instHAddPosString","className":"HAdd"},{"typeNames":["String.Pos"],"name":"instLEPos","className":"LE"},{"typeNames":["String.Pos"],"name":"instLTPos","className":"LT"},{"typeNames":["LE.le","String.Pos","instLEPos"],"name":"instDecidableLePosInstLEPos","className":"Decidable"},{"typeNames":["LT.lt","String.Pos","instLTPos"],"name":"instDecidableLtPosInstLTPos","className":"Decidable"},{"typeNames":["Array","Nat","Array","Nat","LT.lt","instLTNat","Array.size"],"name":"instGetElemArrayNatLtInstLTNatSize","className":"GetElem"},{"typeNames":[],"name":"instInhabitedForAll_2","className":"Inhabited"},{"typeNames":[],"name":"instInhabited","className":"Inhabited"},{"typeNames":[],"name":"instMonadLiftT","className":"MonadLiftT"},{"typeNames":[],"name":"instMonadLiftT_1","className":"MonadLiftT"},{"typeNames":[],"name":"instMonadFunctorT","className":"MonadFunctorT"},{"typeNames":[],"name":"monadFunctorRefl","className":"MonadFunctorT"},{"typeNames":["Except"],"name":"instInhabitedExcept","className":"Inhabited"},{"typeNames":[],"name":"instMonadExcept","className":"MonadExcept"},{"typeNames":[],"name":"MonadExcept.instOrElse","className":"OrElse"},{"typeNames":["ReaderT"],"name":"instInhabitedReaderT","className":"Inhabited"},{"typeNames":["ReaderT"],"name":"ReaderT.instMonadLiftReaderT","className":"MonadLift"},{"typeNames":["ReaderT"],"name":"ReaderT.instMonadExceptOfReaderT","className":"MonadExceptOf"},{"typeNames":["ReaderT"],"name":"ReaderT.instMonadReaderT","className":"Monad"},{"typeNames":["ReaderT"],"name":"ReaderT.instMonadFunctorReaderT","className":"MonadFunctor"},{"typeNames":[],"name":"instMonadReader","className":"MonadReader"},{"typeNames":[],"name":"instMonadReaderOf","className":"MonadReaderOf"},{"typeNames":["ReaderT"],"name":"instMonadReaderOfReaderT","className":"MonadReaderOf"},{"typeNames":[],"name":"instMonadWithReader","className":"MonadWithReader"},{"typeNames":[],"name":"instMonadWithReaderOf","className":"MonadWithReaderOf"},{"typeNames":["ReaderT"],"name":"instMonadWithReaderOfReaderT","className":"MonadWithReaderOf"},{"typeNames":[],"name":"instMonadState","className":"MonadState"},{"typeNames":[],"name":"instMonadStateOf","className":"MonadStateOf"},{"typeNames":["EStateM.Result"],"name":"EStateM.instInhabitedResult","className":"Inhabited"},{"typeNames":["EStateM"],"name":"EStateM.instInhabitedEStateM","className":"Inhabited"},{"typeNames":["EStateM"],"name":"EStateM.instMonadEStateM","className":"Monad"},{"typeNames":["EStateM"],"name":"EStateM.instOrElseEStateM","className":"OrElse"},{"typeNames":["EStateM"],"name":"EStateM.instMonadStateOfEStateM","className":"MonadStateOf"},{"typeNames":["EStateM"],"name":"EStateM.instMonadExceptOfEStateM","className":"MonadExceptOf"},{"typeNames":["PUnit"],"name":"EStateM.nonBacktrackable","className":"EStateM.Backtrackable"},{"typeNames":["String"],"name":"instHashableString","className":"Hashable"},{"typeNames":["Lean.Name"],"name":"Lean.instInhabitedName","className":"Inhabited"},{"typeNames":["Lean.Name"],"name":"Lean.instHashableName","className":"Hashable"},{"typeNames":["Lean.Name"],"name":"Lean.Name.instBEqName","className":"BEq"},{"typeNames":["Lean.Name"],"name":"Lean.Name.instAppendName","className":"Append"},{"typeNames":["Lean.SourceInfo"],"name":"Lean.instInhabitedSourceInfo","className":"Inhabited"},{"typeNames":["Lean.Syntax"],"name":"Lean.instInhabitedSyntax","className":"Inhabited"},{"typeNames":["Lean.TSyntax"],"name":"Lean.instInhabitedTSyntax","className":"Inhabited"},{"typeNames":["Lean.Syntax","Nat","Lean.Syntax","Lean.Syntax","Nat","True"],"name":"Lean.Syntax.instGetElemSyntaxNatTrue","className":"GetElem"},{"typeNames":["Lean.ParserDescr"],"name":"Lean.instInhabitedParserDescr","className":"Inhabited"},{"typeNames":[],"name":"Lean.instMonadRef","className":"Lean.MonadRef"},{"typeNames":[],"name":"Lean.instMonadQuotation","className":"Lean.MonadQuotation"},{"typeNames":["Lean.MacroScopesView"],"name":"Lean.instInhabitedMacroScopesView","className":"Inhabited"},{"typeNames":["_private.Init.Prelude.0.Lean.Macro.MethodsRef"],"name":"Lean.Macro.instNonemptyMethodsRef","className":"Nonempty"},{"typeNames":["Lean.Macro.State"],"name":"Lean.Macro.instInhabitedState","className":"Inhabited"},{"typeNames":["Lean.MacroM"],"name":"Lean.Macro.instMonadRefMacroM","className":"Lean.MonadRef"},{"typeNames":["Lean.MacroM"],"name":"Lean.Macro.instMonadQuotationMacroM","className":"Lean.MonadQuotation"},{"typeNames":["Lean.Macro.Methods"],"name":"Lean.Macro.instInhabitedMethods","className":"Inhabited"},{"typeNames":["_private.Init.Prelude.0.Lean.Macro.MethodsRef"],"name":"Lean.Macro.instInhabitedMethodsRef","className":"Inhabited"},{"typeNames":["Lean.PrettyPrinter.UnexpandM"],"name":"Lean.PrettyPrinter.instMonadQuotationUnexpandM","className":"Lean.MonadQuotation"}],"imports":[],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L3042-L3048","name":"Lean.PrettyPrinter.instMonadQuotationUnexpandM","docLink":"./Init/Prelude.html#Lean.PrettyPrinter.instMonadQuotationUnexpandM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L3040-L3040","name":"Lean.PrettyPrinter.Unexpander","docLink":"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander","doc":"Function that tries to reverse macro expansions as a post-processing step of delaboration.\nWhile less general than an arbitrary delaborator, it can be declared without importing `Lean`.\nUsed by the `[appUnexpander]` attribute. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L3033-L3033","name":"Lean.PrettyPrinter.UnexpandM","docLink":"./Init/Prelude.html#Lean.PrettyPrinter.UnexpandM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L3024-L3025","name":"Lean.Macro.trace","docLink":"./Init/Prelude.html#Lean.Macro.trace","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L3021-L3022","name":"Lean.Macro.resolveGlobalName","docLink":"./Init/Prelude.html#Lean.Macro.resolveGlobalName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L3018-L3019","name":"Lean.Macro.resolveNamespace","docLink":"./Init/Prelude.html#Lean.Macro.resolveNamespace","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L3015-L3016","name":"Lean.Macro.getCurrNamespace","docLink":"./Init/Prelude.html#Lean.Macro.getCurrNamespace","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L3012-L3013","name":"Lean.Macro.hasDecl","docLink":"./Init/Prelude.html#Lean.Macro.hasDecl","doc":"Return `true` if the environment contains a declaration with name `declName` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L3008-L3009","name":"Lean.Macro.expandMacro?","docLink":"./Init/Prelude.html#Lean.Macro.expandMacro?","doc":"`expandMacro? stx` return `some stxNew` if `stx` is a macro, and `stxNew` is its expansion. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L3005-L3005","name":"Lean.Macro.getMethods","docLink":"./Init/Prelude.html#Lean.Macro.getMethods","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L3002-L3003","name":"Lean.Macro.getMethodsImp","docLink":"./Init/Prelude.html#Lean.Macro.getMethodsImp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2999-L3000","name":"Lean.Macro.instInhabitedMethodsRef","docLink":"./Init/Prelude.html#Lean.Macro.instInhabitedMethodsRef","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2997-L2997","name":"Lean.Macro.mkMethods","docLink":"./Init/Prelude.html#Lean.Macro.mkMethods","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2993-L2994","name":"Lean.Macro.mkMethodsImp","docLink":"./Init/Prelude.html#Lean.Macro.mkMethodsImp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2991-L2991","name":"Lean.Macro.instInhabitedMethods","docLink":"./Init/Prelude.html#Lean.Macro.instInhabitedMethods","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2985-L2991","name":"Lean.Macro.Methods","docLink":"./Init/Prelude.html#Lean.Macro.Methods","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2980-L2983","name":"Lean.Macro.instMonadQuotationMacroM","docLink":"./Init/Prelude.html#Lean.Macro.instMonadQuotationMacroM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2974-L2978","name":"Lean.Macro.withIncRecDepth","docLink":"./Init/Prelude.html#Lean.Macro.withIncRecDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2970-L2972","name":"Lean.Macro.withFreshMacroScope","docLink":"./Init/Prelude.html#Lean.Macro.withFreshMacroScope","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2967-L2968","name":"Lean.Macro.throwErrorAt","docLink":"./Init/Prelude.html#Lean.Macro.throwErrorAt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2963-L2965","name":"Lean.Macro.throwError","docLink":"./Init/Prelude.html#Lean.Macro.throwError","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2960-L2961","name":"Lean.Macro.throwUnsupported","docLink":"./Init/Prelude.html#Lean.Macro.throwUnsupported","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2956-L2958","name":"Lean.Macro.addMacroScope","docLink":"./Init/Prelude.html#Lean.Macro.addMacroScope","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2952-L2954","name":"Lean.Macro.instMonadRefMacroM","docLink":"./Init/Prelude.html#Lean.Macro.instMonadRefMacroM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2948-L2948","name":"Lean.Macro","docLink":"./Init/Prelude.html#Lean.Macro","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2946-L2946","name":"Lean.MacroM","docLink":"./Init/Prelude.html#Lean.MacroM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2942-L2942","name":"Lean.Macro.instInhabitedState","docLink":"./Init/Prelude.html#Lean.Macro.instInhabitedState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2939-L2942","name":"Lean.Macro.State","docLink":"./Init/Prelude.html#Lean.Macro.State","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2935-L2937","name":"Lean.Macro.Exception","docLink":"./Init/Prelude.html#Lean.Macro.Exception","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2927-L2933","name":"Lean.Macro.Context","docLink":"./Init/Prelude.html#Lean.Macro.Context","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2925-L2925","name":"Lean.Macro.instNonemptyMethodsRef","docLink":"./Init/Prelude.html#Lean.Macro.instNonemptyMethodsRef","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2909-L2914","name":"Lean.Syntax.matchesLit","docLink":"./Init/Prelude.html#Lean.Syntax.matchesLit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2906-L2907","name":"Lean.Syntax.matchesIdent","docLink":"./Init/Prelude.html#Lean.Syntax.matchesIdent","doc":"Function used for determining whether a syntax pattern `` `(id) `` is matched.\nThere are various conceivable notions of when two syntactic identifiers should be regarded as identical,\nbut semantic definitions like whether they refer to the same global name cannot be implemented without\ncontext information (i.e. `MonadResolveName`). Thus in patterns we default to the structural solution\nof comparing the identifiers' `Name` values, though we at least do so modulo macro scopes so that\nidentifiers that \"look\" the same match. This is particularly useful when dealing with identifiers that\ndo not actually refer to Lean bindings, e.g. in the `stx` pattern `` `(many($p)) ``. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2895-L2896","name":"Lean.Syntax.matchesNull","docLink":"./Init/Prelude.html#Lean.Syntax.matchesNull","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2890-L2891","name":"Lean.maxRecDepthErrorMessage","docLink":"./Init/Prelude.html#Lean.maxRecDepthErrorMessage","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2888-L2888","name":"Lean.defaultMaxRecDepth","docLink":"./Init/Prelude.html#Lean.defaultMaxRecDepth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2883-L2886","name":"Lean.MonadQuotation.addMacroScope","docLink":"./Init/Prelude.html#Lean.MonadQuotation.addMacroScope","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2868-L2881","name":"Lean.addMacroScope","docLink":"./Init/Prelude.html#Lean.addMacroScope","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2863-L2866","name":"Lean.extractMacroScopes","docLink":"./Init/Prelude.html#Lean.extractMacroScopes","doc":"Revert all `addMacroScope` calls. `v = extractMacroScopes n → n = v.review`.\nThis operation is useful for analyzing/transforming the original identifiers, then adding back\nthe scopes (via `MacroScopesView.review`). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2825-L2830","name":"Lean.MacroScopesView.review","docLink":"./Init/Prelude.html#Lean.MacroScopesView.review","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2822-L2823","name":"Lean.instInhabitedMacroScopesView","docLink":"./Init/Prelude.html#Lean.instInhabitedMacroScopesView","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2816-L2820","name":"Lean.MacroScopesView","docLink":"./Init/Prelude.html#Lean.MacroScopesView","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2811-L2814","name":"Lean.Name.simpMacroScopes","docLink":"./Init/Prelude.html#Lean.Name.simpMacroScopes","doc":"Helper function we use to create binder names that do not need to be unique. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2800-L2803","name":"Lean.Name.eraseMacroScopes","docLink":"./Init/Prelude.html#Lean.Name.eraseMacroScopes","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2787-L2790","name":"Lean.Name.hasMacroScopes","docLink":"./Init/Prelude.html#Lean.Name.hasMacroScopes","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2761-L2764","name":"Lean.instMonadQuotation","docLink":"./Init/Prelude.html#Lean.instMonadQuotation","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2758-L2759","name":"Lean.MonadRef.mkInfoFromRefPos","docLink":"./Init/Prelude.html#Lean.MonadRef.mkInfoFromRefPos","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2738-L2754","name":"Lean.MonadQuotation","docLink":"./Init/Prelude.html#Lean.MonadQuotation","doc":"A monad that supports syntax quotations. Syntax quotations (in term\nposition) are monadic values that when executed retrieve the current \"macro\nscope\" from the monad and apply it to every identifier they introduce\n(independent of whether this identifier turns out to be a reference to an\nexisting declaration, or an actually fresh binding during further\nelaboration). We also apply the position of the result of `getRef` to each\nintroduced symbol, which results in better error positions than not applying\nany position. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2725-L2728","name":"Lean.withRef","docLink":"./Init/Prelude.html#Lean.withRef","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2720-L2723","name":"Lean.replaceRef","docLink":"./Init/Prelude.html#Lean.replaceRef","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2716-L2718","name":"Lean.instMonadRef","docLink":"./Init/Prelude.html#Lean.instMonadRef","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2710-L2712","name":"Lean.MonadRef","docLink":"./Init/Prelude.html#Lean.MonadRef","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2708-L2708","name":"Lean.firstFrontendMacroScope","docLink":"./Init/Prelude.html#Lean.firstFrontendMacroScope","doc":"First macro scope available for our frontend "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2706-L2706","name":"Lean.reservedMacroScope","docLink":"./Init/Prelude.html#Lean.reservedMacroScope","doc":"Macro scope used internally. It is not available for our frontend. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2704-L2704","name":"Lean.MacroScope","docLink":"./Init/Prelude.html#Lean.MacroScope","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2696-L2696","name":"Lean.TrailingParserDescr","docLink":"./Init/Prelude.html#Lean.TrailingParserDescr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2693-L2694","name":"Lean.instInhabitedParserDescr","docLink":"./Init/Prelude.html#Lean.instInhabitedParserDescr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2679-L2691","name":"Lean.ParserDescr","docLink":"./Init/Prelude.html#Lean.ParserDescr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2674-L2675","name":"Lean.mkAtomFrom","docLink":"./Init/Prelude.html#Lean.mkAtomFrom","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2671-L2672","name":"Lean.mkAtom","docLink":"./Init/Prelude.html#Lean.mkAtom","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2666-L2669","name":"Lean.SourceInfo.fromRef","docLink":"./Init/Prelude.html#Lean.SourceInfo.fromRef","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2664-L2664","name":"Lean.TSyntaxArray.mk","docLink":"./Init/Prelude.html#Lean.TSyntaxArray.mk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2661-L2661","name":"Lean.TSyntaxArray.mkImpl","docLink":"./Init/Prelude.html#Lean.TSyntaxArray.mkImpl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2659-L2659","name":"Lean.TSyntaxArray.raw","docLink":"./Init/Prelude.html#Lean.TSyntaxArray.raw","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2656-L2656","name":"Lean.TSyntaxArray.rawImpl","docLink":"./Init/Prelude.html#Lean.TSyntaxArray.rawImpl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2654-L2654","name":"Lean.TSyntaxArray","docLink":"./Init/Prelude.html#Lean.TSyntaxArray","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2649-L2650","name":"Lean.Syntax.TSepArray","docLink":"./Init/Prelude.html#Lean.Syntax.TSepArray","doc":"A typed version of `SepArray`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2645-L2646","name":"Lean.Syntax.SepArray","docLink":"./Init/Prelude.html#Lean.Syntax.SepArray","doc":"An array of syntax elements interspersed with separators. Can be coerced to/from `Array Syntax` to automatically\nremove/insert the separators. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2633-L2638","name":"Lean.Syntax.getTailPos?.loop","docLink":"./Init/Prelude.html#Lean.Syntax.getTailPos?.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2624-L2640","name":"Lean.Syntax.getTailPos?","docLink":"./Init/Prelude.html#Lean.Syntax.getTailPos?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2621-L2622","name":"Lean.Syntax.getPos?","docLink":"./Init/Prelude.html#Lean.Syntax.getPos?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2616-L2619","name":"Lean.Syntax.getHeadInfo","docLink":"./Init/Prelude.html#Lean.Syntax.getHeadInfo","doc":"Retrieve the left-most leaf's info in the Syntax tree, or `none` if there is no token. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2605-L2610","name":"Lean.Syntax.getHeadInfo?.loop","docLink":"./Init/Prelude.html#Lean.Syntax.getHeadInfo?.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2601-L2613","name":"Lean.Syntax.getHeadInfo?","docLink":"./Init/Prelude.html#Lean.Syntax.getHeadInfo?","doc":"Retrieve the left-most node or leaf's info in the Syntax tree. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2595-L2598","name":"Lean.Syntax.setArg","docLink":"./Init/Prelude.html#Lean.Syntax.setArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2590-L2593","name":"Lean.Syntax.setArgs","docLink":"./Init/Prelude.html#Lean.Syntax.setArgs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2586-L2588","name":"Lean.Syntax.getId","docLink":"./Init/Prelude.html#Lean.Syntax.getId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2582-L2584","name":"Lean.Syntax.isIdent","docLink":"./Init/Prelude.html#Lean.Syntax.isIdent","doc":"`stx.isIdent` is `true` iff `stx` is an identifier. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2578-L2579","name":"Lean.Syntax.isNodeOf","docLink":"./Init/Prelude.html#Lean.Syntax.isNodeOf","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2574-L2576","name":"Lean.Syntax.isMissing","docLink":"./Init/Prelude.html#Lean.Syntax.isMissing","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2567-L2572","name":"Lean.Syntax.getOptional?","docLink":"./Init/Prelude.html#Lean.Syntax.getOptional?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2562-L2565","name":"Lean.Syntax.getNumArgs","docLink":"./Init/Prelude.html#Lean.Syntax.getNumArgs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2557-L2560","name":"Lean.Syntax.getArgs","docLink":"./Init/Prelude.html#Lean.Syntax.getArgs","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2554-L2555","name":"Lean.Syntax.instGetElemSyntaxNatTrue","docLink":"./Init/Prelude.html#Lean.Syntax.instGetElemSyntaxNatTrue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2549-L2552","name":"Lean.Syntax.getArg","docLink":"./Init/Prelude.html#Lean.Syntax.getArg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2546-L2547","name":"Lean.Syntax.isOfKind","docLink":"./Init/Prelude.html#Lean.Syntax.isOfKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2541-L2544","name":"Lean.Syntax.setKind","docLink":"./Init/Prelude.html#Lean.Syntax.setKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2531-L2539","name":"Lean.Syntax.getKind","docLink":"./Init/Prelude.html#Lean.Syntax.getKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2527-L2527","name":"Lean.interpolatedStrKind","docLink":"./Init/Prelude.html#Lean.interpolatedStrKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2526-L2526","name":"Lean.interpolatedStrLitKind","docLink":"./Init/Prelude.html#Lean.interpolatedStrLitKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2525-L2525","name":"Lean.fieldIdxKind","docLink":"./Init/Prelude.html#Lean.fieldIdxKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2524-L2524","name":"Lean.nameLitKind","docLink":"./Init/Prelude.html#Lean.nameLitKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2523-L2523","name":"Lean.scientificLitKind","docLink":"./Init/Prelude.html#Lean.scientificLitKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2522-L2522","name":"Lean.numLitKind","docLink":"./Init/Prelude.html#Lean.numLitKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2521-L2521","name":"Lean.charLitKind","docLink":"./Init/Prelude.html#Lean.charLitKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2520-L2520","name":"Lean.strLitKind","docLink":"./Init/Prelude.html#Lean.strLitKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2519-L2519","name":"Lean.identKind","docLink":"./Init/Prelude.html#Lean.identKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2518-L2518","name":"Lean.groupKind","docLink":"./Init/Prelude.html#Lean.groupKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2517-L2517","name":"Lean.nullKind","docLink":"./Init/Prelude.html#Lean.nullKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2516-L2516","name":"Lean.choiceKind","docLink":"./Init/Prelude.html#Lean.choiceKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2512-L2513","name":"Lean.instInhabitedTSyntax","docLink":"./Init/Prelude.html#Lean.instInhabitedTSyntax","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2509-L2510","name":"Lean.instInhabitedSyntax","docLink":"./Init/Prelude.html#Lean.instInhabitedSyntax","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2506-L2507","name":"Lean.TSyntax","docLink":"./Init/Prelude.html#Lean.TSyntax","doc":"A `Syntax` value of one of the given syntax kinds.\nNote that while syntax quotations produce/expect `TSyntax` values of the correct kinds,\nthis is not otherwise enforced and can easily be circumvented by direct use of the constructor.\nThe namespace `TSyntax.Compat` can be opened to expose a general coercion from `Syntax` to any\n`TSyntax ks` for porting older code. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2498-L2498","name":"Lean.SyntaxNodeKinds","docLink":"./Init/Prelude.html#Lean.SyntaxNodeKinds","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2472-L2496","name":"Lean.Syntax","docLink":"./Init/Prelude.html#Lean.Syntax","doc":"Syntax objects used by the parser, macro expander, delaborator, etc.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2465-L2465","name":"Lean.SyntaxNodeKind","docLink":"./Init/Prelude.html#Lean.SyntaxNodeKind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2457-L2461","name":"Lean.SourceInfo.getPos?","docLink":"./Init/Prelude.html#Lean.SourceInfo.getPos?","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2453-L2453","name":"Lean.instInhabitedSourceInfo","docLink":"./Init/Prelude.html#Lean.instInhabitedSourceInfo","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2435-L2451","name":"Lean.SourceInfo","docLink":"./Init/Prelude.html#Lean.SourceInfo","doc":"Source information of tokens. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2427-L2428","name":"Lean.Name.instAppendName","docLink":"./Init/Prelude.html#Lean.Name.instAppendName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2422-L2425","name":"Lean.Name.append","docLink":"./Init/Prelude.html#Lean.Name.append","doc":"Append two hierarchical names. Example:\n```lean\n`Lean.Meta ++ `Tactic.simp\n```\nreturn `Lean.Meta.Tactic.simp`\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2412-L2413","name":"Lean.Name.instBEqName","docLink":"./Init/Prelude.html#Lean.Name.instBEqName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2406-L2410","name":"Lean.Name.beq","docLink":"./Init/Prelude.html#Lean.Name.beq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2402-L2403","name":"Lean.Name.mkSimple","docLink":"./Init/Prelude.html#Lean.Name.mkSimple","doc":"Short for `.str .anonymous s`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2396-L2397","name":"Lean.Name.mkNum","docLink":"./Init/Prelude.html#Lean.Name.mkNum","doc":"`.num p v` is now the preferred form.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2389-L2390","name":"Lean.Name.mkStr","docLink":"./Init/Prelude.html#Lean.Name.mkStr","doc":"`.str p s` is now the preferred form.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2380-L2381","name":"Lean.instHashableName","docLink":"./Init/Prelude.html#Lean.instHashableName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2377-L2378","name":"Lean.instInhabitedName","docLink":"./Init/Prelude.html#Lean.instInhabitedName","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2372-L2375","name":"Lean.Name.hash","docLink":"./Init/Prelude.html#Lean.Name.hash","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2353-L2375","name":"Lean.Name","docLink":"./Init/Prelude.html#Lean.Name","doc":"Hierarchical names. We use hierarchical names to name declarations and\nfor creating unique identifiers for free variables and metavariables.\n\nYou can create hierarchical names using the following quotation notation.\n```\n`Lean.Meta.whnf\n```\nIt is short for `.str (.str (.str .anonymous \"Lean\") \"Meta\") \"whnf\"`\nYou can use double quotes to request Lean to statically check whether the name\ncorresponds to a Lean declaration in scope.\n```\n``Lean.Meta.whnf\n```\nIf the name is not in scope, Lean will report an error.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2332-L2333","name":"instHashableString","docLink":"./Init/Prelude.html#instHashableString","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2330-L2330","name":"String.hash","docLink":"./Init/Prelude.html#String.hash","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2327-L2327","name":"mixHash","docLink":"./Init/Prelude.html#mixHash","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2324-L2324","name":"USize.toUInt64","docLink":"./Init/Prelude.html#USize.toUInt64","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2321-L2321","name":"UInt64.toUSize","docLink":"./Init/Prelude.html#UInt64.toUSize","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2315-L2316","name":"Hashable","docLink":"./Init/Prelude.html#Hashable","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2309-L2311","name":"EStateM.nonBacktrackable","docLink":"./Init/Prelude.html#EStateM.nonBacktrackable","doc":"Dummy default instance "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2306-L2306","name":"EStateM.dummyRestore","docLink":"./Init/Prelude.html#EStateM.dummyRestore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2304-L2304","name":"EStateM.dummySave","docLink":"./Init/Prelude.html#EStateM.dummySave","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2299-L2302","name":"EStateM.run'","docLink":"./Init/Prelude.html#EStateM.run'","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2296-L2297","name":"EStateM.run","docLink":"./Init/Prelude.html#EStateM.run","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2292-L2294","name":"EStateM.instMonadExceptOfEStateM","docLink":"./Init/Prelude.html#EStateM.instMonadExceptOfEStateM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2287-L2290","name":"EStateM.instMonadStateOfEStateM","docLink":"./Init/Prelude.html#EStateM.instMonadStateOfEStateM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2284-L2285","name":"EStateM.instOrElseEStateM","docLink":"./Init/Prelude.html#EStateM.instOrElseEStateM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2278-L2282","name":"EStateM.instMonadEStateM","docLink":"./Init/Prelude.html#EStateM.instMonadEStateM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2273-L2276","name":"EStateM.seqRight","docLink":"./Init/Prelude.html#EStateM.seqRight","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2268-L2271","name":"EStateM.map","docLink":"./Init/Prelude.html#EStateM.map","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2263-L2266","name":"EStateM.bind","docLink":"./Init/Prelude.html#EStateM.bind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2258-L2261","name":"EStateM.adaptExcept","docLink":"./Init/Prelude.html#EStateM.adaptExcept","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2252-L2256","name":"EStateM.orElse","docLink":"./Init/Prelude.html#EStateM.orElse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2246-L2250","name":"EStateM.tryCatch","docLink":"./Init/Prelude.html#EStateM.tryCatch","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2242-L2244","name":"EStateM.Backtrackable","docLink":"./Init/Prelude.html#EStateM.Backtrackable","doc":"Auxiliary instance for saving/restoring the \"backtrackable\" part of the state. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2238-L2239","name":"EStateM.throw","docLink":"./Init/Prelude.html#EStateM.throw","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2234-L2236","name":"EStateM.modifyGet","docLink":"./Init/Prelude.html#EStateM.modifyGet","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2231-L2232","name":"EStateM.get","docLink":"./Init/Prelude.html#EStateM.get","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2228-L2229","name":"EStateM.set","docLink":"./Init/Prelude.html#EStateM.set","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2225-L2226","name":"EStateM.pure","docLink":"./Init/Prelude.html#EStateM.pure","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2222-L2223","name":"EStateM.instInhabitedEStateM","docLink":"./Init/Prelude.html#EStateM.instInhabitedEStateM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2216-L2216","name":"EStateM","docLink":"./Init/Prelude.html#EStateM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2210-L2211","name":"EStateM.instInhabitedResult","docLink":"./Init/Prelude.html#EStateM.instInhabitedResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2204-L2206","name":"EStateM.Result","docLink":"./Init/Prelude.html#EStateM.Result","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2197-L2200","name":"instMonadStateOf","docLink":"./Init/Prelude.html#instMonadStateOf","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2192-L2193","name":"getModify","docLink":"./Init/Prelude.html#getModify","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2189-L2190","name":"modify","docLink":"./Init/Prelude.html#modify","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2184-L2187","name":"instMonadState","docLink":"./Init/Prelude.html#instMonadState","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2177-L2180","name":"MonadState","docLink":"./Init/Prelude.html#MonadState","doc":"Similar to `MonadStateOf`, but `σ` is an outParam for convenience "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2173-L2174","name":"modifyGetThe","docLink":"./Init/Prelude.html#modifyGetThe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2170-L2171","name":"modifyThe","docLink":"./Init/Prelude.html#modifyThe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2167-L2168","name":"getThe","docLink":"./Init/Prelude.html#getThe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2154-L2163","name":"MonadStateOf","docLink":"./Init/Prelude.html#MonadStateOf","doc":"An implementation of [MonadState](https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-State-Class.html).\nIn contrast to the Haskell implementation, we use overlapping instances to derive instances\nautomatically from `monadLift`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2148-L2149","name":"instMonadWithReaderOfReaderT","docLink":"./Init/Prelude.html#instMonadWithReaderOfReaderT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2145-L2146","name":"instMonadWithReaderOf","docLink":"./Init/Prelude.html#instMonadWithReaderOf","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2142-L2143","name":"instMonadWithReader","docLink":"./Init/Prelude.html#instMonadWithReader","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2137-L2138","name":"MonadWithReader","docLink":"./Init/Prelude.html#MonadWithReader","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2134-L2135","name":"withTheReader","docLink":"./Init/Prelude.html#withTheReader","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2131-L2132","name":"MonadWithReaderOf","docLink":"./Init/Prelude.html#MonadWithReaderOf","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2128-L2129","name":"instMonadReaderOfReaderT","docLink":"./Init/Prelude.html#instMonadReaderOfReaderT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2125-L2126","name":"instMonadReaderOf","docLink":"./Init/Prelude.html#instMonadReaderOf","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2122-L2123","name":"instMonadReader","docLink":"./Init/Prelude.html#instMonadReader","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2117-L2118","name":"MonadReader","docLink":"./Init/Prelude.html#MonadReader","doc":"Similar to `MonadReaderOf`, but `ρ` is an outParam for convenience "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2113-L2114","name":"readThe","docLink":"./Init/Prelude.html#readThe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2110-L2111","name":"MonadReaderOf","docLink":"./Init/Prelude.html#MonadReaderOf","doc":"An implementation of [MonadReader](https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Reader-Class.html#t:MonadReader).\n    It does not contain `local` because this Function cannot be lifted using `monadLift`.\n    Instead, the `MonadReaderAdapter` class provides the more general `adaptReader` Function.\n\n    Note: This class can be seen as a simplification of the more \"principled\" definition\n    ```\n    class MonadReader (ρ : outParam (Type u)) (n : Type u → Type u) where\n      lift {α : Type u} : ({m : Type u → Type u} → [Monad m] → ReaderT ρ m α) → n α\n    ```\n    "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2094-L2095","name":"ReaderT.adapt","docLink":"./Init/Prelude.html#ReaderT.adapt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2091-L2092","name":"ReaderT.instMonadFunctorReaderT","docLink":"./Init/Prelude.html#ReaderT.instMonadFunctorReaderT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2086-L2089","name":"ReaderT.instMonadReaderT","docLink":"./Init/Prelude.html#ReaderT.instMonadReaderT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2083-L2084","name":"ReaderT.map","docLink":"./Init/Prelude.html#ReaderT.map","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2080-L2081","name":"ReaderT.bind","docLink":"./Init/Prelude.html#ReaderT.bind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2077-L2078","name":"ReaderT.pure","docLink":"./Init/Prelude.html#ReaderT.pure","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2074-L2075","name":"ReaderT.read","docLink":"./Init/Prelude.html#ReaderT.read","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2065-L2067","name":"ReaderT.instMonadExceptOfReaderT","docLink":"./Init/Prelude.html#ReaderT.instMonadExceptOfReaderT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2062-L2063","name":"ReaderT.instMonadLiftReaderT","docLink":"./Init/Prelude.html#ReaderT.instMonadLiftReaderT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2054-L2055","name":"ReaderT.run","docLink":"./Init/Prelude.html#ReaderT.run","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2051-L2052","name":"instInhabitedReaderT","docLink":"./Init/Prelude.html#instInhabitedReaderT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2048-L2049","name":"ReaderT","docLink":"./Init/Prelude.html#ReaderT","doc":"An implementation of [ReaderT](https://hackage.haskell.org/package/transformers-0.5.5.0/docs/Control-Monad-Trans-Reader.html#t:ReaderT) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2042-L2043","name":"MonadExcept.instOrElse","docLink":"./Init/Prelude.html#MonadExcept.instOrElse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2039-L2040","name":"MonadExcept.orElse","docLink":"./Init/Prelude.html#MonadExcept.orElse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2032-L2034","name":"instMonadExcept","docLink":"./Init/Prelude.html#instMonadExcept","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2026-L2028","name":"MonadExcept.ofExcept","docLink":"./Init/Prelude.html#MonadExcept.ofExcept","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2022-L2024","name":"MonadExcept","docLink":"./Init/Prelude.html#MonadExcept","doc":"Similar to `MonadExceptOf`, but `ε` is an outParam for convenience "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2018-L2019","name":"tryCatchThe","docLink":"./Init/Prelude.html#tryCatchThe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2015-L2016","name":"throwThe","docLink":"./Init/Prelude.html#throwThe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2011-L2013","name":"MonadExceptOf","docLink":"./Init/Prelude.html#MonadExceptOf","doc":"An implementation of [MonadError](https://hackage.haskell.org/package/mtl-2.2.2/docs/Control-Monad-Except.html#t:MonadError) "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2007-L2008","name":"instInhabitedExcept","docLink":"./Init/Prelude.html#instInhabitedExcept","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L2001-L2003","name":"Except","docLink":"./Init/Prelude.html#Except","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1998-L1999","name":"monadFunctorRefl","docLink":"./Init/Prelude.html#monadFunctorRefl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1995-L1996","name":"instMonadFunctorT","docLink":"./Init/Prelude.html#instMonadFunctorT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1990-L1991","name":"MonadFunctorT","docLink":"./Init/Prelude.html#MonadFunctorT","doc":"The reflexive-transitive closure of `MonadFunctor`.\n`monadMap` is used to transitively lift Monad morphisms "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1985-L1986","name":"MonadFunctor","docLink":"./Init/Prelude.html#MonadFunctor","doc":"A functor in the category of monads. Can be used to lift monad-transforming functions.\nBased on pipes' [MFunctor](https://hackage.haskell.org/package/pipes-2.4.0/docs/Control-MFunctor.html),\nbut not restricted to monad transformers.\nAlternatively, an implementation of [MonadTransFunctor](http://duairc.netsoc.ie/layers-docs/Control-Monad-Layer.html#t:MonadTransFunctor). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1978-L1979","name":"instMonadLiftT_1","docLink":"./Init/Prelude.html#instMonadLiftT_1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1975-L1976","name":"instMonadLiftT","docLink":"./Init/Prelude.html#instMonadLiftT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1973-L1973","name":"liftM","docLink":"./Init/Prelude.html#liftM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1968-L1969","name":"MonadLiftT","docLink":"./Init/Prelude.html#MonadLiftT","doc":"The reflexive-transitive closure of `MonadLift`.\n`monadLift` is used to transitively lift monadic computations such as `StateT.get` or `StateT.put s`.\nCorresponds to [MonadLift](https://hackage.haskell.org/package/layers-0.1/docs/Control-Monad-Layer.html#t:MonadLift). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1962-L1963","name":"MonadLift","docLink":"./Init/Prelude.html#MonadLift","doc":"A Function for lifting a computation from an inner Monad to an outer Monad.\nLike [MonadTrans](https://hackage.haskell.org/package/transformers-0.5.5.0/docs/Control-Monad-Trans-Class.html),\nbut `n` does not have to be a monad transformer.\nAlternatively, an implementation of [MonadLayer](https://hackage.haskell.org/package/layers-0.1/docs/Control-Monad-Layer.html#t:MonadLayer) without `layerInvmap` (so far). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1949-L1955","name":"Array.sequenceMap.loop","docLink":"./Init/Prelude.html#Array.sequenceMap.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1948-L1956","name":"Array.sequenceMap","docLink":"./Init/Prelude.html#Array.sequenceMap","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1944-L1945","name":"instInhabited","docLink":"./Init/Prelude.html#instInhabited","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1941-L1942","name":"instInhabitedForAll_2","docLink":"./Init/Prelude.html#instInhabitedForAll_2","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1935-L1939","name":"Monad","docLink":"./Init/Prelude.html#Monad","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1930-L1933","name":"Applicative","docLink":"./Init/Prelude.html#Applicative","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1927-L1928","name":"SeqRight","docLink":"./Init/Prelude.html#SeqRight","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1924-L1925","name":"SeqLeft","docLink":"./Init/Prelude.html#SeqLeft","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1921-L1922","name":"Seq","docLink":"./Init/Prelude.html#Seq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1917-L1919","name":"Functor","docLink":"./Init/Prelude.html#Functor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1912-L1913","name":"Pure","docLink":"./Init/Prelude.html#Pure","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1907-L1908","name":"Bind","docLink":"./Init/Prelude.html#Bind","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1904-L1905","name":"List.toArray","docLink":"./Init/Prelude.html#List.toArray","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1899-L1901","name":"List.redLength","docLink":"./Init/Prelude.html#List.redLength","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1894-L1896","name":"List.toArrayAux","docLink":"./Init/Prelude.html#List.toArrayAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1884-L1890","name":"Array.appendCore.loop","docLink":"./Init/Prelude.html#Array.appendCore.loop","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1883-L1891","name":"Array.appendCore","docLink":"./Init/Prelude.html#Array.appendCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1879-L1880","name":"Array.set!","docLink":"./Init/Prelude.html#Array.set!","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1875-L1876","name":"Array.setD","docLink":"./Init/Prelude.html#Array.setD","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1871-L1873","name":"Array.set","docLink":"./Init/Prelude.html#Array.set","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1866-L1868","name":"Array.push","docLink":"./Init/Prelude.html#Array.push","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1862-L1863","name":"instGetElemArrayNatLtInstLTNatSize","docLink":"./Init/Prelude.html#instGetElemArrayNatLtInstLTNatSize","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1859-L1860","name":"Array.get!","docLink":"./Init/Prelude.html#Array.get!","doc":"\"Comfortable\" version of `fget`. It performs a bound check at runtime. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1854-L1855","name":"Array.getD","docLink":"./Init/Prelude.html#Array.getD","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1851-L1852","name":"Array.get","docLink":"./Init/Prelude.html#Array.get","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1847-L1848","name":"Array.size","docLink":"./Init/Prelude.html#Array.size","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1843-L1844","name":"Array.empty","docLink":"./Init/Prelude.html#Array.empty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1839-L1841","name":"Array.mkEmpty","docLink":"./Init/Prelude.html#Array.mkEmpty","doc":"The parameter `c` is the initial capacity "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1831-L1832","name":"Array","docLink":"./Init/Prelude.html#Array","doc":"The Compiler has special support for arrays.\nThey are implemented using dynamic arrays: https://en.wikipedia.org/wiki/Dynamic_array\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1822-L1823","name":"GetElem","docLink":"./Init/Prelude.html#GetElem","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1816-L1817","name":"panic","docLink":"./Init/Prelude.html#panic","doc":"This is workaround for `panic` occurring in monadic code. See issue #695.\nThe `panicCore` definition cannot be specialized since it is an extern.\nWhen `panic` occurs in monadic code, the `Inhabited α` parameter depends on a `[inst : Monad m]` instance.\nThe `inst` parameter will not be eliminated during specialization if it occurs inside of a binder (to avoid work duplication), and\nwill prevent the the actual monad from being \"copied\" to the code being specialized. When we reimplement the specializer, we\nmay consider copying `inst` if it also occurs outside binders or if it is an instance.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1805-L1805","name":"panicCore","docLink":"./Init/Prelude.html#panicCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1801-L1802","name":"unsafeCast","docLink":"./Init/Prelude.html#unsafeCast","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1795-L1799","name":"String.toSubstring","docLink":"./Init/Prelude.html#String.toSubstring","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1792-L1793","name":"String.endPos","docLink":"./Init/Prelude.html#String.endPos","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1789-L1790","name":"instDecidableLtPosInstLTPos","docLink":"./Init/Prelude.html#instDecidableLtPosInstLTPos","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1786-L1787","name":"instDecidableLePosInstLEPos","docLink":"./Init/Prelude.html#instDecidableLePosInstLEPos","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1783-L1784","name":"instLTPos","docLink":"./Init/Prelude.html#instLTPos","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1780-L1781","name":"instLEPos","docLink":"./Init/Prelude.html#instLEPos","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1777-L1778","name":"instHAddPosString","docLink":"./Init/Prelude.html#instHAddPosString","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1774-L1775","name":"instHAddPosChar","docLink":"./Init/Prelude.html#instHAddPosChar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1771-L1772","name":"instHSubPos","docLink":"./Init/Prelude.html#instHSubPos","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1768-L1769","name":"instHAddPos","docLink":"./Init/Prelude.html#instHAddPos","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1764-L1766","name":"String.utf8ByteSize.go","docLink":"./Init/Prelude.html#String.utf8ByteSize.go","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1761-L1766","name":"String.utf8ByteSize","docLink":"./Init/Prelude.html#String.utf8ByteSize","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1757-L1758","name":"String.csize","docLink":"./Init/Prelude.html#String.csize","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1754-L1755","name":"Substring.bsize","docLink":"./Init/Prelude.html#Substring.bsize","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1751-L1752","name":"instInhabitedSubstring","docLink":"./Init/Prelude.html#instInhabitedSubstring","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1746-L1749","name":"Substring","docLink":"./Init/Prelude.html#Substring","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1741-L1744","name":"instDecidableEqPos","docLink":"./Init/Prelude.html#instDecidableEqPos","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1738-L1739","name":"instInhabitedPos","docLink":"./Init/Prelude.html#instInhabitedPos","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1735-L1736","name":"String.Pos","docLink":"./Init/Prelude.html#String.Pos","doc":"A byte position in a `String`. Internally, `String`s are UTF-8 encoded.\nCodepoint positions (counting the Unicode codepoints rather than bytes)\nare represented by plain `Nat`s instead.\nIndexing a `String` by a byte position is constant-time, while codepoint\npositions need to be translated internally to byte positions in linear-time. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1728-L1728","name":"instDecidableEqString","docLink":"./Init/Prelude.html#instDecidableEqString","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1723-L1726","name":"String.decEq","docLink":"./Init/Prelude.html#String.decEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1716-L1717","name":"String","docLink":"./Init/Prelude.html#String","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1712-L1714","name":"List.get","docLink":"./Init/Prelude.html#List.get","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1708-L1710","name":"List.concat","docLink":"./Init/Prelude.html#List.concat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1705-L1706","name":"List.length_cons","docLink":"./Init/Prelude.html#List.length_cons","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1702-L1703","name":"List.lengthTR","docLink":"./Init/Prelude.html#List.lengthTR","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1698-L1700","name":"List.lengthTRAux","docLink":"./Init/Prelude.html#List.lengthTRAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1694-L1696","name":"List.length","docLink":"./Init/Prelude.html#List.length","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1689-L1692","name":"List.set","docLink":"./Init/Prelude.html#List.set","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1685-L1687","name":"List.foldl","docLink":"./Init/Prelude.html#List.foldl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1682-L1682","name":"instDecidableEqList","docLink":"./Init/Prelude.html#instDecidableEqList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1670-L1680","name":"List.hasDecEq","docLink":"./Init/Prelude.html#List.hasDecEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1667-L1668","name":"instInhabitedList","docLink":"./Init/Prelude.html#instInhabitedList","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1663-L1665","name":"List","docLink":"./Init/Prelude.html#List","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1659-L1661","name":"Option.map","docLink":"./Init/Prelude.html#Option.map","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1655-L1657","name":"Option.getD","docLink":"./Init/Prelude.html#Option.getD","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1652-L1653","name":"instInhabitedOption","docLink":"./Init/Prelude.html#instInhabitedOption","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1644-L1646","name":"Option","docLink":"./Init/Prelude.html#Option","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1634-L1642","name":"Char.utf8Size","docLink":"./Init/Prelude.html#Char.utf8Size","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1628-L1632","name":"instDecidableEqChar","docLink":"./Init/Prelude.html#instDecidableEqChar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1625-L1626","name":"Char.val_ne_of_ne","docLink":"./Init/Prelude.html#Char.val_ne_of_ne","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1622-L1623","name":"Char.ne_of_val_ne","docLink":"./Init/Prelude.html#Char.ne_of_val_ne","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1619-L1620","name":"Char.val_eq_of_eq","docLink":"./Init/Prelude.html#Char.val_eq_of_eq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1616-L1617","name":"Char.eq_of_val_eq","docLink":"./Init/Prelude.html#Char.eq_of_val_eq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1611-L1614","name":"Char.ofNat","docLink":"./Init/Prelude.html#Char.ofNat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1607-L1608","name":"Char.ofNatAux","docLink":"./Init/Prelude.html#Char.ofNatAux","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1597-L1599","name":"Char","docLink":"./Init/Prelude.html#Char","doc":"The `Char` Type represents an unicode scalar value.\nSee http://www.unicode.org/glossary/#unicode_scalar_value). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1592-L1593","name":"UInt32.isValidChar","docLink":"./Init/Prelude.html#UInt32.isValidChar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1589-L1590","name":"Nat.isValidChar","docLink":"./Init/Prelude.html#Nat.isValidChar","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1580-L1587","name":"USize.ofNat32","docLink":"./Init/Prelude.html#USize.ofNat32","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1574-L1577","name":"instInhabitedUSize","docLink":"./Init/Prelude.html#instInhabitedUSize","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1572-L1572","name":"instDecidableEqUSize","docLink":"./Init/Prelude.html#instDecidableEqUSize","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1567-L1570","name":"USize.decEq","docLink":"./Init/Prelude.html#USize.decEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1561-L1563","name":"USize.ofNatCore","docLink":"./Init/Prelude.html#USize.ofNatCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1554-L1555","name":"USize","docLink":"./Init/Prelude.html#USize","doc":"A USize is an unsigned integer with the size of a word\nfor the platform's architecture.\n\nFor example, if running on a 32-bit machine, USize is equivalent to UInt32.\nOr on a 64-bit machine, UInt64.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1542-L1546","name":"usize_size_eq","docLink":"./Init/Prelude.html#usize_size_eq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1540-L1540","name":"USize.size","docLink":"./Init/Prelude.html#USize.size","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1537-L1538","name":"instInhabitedUInt64","docLink":"./Init/Prelude.html#instInhabitedUInt64","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1535-L1535","name":"instDecidableEqUInt64","docLink":"./Init/Prelude.html#instDecidableEqUInt64","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1530-L1533","name":"UInt64.decEq","docLink":"./Init/Prelude.html#UInt64.decEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1524-L1526","name":"UInt64.ofNatCore","docLink":"./Init/Prelude.html#UInt64.ofNatCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1517-L1518","name":"UInt64","docLink":"./Init/Prelude.html#UInt64","doc":"Unsigned, 64-bit integer. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1515-L1515","name":"UInt64.size","docLink":"./Init/Prelude.html#UInt64.size","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1513-L1513","name":"instDecidableLeUInt32InstLEUInt32","docLink":"./Init/Prelude.html#instDecidableLeUInt32InstLEUInt32","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1512-L1512","name":"instDecidableLtUInt32InstLTUInt32","docLink":"./Init/Prelude.html#instDecidableLtUInt32InstLTUInt32","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1508-L1510","name":"UInt32.decLe","docLink":"./Init/Prelude.html#UInt32.decLe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1502-L1504","name":"UInt32.decLt","docLink":"./Init/Prelude.html#UInt32.decLt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1497-L1498","name":"instLEUInt32","docLink":"./Init/Prelude.html#instLEUInt32","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1494-L1495","name":"instLTUInt32","docLink":"./Init/Prelude.html#instLTUInt32","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1491-L1492","name":"instInhabitedUInt32","docLink":"./Init/Prelude.html#instInhabitedUInt32","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1489-L1489","name":"instDecidableEqUInt32","docLink":"./Init/Prelude.html#instDecidableEqUInt32","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1484-L1487","name":"UInt32.decEq","docLink":"./Init/Prelude.html#UInt32.decEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1480-L1480","name":"UInt32.toNat","docLink":"./Init/Prelude.html#UInt32.toNat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1475-L1477","name":"UInt32.ofNatCore","docLink":"./Init/Prelude.html#UInt32.ofNatCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1468-L1469","name":"UInt32","docLink":"./Init/Prelude.html#UInt32","doc":"Unsigned, 32-bit integer. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1466-L1466","name":"UInt32.size","docLink":"./Init/Prelude.html#UInt32.size","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1463-L1464","name":"instInhabitedUInt16","docLink":"./Init/Prelude.html#instInhabitedUInt16","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1461-L1461","name":"instDecidableEqUInt16","docLink":"./Init/Prelude.html#instDecidableEqUInt16","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1456-L1459","name":"UInt16.decEq","docLink":"./Init/Prelude.html#UInt16.decEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1450-L1452","name":"UInt16.ofNatCore","docLink":"./Init/Prelude.html#UInt16.ofNatCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1443-L1444","name":"UInt16","docLink":"./Init/Prelude.html#UInt16","doc":"Unsigned 16-bit integer. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1441-L1441","name":"UInt16.size","docLink":"./Init/Prelude.html#UInt16.size","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1438-L1439","name":"instInhabitedUInt8","docLink":"./Init/Prelude.html#instInhabitedUInt8","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1436-L1436","name":"instDecidableEqUInt8","docLink":"./Init/Prelude.html#instDecidableEqUInt8","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1431-L1434","name":"UInt8.decEq","docLink":"./Init/Prelude.html#UInt8.decEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1425-L1427","name":"UInt8.ofNatCore","docLink":"./Init/Prelude.html#UInt8.ofNatCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1418-L1419","name":"UInt8","docLink":"./Init/Prelude.html#UInt8","doc":"Unsigned 8-bit integer. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1416-L1416","name":"UInt8.size","docLink":"./Init/Prelude.html#UInt8.size","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1414-L1414","name":"Fin.decLe","docLink":"./Init/Prelude.html#Fin.decLe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1413-L1413","name":"Fin.decLt","docLink":"./Init/Prelude.html#Fin.decLt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1410-L1411","name":"instLEFin","docLink":"./Init/Prelude.html#instLEFin","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1407-L1408","name":"instLTFin","docLink":"./Init/Prelude.html#instLTFin","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1401-L1405","name":"instDecidableEqFin","docLink":"./Init/Prelude.html#instDecidableEqFin","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1398-L1399","name":"Fin.ne_of_val_ne","docLink":"./Init/Prelude.html#Fin.ne_of_val_ne","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1395-L1396","name":"Fin.val_eq_of_eq","docLink":"./Init/Prelude.html#Fin.val_eq_of_eq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1392-L1393","name":"Fin.eq_of_val_eq","docLink":"./Init/Prelude.html#Fin.eq_of_val_eq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1388-L1390","name":"Fin","docLink":"./Init/Prelude.html#Fin","doc":"`Fin n` is a natural number `i` with the constraint that `0 ≤ i < n`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1384-L1385","name":"System.Platform.numBits_eq","docLink":"./Init/Prelude.html#System.Platform.numBits_eq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1381-L1382","name":"System.Platform.numBits","docLink":"./Init/Prelude.html#System.Platform.numBits","doc":"Gets the word size of the platform.\nThat is, whether the platform is 64 or 32 bits. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1376-L1377","name":"System.Platform.getNumBits","docLink":"./Init/Prelude.html#System.Platform.getNumBits","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1373-L1374","name":"instSubNat","docLink":"./Init/Prelude.html#instSubNat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1369-L1371","name":"Nat.sub","docLink":"./Init/Prelude.html#Nat.sub","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1364-L1365","name":"Nat.decLt","docLink":"./Init/Prelude.html#Nat.decLt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1360-L1361","name":"Nat.decLe","docLink":"./Init/Prelude.html#Nat.decLe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1356-L1357","name":"Nat.not_le_of_not_ble_eq_true","docLink":"./Init/Prelude.html#Nat.not_le_of_not_ble_eq_true","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1351-L1354","name":"Nat.ble_eq_true_of_le","docLink":"./Init/Prelude.html#Nat.ble_eq_true_of_le","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1347-L1349","name":"Nat.ble_succ_eq_true","docLink":"./Init/Prelude.html#Nat.ble_succ_eq_true","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1343-L1345","name":"Nat.ble_self_eq_true","docLink":"./Init/Prelude.html#Nat.ble_self_eq_true","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1338-L1341","name":"Nat.le_of_ble_eq_true","docLink":"./Init/Prelude.html#Nat.le_of_ble_eq_true","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1333-L1336","name":"Nat.lt_of_le_of_ne","docLink":"./Init/Prelude.html#Nat.lt_of_le_of_ne","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1328-L1331","name":"Nat.le_antisymm","docLink":"./Init/Prelude.html#Nat.le_antisymm","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1325-L1326","name":"Nat.lt_of_le_of_lt","docLink":"./Init/Prelude.html#Nat.lt_of_le_of_lt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1322-L1323","name":"Nat.lt_irrefl","docLink":"./Init/Prelude.html#Nat.lt_irrefl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1318-L1320","name":"Nat.not_succ_le_self","docLink":"./Init/Prelude.html#Nat.not_succ_le_self","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1307-L1316","name":"Nat.lt_or_ge","docLink":"./Init/Prelude.html#Nat.lt_or_ge","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1297-L1305","name":"Nat.eq_or_lt_of_le","docLink":"./Init/Prelude.html#Nat.eq_or_lt_of_le","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1294-L1295","name":"Nat.le_of_lt_succ","docLink":"./Init/Prelude.html#Nat.le_of_lt_succ","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1291-L1292","name":"Nat.le_of_succ_le_succ","docLink":"./Init/Prelude.html#Nat.le_of_succ_le_succ","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1286-L1289","name":"Nat.pred_le_pred","docLink":"./Init/Prelude.html#Nat.pred_le_pred","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1282-L1284","name":"Nat.pred","docLink":"./Init/Prelude.html#Nat.pred","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1277-L1278","name":"Nat.succ_pos","docLink":"./Init/Prelude.html#Nat.succ_pos","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1274-L1275","name":"Nat.le_refl","docLink":"./Init/Prelude.html#Nat.le_refl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1271-L1272","name":"Nat.le_succ_of_le","docLink":"./Init/Prelude.html#Nat.le_succ_of_le","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1268-L1269","name":"Nat.le_succ","docLink":"./Init/Prelude.html#Nat.le_succ","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1265-L1266","name":"Nat.lt_trans","docLink":"./Init/Prelude.html#Nat.lt_trans","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1261-L1263","name":"Nat.le_trans","docLink":"./Init/Prelude.html#Nat.le_trans","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1258-L1259","name":"Nat.le_step","docLink":"./Init/Prelude.html#Nat.le_step","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1255-L1256","name":"Nat.zero_lt_succ","docLink":"./Init/Prelude.html#Nat.zero_lt_succ","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1251-L1253","name":"Nat.succ_le_succ","docLink":"./Init/Prelude.html#Nat.succ_le_succ","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1247-L1249","name":"Nat.zero_le","docLink":"./Init/Prelude.html#Nat.zero_le","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1244-L1245","name":"Nat.not_lt_zero","docLink":"./Init/Prelude.html#Nat.not_lt_zero","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1240-L1242","name":"Nat.not_succ_le_zero","docLink":"./Init/Prelude.html#Nat.not_succ_le_zero","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1237-L1238","name":"instLTNat","docLink":"./Init/Prelude.html#instLTNat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1234-L1235","name":"Nat.lt","docLink":"./Init/Prelude.html#Nat.lt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1231-L1232","name":"instLENat","docLink":"./Init/Prelude.html#instLENat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1227-L1229","name":"Nat.le","docLink":"./Init/Prelude.html#Nat.le","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1221-L1225","name":"Nat.ble","docLink":"./Init/Prelude.html#Nat.ble","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1217-L1217","name":"instDecidableEqNat","docLink":"./Init/Prelude.html#instDecidableEqNat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1212-L1215","name":"Nat.decEq","docLink":"./Init/Prelude.html#Nat.decEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1203-L1209","name":"Nat.ne_of_beq_eq_false","docLink":"./Init/Prelude.html#Nat.ne_of_beq_eq_false","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1194-L1201","name":"Nat.eq_of_beq_eq_true","docLink":"./Init/Prelude.html#Nat.eq_of_beq_eq_true","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1191-L1192","name":"instBEqNat","docLink":"./Init/Prelude.html#instBEqNat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1185-L1189","name":"Nat.beq","docLink":"./Init/Prelude.html#Nat.beq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1180-L1181","name":"instPowNat","docLink":"./Init/Prelude.html#instPowNat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1176-L1178","name":"Nat.pow","docLink":"./Init/Prelude.html#Nat.pow","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1171-L1172","name":"instMulNat","docLink":"./Init/Prelude.html#instMulNat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1167-L1169","name":"Nat.mul","docLink":"./Init/Prelude.html#Nat.mul","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1158-L1159","name":"instAddNat","docLink":"./Init/Prelude.html#instAddNat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1154-L1156","name":"Nat.add","docLink":"./Init/Prelude.html#Nat.add","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1149-L1150","name":"Membership","docLink":"./Init/Prelude.html#Membership","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1141-L1142","name":"instHShiftRight","docLink":"./Init/Prelude.html#instHShiftRight","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1137-L1138","name":"instHShiftLeft","docLink":"./Init/Prelude.html#instHShiftLeft","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1133-L1134","name":"instHOr","docLink":"./Init/Prelude.html#instHOr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1129-L1130","name":"instHXor","docLink":"./Init/Prelude.html#instHXor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1125-L1126","name":"instHAnd","docLink":"./Init/Prelude.html#instHAnd","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1121-L1122","name":"instHAndThen","docLink":"./Init/Prelude.html#instHAndThen","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1117-L1118","name":"instHOrElse","docLink":"./Init/Prelude.html#instHOrElse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1113-L1114","name":"instHAppend","docLink":"./Init/Prelude.html#instHAppend","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1109-L1110","name":"instHPow","docLink":"./Init/Prelude.html#instHPow","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1105-L1106","name":"instHMod","docLink":"./Init/Prelude.html#instHMod","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1101-L1102","name":"instHDiv","docLink":"./Init/Prelude.html#instHDiv","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1097-L1098","name":"instHMul","docLink":"./Init/Prelude.html#instHMul","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1093-L1094","name":"instHSub","docLink":"./Init/Prelude.html#instHSub","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1089-L1090","name":"instHAdd","docLink":"./Init/Prelude.html#instHAdd","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1085-L1086","name":"ShiftRight","docLink":"./Init/Prelude.html#ShiftRight","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1082-L1083","name":"ShiftLeft","docLink":"./Init/Prelude.html#ShiftLeft","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1079-L1080","name":"Complement","docLink":"./Init/Prelude.html#Complement","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1076-L1077","name":"OrOp","docLink":"./Init/Prelude.html#OrOp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1073-L1074","name":"Xor","docLink":"./Init/Prelude.html#Xor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1070-L1071","name":"AndOp","docLink":"./Init/Prelude.html#AndOp","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1067-L1068","name":"AndThen","docLink":"./Init/Prelude.html#AndThen","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1064-L1065","name":"OrElse","docLink":"./Init/Prelude.html#OrElse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1061-L1062","name":"Append","docLink":"./Init/Prelude.html#Append","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1058-L1059","name":"Pow","docLink":"./Init/Prelude.html#Pow","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1055-L1056","name":"Mod","docLink":"./Init/Prelude.html#Mod","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1052-L1053","name":"Div","docLink":"./Init/Prelude.html#Div","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1049-L1050","name":"Neg","docLink":"./Init/Prelude.html#Neg","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1046-L1047","name":"Mul","docLink":"./Init/Prelude.html#Mul","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1043-L1044","name":"Sub","docLink":"./Init/Prelude.html#Sub","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1040-L1041","name":"Add","docLink":"./Init/Prelude.html#Add","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1037-L1038","name":"HShiftRight","docLink":"./Init/Prelude.html#HShiftRight","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1034-L1035","name":"HShiftLeft","docLink":"./Init/Prelude.html#HShiftLeft","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1031-L1032","name":"HOr","docLink":"./Init/Prelude.html#HOr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1028-L1029","name":"HXor","docLink":"./Init/Prelude.html#HXor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1025-L1026","name":"HAnd","docLink":"./Init/Prelude.html#HAnd","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1022-L1023","name":"HAndThen","docLink":"./Init/Prelude.html#HAndThen","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1019-L1020","name":"HOrElse","docLink":"./Init/Prelude.html#HOrElse","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1016-L1017","name":"HAppend","docLink":"./Init/Prelude.html#HAppend","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1013-L1014","name":"HPow","docLink":"./Init/Prelude.html#HPow","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1010-L1011","name":"HMod","docLink":"./Init/Prelude.html#HMod","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1007-L1008","name":"HDiv","docLink":"./Init/Prelude.html#HDiv","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1004-L1005","name":"HMul","docLink":"./Init/Prelude.html#HMul","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L1001-L1002","name":"HSub","docLink":"./Init/Prelude.html#HSub","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L998-L999","name":"HAdd","docLink":"./Init/Prelude.html#HAdd","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L995-L996","name":"instTransEq_1","docLink":"./Init/Prelude.html#instTransEq_1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L992-L993","name":"instTransEq","docLink":"./Init/Prelude.html#instTransEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L987-L988","name":"Trans","docLink":"./Init/Prelude.html#Trans","doc":"Transitive chaining of proofs, used e.g. by `calc`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L983-L984","name":"min","docLink":"./Init/Prelude.html#min","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L980-L981","name":"max","docLink":"./Init/Prelude.html#max","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L978-L978","name":"GT.gt","docLink":"./Init/Prelude.html#GT.gt","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L977-L977","name":"GE.ge","docLink":"./Init/Prelude.html#GE.ge","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L975-L975","name":"LT","docLink":"./Init/Prelude.html#LT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L974-L974","name":"LE","docLink":"./Init/Prelude.html#LE","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L971-L972","name":"instOfNatNat","docLink":"./Init/Prelude.html#instOfNatNat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L967-L968","name":"OfNat","docLink":"./Init/Prelude.html#OfNat","doc":"For numeric literals notation "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L963-L964","name":"instInhabitedNat","docLink":"./Init/Prelude.html#instInhabitedNat","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L959-L961","name":"Nat","docLink":"./Init/Prelude.html#Nat","doc":"The type of natural numbers. `0`, `1`, `2`, ..."},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L954-L956","name":"not","docLink":"./Init/Prelude.html#not","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L949-L952","name":"and","docLink":"./Init/Prelude.html#and","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L944-L947","name":"or","docLink":"./Init/Prelude.html#or","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L939-L942","name":"cond","docLink":"./Init/Prelude.html#cond","doc":"`cond b x y` is the same as `if b then x else y`, but optimized for a\nboolean condition. This is `@[macroInline]` because `x` and `y` should not\nbe eagerly evaluated (see `ite`).\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L927-L930","name":"instDecidableNot","docLink":"./Init/Prelude.html#instDecidableNot","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L916-L925","name":"instDecidableOr","docLink":"./Init/Prelude.html#instDecidableOr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L907-L914","name":"instDecidableAnd","docLink":"./Init/Prelude.html#instDecidableAnd","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L904-L905","name":"ite","docLink":"./Init/Prelude.html#ite","doc":"`if c then t else e` is notation for `ite c t e`, \"if-then-else\", which decides to\nreturn `t` or `e` depending on whether `c` is true or false. The explicit argument\n`c : Prop` does not have any actual computational content, but there is an additional\n`[Decidable c]` argument synthesized by typeclass inference which actually\ndetermines how to evaluate `c` to true or false.\n\nBecause lean uses a strict (call-by-value) evaluation strategy, the signature of this\nfunction is problematic in that it would require `t` and `e` to be evaluated before\ncalling the `ite` function, which would cause both sides of the `if` to be evaluated.\nEven if the result is discarded, this would be a big performance problem,\nand is undesirable for users in any case. To resolve this, `ite` is marked as\n`@[macroInline]`, which means that it is unfolded during code generation, and\nthe definition of the function uses `fun _ => t` and `fun _ => e` so this recovers\nthe expected \"lazy\" behavior of `if`: the `t` and `e` arguments delay evaluation\nuntil `c` is known.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L882-L883","name":"dite","docLink":"./Init/Prelude.html#dite","doc":"\"Dependent\" if-then-else, normally written via the notation `if h : c then t(h) else e(h)`,\nis sugar for `dite c (fun h => t(h)) (fun h => e(h))`, and it is the same as\n`if c then t else e` except that `t` is allowed to depend on a proof `h : c`,\nand `e` can depend on `h : ¬c`. (Both branches use the same name for the hypothesis,\neven though it has different types in the two cases.)\n\nWe use this to be able to communicate the if-then-else condition to the branches.\nFor example, `Array.get arr ⟨i, h⟩` expects a proof `h : i < arr.size` in order to\navoid a bounds check, so you can write `if h : i < arr.size then arr.get ⟨i, h⟩ else ...`\nto avoid the bounds check inside the if branch. (Of course in this case we have only\nlifted the check into an explicit `if`, but we could also use this proof multiple times\nor derive `i < arr.size` from some other proposition that we are checking in the `if`.)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L864-L865","name":"instBEq","docLink":"./Init/Prelude.html#instBEq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L858-L860","name":"BEq","docLink":"./Init/Prelude.html#BEq","doc":"`BEq α` is a typeclass for supplying a boolean-valued equality relation on\n`α`, notated as `a == b`. Unlike `DecidableEq α` (which uses `a = b`), this\nis `Bool` valued instead of `Prop` valued, and it also does not have any\naxioms like being reflexive or agreeing with `=`. It is mainly intended for\nprogramming applications. See `LawfulBEq` for a version that requires that\n`==` and `=` coincide.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L843-L848","name":"instDecidableEqBool","docLink":"./Init/Prelude.html#instDecidableEqBool","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L838-L841","name":"of_decide_eq_self_eq_true","docLink":"./Init/Prelude.html#of_decide_eq_self_eq_true","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L833-L836","name":"of_decide_eq_false","docLink":"./Init/Prelude.html#of_decide_eq_false","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L828-L831","name":"of_decide_eq_true","docLink":"./Init/Prelude.html#of_decide_eq_true","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L824-L826","name":"decide_eq_false","docLink":"./Init/Prelude.html#decide_eq_false","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L820-L822","name":"decide_eq_true","docLink":"./Init/Prelude.html#decide_eq_true","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L816-L817","name":"decEq","docLink":"./Init/Prelude.html#decEq","doc":"Proves that `a = b` is decidable given `DecidableEq α`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L812-L813","name":"DecidableEq","docLink":"./Init/Prelude.html#DecidableEq","doc":"Asserts that `α` has decidable equality, that is, `a = b` is decidable\nfor all `a b : α`. See `Decidable`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L805-L806","name":"DecidableRel","docLink":"./Init/Prelude.html#DecidableRel","doc":"A decidable relation. See `Decidable`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L801-L802","name":"DecidablePred","docLink":"./Init/Prelude.html#DecidablePred","doc":"A decidable predicate. See `Decidable`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L795-L796","name":"Decidable.decide","docLink":"./Init/Prelude.html#Decidable.decide","doc":"Convert a decidable proposition into a boolean value.\n\nIf `p : Prop` is decidable, then `decide p : Bool` is the boolean value\nwhich is `true` if `p` is true and `false` if `p` is false.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L783-L787","name":"Decidable","docLink":"./Init/Prelude.html#Decidable","doc":"`Decidable p` is a data-carrying class that supplies a proof that `p` is\neither `true` or `false`. It is equivalent to `Bool` (and in fact it has the\nsame code generation as `Bool`) together with a proof that the `Bool` is\ntrue iff `p` is.\n\n`Decidable` instances are used to infer \"computation strategies\" for\npropositions, so that you can have the convenience of writing propositions\ninside `if` statements and executing them (which actually executes the inferred\ndecidability instance instead of the proposition, which has no code).\n\nIf a proposition `p` is `Decidable`, then `(by decide : p)` will prove it by\nevaluating the decidability instance to `isTrue h` and returning `h`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L767-L767","name":"ULift.down_up","docLink":"./Init/Prelude.html#ULift.down_up","doc":"Bijection between `α` and `ULift.{v} α` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L764-L764","name":"ULift.up_down","docLink":"./Init/Prelude.html#ULift.up_down","doc":"Bijection between `α` and `ULift.{v} α` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L759-L761","name":"ULift","docLink":"./Init/Prelude.html#ULift","doc":"Universe lifting operation from a lower `Type` universe to a higher one.\nTo express this using level variables, the input is `Type s` and the output is\n`Type (max s r)`, so if `s ≤ r` then the latter is (definitionally) `Type r`.\n\nThe universe variable `r` is written first so that `ULift.{r} α` can be used\nwhen `s` can be inferred from the type of `α`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L748-L749","name":"instInhabitedNonemptyType","docLink":"./Init/Prelude.html#instInhabitedNonemptyType","doc":"`NonemptyType` is inhabited, because `PUnit` is a nonempty type. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L744-L745","name":"NonemptyType.type","docLink":"./Init/Prelude.html#NonemptyType.type","doc":"The underlying type of a `NonemptyType`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L741-L741","name":"NonemptyType","docLink":"./Init/Prelude.html#NonemptyType","doc":"`NonemptyType.{u}` is the type of nonempty types in universe `u`.\nIt is mainly used in constant declarations where we wish to introduce a type\nand simultaneously assert that it is nonempty, but otherwise make the type\nopaque.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L733-L733","name":"PLift.down_up","docLink":"./Init/Prelude.html#PLift.down_up","doc":"Bijection between `α` and `PLift α` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L730-L730","name":"PLift.up_down","docLink":"./Init/Prelude.html#PLift.up_down","doc":"Bijection between `α` and `PLift α` "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L725-L727","name":"PLift","docLink":"./Init/Prelude.html#PLift","doc":"Universe lifting operation from `Sort u` to `Type u`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L722-L722","name":"instInhabitedBool","docLink":"./Init/Prelude.html#instInhabitedBool","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L719-L720","name":"instInhabitedForAll_1","docLink":"./Init/Prelude.html#instInhabitedForAll_1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L716-L717","name":"instInhabitedForAll","docLink":"./Init/Prelude.html#instInhabitedForAll","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L713-L714","name":"instInhabitedSort","docLink":"./Init/Prelude.html#instInhabitedSort","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L710-L711","name":"instNonemptyForAll_1","docLink":"./Init/Prelude.html#instNonemptyForAll_1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L707-L708","name":"instNonemptyForAll","docLink":"./Init/Prelude.html#instNonemptyForAll","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L704-L705","name":"Classical.ofNonempty","docLink":"./Init/Prelude.html#Classical.ofNonempty","doc":"A variation on `Classical.choice` that uses typeclass inference to\ninfer the proof of `Nonempty α`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L697-L698","name":"instNonempty","docLink":"./Init/Prelude.html#instNonempty","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L693-L695","name":"Nonempty.elim","docLink":"./Init/Prelude.html#Nonempty.elim","doc":"The elimination principle for `Nonempty α`. If `Nonempty α`, and we can\nprove `p` given any element `x : α`, then `p` holds. Note that it is essential\nthat `p` is a `Prop` here; the version with `p` being a `Sort u` is equivalent\nto `Classical.choice`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L685-L685","name":"Classical.choice","docLink":"./Init/Prelude.html#Classical.choice","doc":"**The axiom of choice**. `Nonempty α` is a proof that `α` has an element,\nbut the element itself is erased. The axiom `choice` supplies a particular\nelement of `α` given only this proof.\n\nThe textbook axiom of choice normally makes a family of choices all at once,\nbut that is implied from this formulation, because if `α : ι → Type` is a\nfamily of types and `h : ∀ i, Nonempty (α i)` is a proof that they are all\nnonempty, then `fun i => Classical.choice (h i) : ∀ i, α i` is a family of\nchosen elements. This is actually a bit stronger than the ZFC choice axiom;\nthis is sometimes called \"[global choice](https://en.wikipedia.org/wiki/Axiom_of_global_choice)\".\n\nIn lean, we use the axiom of choice to derive the law of excluded middle\n(see `Classical.em`), so it will often show up in axiom listings where you\nmay not expect. You can use `#print axioms my_thm` to find out if a given\ntheorem depends on this or other axioms.\n\nThis axiom can be used to construct \"data\", but obviously there is no algorithm\nto compute it, so lean will require you to mark any definition that would\ninvolve executing `Classical.choice` or other axioms as `noncomputable`, and\nwill not produce any executable code for such definitions.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L659-L661","name":"Nonempty","docLink":"./Init/Prelude.html#Nonempty","doc":"`Nonempty α` is a typeclass that says that `α` is not an empty type,\nthat is, there exists an element in the type. It differs from `Inhabited α`\nin that `Nonempty α` is a `Prop`, which means that it does not actually carry\nan element of `α`, only a proof that *there exists* such an element.\nGiven `Nonempty α`, you can construct an element of `α` *nonconstructively*\nusing `Classical.choice`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L643-L647","name":"Inhabited","docLink":"./Init/Prelude.html#Inhabited","doc":"`Inhabited α` is a typeclass that says that `α` has a designated element,\ncalled `(default : α)`. This is sometimes referred to as a \"pointed type\".\n\nThis class is used by functions that need to return a value of the type\nwhen called \"out of domain\". For example, `Array.get! arr i : α` returns\na value of type `α` when `arr : Array α`, but if `i` is not in range of\nthe array, it reports a panic message, but this does not halt the program,\nso it must still return a value of type `α` (and in fact this is required\nfor logical consistency), so in this case it returns `default`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L628-L630","name":"ne_true_of_eq_false","docLink":"./Init/Prelude.html#ne_true_of_eq_false","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L624-L626","name":"ne_false_of_eq_true","docLink":"./Init/Prelude.html#ne_false_of_eq_true","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L620-L622","name":"eq_true_of_ne_false","docLink":"./Init/Prelude.html#eq_true_of_ne_false","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L616-L618","name":"eq_false_of_ne_true","docLink":"./Init/Prelude.html#eq_false_of_ne_true","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L614-L614","name":"sorryAx","docLink":"./Init/Prelude.html#sorryAx","doc":"Auxiliary axiom used to implement `sorry`.\n\nThe `sorry` term/tactic expands to `sorryAx _ (synthetic := false)`. This is a\nproof of anything, which is intended for stubbing out incomplete parts of a\nproof while still having a syntactically correct proof skeleton. Lean will give\na warning whenever a proof uses `sorry`, so you aren't likely to miss it, but\nyou can double check if a theorem depends on `sorry` by using\n`#print axioms my_thm` and looking for `sorryAx` in the axiom list.\n\nThe `synthetic` flag is false when written explicitly by the user, but it is\nset to `true` when a tactic fails to prove a goal, or if there is a type error\nin the expression. A synthetic `sorry` acts like a regular one, except that it\nsuppresses follow-up errors in order to prevent one error from causing a cascade\nof other errors because the desired term was not constructed.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L595-L595","name":"namedPattern","docLink":"./Init/Prelude.html#namedPattern","doc":"Auxiliary declaration used to implement named patterns like `x@h:p`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L591-L591","name":"outParam","docLink":"./Init/Prelude.html#outParam","doc":"Gadget for marking output parameters in type classes.\n\nFor example, the `Membership` class is defined as:\n```\nclass Membership (α : outParam (Type u)) (γ : Type v)\n```\nThis means that whenever a typeclass goal of the form `Membership ?α ?γ` comes\nup, lean will wait to solve it until `?γ` is known, but then it will run\ntypeclass inference, and take the first solution it finds, for any value of `?α`,\nwhich thereby determines what `?α` should be.\n\nThis expresses that in a term like `a ∈ s`, `s` might be a `Set α` or\n`List α` or some other type with a membership operation, and in each case\nthe \"member\" type `α` is determined by looking at the container type.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L573-L573","name":"optParam","docLink":"./Init/Prelude.html#optParam","doc":"Gadget for optional parameter support.\n\nA binder like `(x : α := default)` in a declaration is syntax sugar for\n`x : optParam α default`, and triggers the elaborator to attempt to use\n`default` to supply the argument if it is not supplied.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L556-L563","name":"Subtype","docLink":"./Init/Prelude.html#Subtype","doc":"`Subtype p`, usually written as `{x : α // p x}`, is a type which\nrepresents all the elements `x : α` for which `p x` is true. It is structurally\na pair-like type, so if you have `x : α` and `h : p x` then\n`⟨x, h⟩ : {x // p x}`. An element `s : {x // p x}` will coerce to `α` but\nyou can also make it explicit using `s.1` or `s.val`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L541-L545","name":"Bool","docLink":"./Init/Prelude.html#Bool","doc":"`Bool` is the type of boolean values, `true` and `false`. Classically,\nthis is equivalent to `Prop` (the type of propositions), but the distinction\nis important for programming, because values of type `Prop` are erased in the\ncode generator, while `Bool` corresponds to the type called `bool` or `boolean`\nin most programming languages.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L529-L532","name":"Or.elim","docLink":"./Init/Prelude.html#Or.elim","doc":"Proof by cases on an `Or`. If `a ∨ b`, and both `a` and `b` imply\nproposition `c`, then `c` is true.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L522-L523","name":"Or.intro_right","docLink":"./Init/Prelude.html#Or.intro_right","doc":"Alias for `Or.inr`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L518-L519","name":"Or.intro_left","docLink":"./Init/Prelude.html#Or.intro_left","doc":"Alias for `Or.inl`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L511-L515","name":"Or","docLink":"./Init/Prelude.html#Or","doc":"`Or a b`, or `a ∨ b`, is the disjunction of propositions. There are two\nconstructors for `Or`, called `Or.inl : a → a ∨ b` and `Or.inr : b → a ∨ b`,\nand you can use `match` or `cases` to destruct an `Or` assumption into the\ntwo cases.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L495-L503","name":"And","docLink":"./Init/Prelude.html#And","doc":"`And a b`, or `a ∧ b`, is the conjunction of propositions. It can be\nconstructed and destructed like a pair: if `ha : a` and `hb : b` then\n`⟨ha, hb⟩ : a ∧ b`, and if `h : a ∧ b` then `h.left : a` and `h.right : b`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L484-L488","name":"MProd","docLink":"./Init/Prelude.html#MProd","doc":"Similar to `Prod`, but `α` and `β` are in the same universe.\nWe say `MProd` is the universe monomorphic product type.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L474-L478","name":"PProd","docLink":"./Init/Prelude.html#PProd","doc":"Similar to `Prod`, but `α` and `β` can be propositions.\nWe use this Type internally to automatically generate the `brecOn` recursor.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L462-L466","name":"Prod","docLink":"./Init/Prelude.html#Prod","doc":"Product type (aka pair). You can use `α × β` as notation for `Prod α β`.\nGiven `a : α` and `b : β`, `Prod.mk a b : Prod α β`. You can use `(a, b)`\nas notation for `Prod.mk a b`. Moreover, `(a, b, c)` is notation for\n`Prod.mk a (Prod.mk b c)`.\nGiven `p : Prod α β`, `p.1 : α` and `p.2 : β`. They are short for `Prod.fst p`\nand `Prod.snd p` respectively. You can also write `p.fst` and `p.snd`.\nFor more information: [Constructors with Arguments](https://leanprover.github.io/theorem_proving_in_lean4/inductive_types.html?highlight=Prod#constructors-with-arguments)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L447-L451","name":"eq_of_heq","docLink":"./Init/Prelude.html#eq_of_heq","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L444-L445","name":"HEq.rfl","docLink":"./Init/Prelude.html#HEq.rfl","doc":"A version of `HEq.refl` with an implicit argument. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L439-L441","name":"HEq","docLink":"./Init/Prelude.html#HEq","doc":"Heterogeneous equality. `HEq a b` asserts that `a` and `b` have the same\ntype, and casting `a` across the equality yields `b`, and vice versa.\n\nYou should avoid using this type if you can. Heterogeneous equality does not\nhave all the same properties as `Eq`, because the assumption that the types of\n`a` and `b` are equal is often too weak to prove theorems of interest. One\nimportant non-theorem is the analogue of `congr`: If `HEq f g` and `HEq x y`\nand `f x` and `g y` are well typed it does not follow that `HEq (f x) (g y)`.\n(This does follow if you have `f = g` instead.) However if `a` and `b` have\nthe same type then `a = b` and `HEq a b` ae equivalent.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L425-L425","name":"Quot.lcInv","docLink":"./Init/Prelude.html#Quot.lcInv","doc":"Unsafe auxiliary constant used by the compiler to erase `Quot.lift`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L359-L360","name":"congrFun","docLink":"./Init/Prelude.html#congrFun","doc":"Congruence in the function part of an application: If `f = g` then `f a = g a`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L355-L356","name":"congr","docLink":"./Init/Prelude.html#congr","doc":"Congruence in both function and argument. If `f₁ = f₂` and `a₁ = a₂` then\n`f₁ a₁ = f₂ a₂`. This only works for nondependent functions; the theorem\nstatement is more complex in the dependent case.\n\nFor more information: [Equality](https://leanprover.github.io/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L345-L346","name":"congrArg","docLink":"./Init/Prelude.html#congrArg","doc":"Congruence in the function argument: if `a₁ = a₂` then `f a₁ = f a₂` for\nany (nondependent) function `f`. This is more powerful than it might look at first, because\nyou can also use a lambda expression for `f` to prove that\n`<something containing a₁> = <something containing a₂>`. This function is used\ninternally by tactics like `congr` and `simp` to apply equalities inside\nsubterms.\n\nFor more information: [Equality](https://leanprover.github.io/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L332-L333","name":"cast","docLink":"./Init/Prelude.html#cast","doc":"Cast across a type equality. If `h : α = β` is an equality of types, and\n`a : α`, then `a : β` will usually not typecheck directly, but this function\nwill allow you to work around this and embed `a` in type `β` as `cast h a : β`.\n\nIt is best to avoid this function if you can, because it is more complicated\nto reason about terms containing casts, but if the types don't match up\ndefinitionally sometimes there isn't anything better you can do.\n\nFor more information: [Equality](https://leanprover.github.io/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L318-L319","name":"Eq.trans","docLink":"./Init/Prelude.html#Eq.trans","doc":"Equality is transitive: if `a = b` and `b = c` then `a = c`.\n\nBecause this is in the `Eq` namespace, if you variables or expressions\n`h₁ : a = b` and `h₂ : b = c`, you can use `h₁.trans h₂ : a = c` as shorthand\nfor `Eq.trans h₁ h₃`.\n\nFor more information: [Equality](https://leanprover.github.io/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L306-L307","name":"Eq.symm","docLink":"./Init/Prelude.html#Eq.symm","doc":"Equality is symmetric: if `a = b` then `b = a`.\n\nBecause this is in the `Eq` namespace, if you have a variable `h : a = b`,\n`h.symm` can be used as shorthand for `Eq.symm h` as a proof of `b = a`.\n\nFor more information: [Equality](https://leanprover.github.io/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L295-L296","name":"Eq.subst","docLink":"./Init/Prelude.html#Eq.subst","doc":"The substitution principle for equality. If `a = b ` and `P a` holds,\nthen `P b` also holds. We conventionally use the name `motive` for `P` here,\nso that you can specify it explicitly using e.g.\n`Eq.subst (motive := fun x => x < 5)` if it is not otherwise inferred correctly.\n\nThis theorem is the underlying mechanism behind the `rw` tactic, which is\nessentially a fancy algorithm for finding good `motive` arguments to usefully\napply this theorem to replace occurrences of `a` with `b` in the goal or\nhypotheses.\n\nFor more information: [Equality](https://leanprover.github.io/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L280-L280","name":"id_eq","docLink":"./Init/Prelude.html#id_eq","doc":"`id x = x`, as a `@[simp]` lemma. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L277-L277","name":"rfl","docLink":"./Init/Prelude.html#rfl","doc":"`rfl : a = a` is the unique constructor of the equality type. This is the\nsame as `Eq.refl` except that it takes `a` implicitly instead of explicitly.\n\nThis is a more powerful theorem than it may appear at first, because although\nthe statement of the theorem is `a = a`, lean will allow anything that is\ndefinitionally equal to that type. So, for instance, `2 + 2 = 4` is proven in\nlean by `rfl`, because both sides are the same up to definitional equality.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L259-L262","name":"Eq","docLink":"./Init/Prelude.html#Eq","doc":"The equality relation. It has one introduction rule, `Eq.refl`.\nWe use `a = b` as notation for `Eq a b`.\nA fundamental property of equality is that it is an equivalence relation.\n```\nvariable (α : Type) (a b c d : α)\nvariable (hab : a = b) (hcb : c = b) (hcd : c = d)\n\nexample : a = d :=\n  Eq.trans (Eq.trans hab (Eq.symm hcb)) hcd\n```\nEquality is much more than an equivalence relation, however. It has the important property that every assertion\nrespects the equivalence, in the sense that we can substitute equal expressions without changing the truth value.\nThat is, given `h1 : a = b` and `h2 : p a`, we can construct a proof for `p b` using substitution: `Eq.subst h1 h2`.\nExample:\n```\nexample (α : Type) (a b : α) (p : α → Prop)\n        (h1 : a = b) (h2 : p a) : p b :=\n  Eq.subst h1 h2\n\nexample (α : Type) (a b : α) (p : α → Prop)\n    (h1 : a = b) (h2 : p a) : p b :=\n  h1 ▸ h2\n```\nThe triangle in the second presentation is a macro built on top of `Eq.subst` and `Eq.symm`, and you can enter it by typing `\\t`.\nFor more information: [Equality](https://leanprover.github.io/theorem_proving_in_lean4/quantifiers_and_equality.html#equality)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L229-L230","name":"absurd","docLink":"./Init/Prelude.html#absurd","doc":"Anything follows from two contradictory hypotheses. Example:\n```\nexample (hp : p) (hnp : ¬p) : q := absurd hp hnp\n```\nFor more information: [Propositional Logic](https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html#propositional-logic)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L219-L220","name":"False.elim","docLink":"./Init/Prelude.html#False.elim","doc":"`False.elim : False → C` says that from `False`, any desired proposition\n`C` holds. Also known as ex falso quodlibet (EFQ) or the principle of explosion.\n\nThe target type is actually `C : Sort u` which means it works for both\npropositions and types. When executed, this acts like an \"unreachable\"\ninstruction: it is **undefined behavior** to run, but it will probably print\n\"unreachable code\". (You would need to construct a proof of false to run it\nanyway, which you can only do using `sorry` or unsound axioms.)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L207-L207","name":"Not","docLink":"./Init/Prelude.html#Not","doc":"`Not p`, or `¬p`, is the negation of `p`. It is defined to be `p → False`,\nso if your goal is `¬p` you can use `intro h` to turn the goal into\n`h : p ⊢ False`, and if you have `hn : ¬p` and `h : p` then `hn h : False`\nand `(hn h).elim` will prove anything.\nFor more information: [Propositional Logic](https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html#propositional-logic)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L198-L198","name":"PEmpty","docLink":"./Init/Prelude.html#PEmpty","doc":"The universe-polymorphic empty type. Prefer `Empty` or `False` where\npossible.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L191-L191","name":"Empty","docLink":"./Init/Prelude.html#Empty","doc":"The empty type. It has no constructors. The `Empty.rec`\neliminator expresses the fact that anything follows from the empty type.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L185-L185","name":"False","docLink":"./Init/Prelude.html#False","doc":"`False` is the empty proposition. Thus, it has no introduction rules.\nIt represents a contradiction. `False` elimination rule, `False.rec`,\nexpresses the fact that anything follows from a contradiction.\nThis rule is sometimes called ex falso (short for ex falso sequitur quodlibet),\nor the principle of explosion.\nFor more information: [Propositional Logic](https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html#propositional-logic)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L172-L175","name":"True","docLink":"./Init/Prelude.html#True","doc":"`True` is a proposition and has only an introduction rule, `True.intro : True`.\nIn other words, `True` is simply true, and has a canonical proof, `True.intro`\nFor more information: [Propositional Logic](https://leanprover.github.io/theorem_proving_in_lean4/propositions_and_proofs.html#propositional-logic)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L165-L165","name":"lcUnreachable","docLink":"./Init/Prelude.html#lcUnreachable","doc":"Auxiliary unsafe constant used by the Compiler to mark unreachable code.\n\nLike `lcProof`, this is an `unsafe axiom`, which means that even though it is\nnot sound, the kernel will not let us use it for regular proofs.\n\nExecuting this expression to actually synthesize a value of type `α` causes\n**immediate undefined behavior**, and the compiler does take advantage of this\nto optimize the code assuming that it is not called. If it is not optimized out,\nit is likely to appear as a print message saying \"unreachable code\", but this\nbehavior is not guaranteed or stable in any way.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L150-L150","name":"lcCast","docLink":"./Init/Prelude.html#lcCast","doc":"Auxiliary unsafe constant used by the Compiler when erasing casts.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L145-L145","name":"lcProof","docLink":"./Init/Prelude.html#lcProof","doc":"Auxiliary unsafe constant used by the Compiler when erasing proofs from code.\n\nIt may look strange to have an axiom that says \"every proposition is true\",\nsince this is obviously unsound, but the `unsafe` marker ensures that the\nkernel will not let this through into regular proofs. The lower levels of the\ncode generator don't need proofs in terms, so this is used to stub the proofs\nout.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L134-L134","name":"Unit.unit","docLink":"./Init/Prelude.html#Unit.unit","doc":"`Unit.unit : Unit` is the canonical element of the unit type.\nIt can also be written as `()`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L128-L128","name":"Unit","docLink":"./Init/Prelude.html#Unit","doc":"The unit type, the canonical type with one element, named `unit` or `()`.\nIn other words, it describes only a single value, which consists of said constructor applied\nto no arguments whatsoever.\nThe `Unit` type is similar to `void` in languages derived from C.\n\n`Unit` is actually defined as `PUnit.{0}` where `PUnit` is the universe\npolymorphic version. The `Unit` should be preferred over `PUnit` where possible to avoid\nunnecessary universe parameters.\n\nIn functional programming, `Unit` is the return type of things that \"return\nnothing\", since a type with one element conveys no additional information.\nWhen programming with monads, the type `m Unit` represents an action that has\nsome side effects but does not return a value, while `m α` would be an action\nthat has side effects and returns a value of type `α`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L108-L110","name":"PUnit","docLink":"./Init/Prelude.html#PUnit","doc":"The unit type, the canonical type with one element, named `unit` or `()`.\nThis is the universe-polymorphic version of `Unit`; it is preferred to use\n`Unit` instead where applicable.\nFor more information about universe levels: [Types as objects](https://leanprover.github.io/theorem_proving_in_lean4/dependent_type_theory.html#types-as-objects)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L99-L99","name":"inferInstanceAs","docLink":"./Init/Prelude.html#inferInstanceAs","doc":"`inferInstanceAs α` synthesizes a value of any target type by typeclass\ninference. This is just like `inferInstance` except that `α` is given\nexplicitly instead of being inferred from the target type. It is especially\nuseful when the target type is some `α'` which is definitionally equal to `α`,\nbut the instance we are looking for is only registered for `α` (because\ntypeclass search does not unfold most definitions, but definitional equality\ndoes.) Example:\n```\n#check inferInstanceAs (Inhabited Nat) -- Inhabited Nat\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L85-L85","name":"inferInstance","docLink":"./Init/Prelude.html#inferInstance","doc":"`inferInstance` synthesizes a value of any target type by typeclass\ninference. This function has the same type signature as the identity\nfunction, but the square brackets on the `[i : α]` argument means that it will\nattempt to construct this argument by typeclass inference. (This will fail if\n`α` is not a `class`.) Example:\n```\n#check (inferInstance : Inhabited Nat) -- Inhabited Nat\n\ndef foo : Inhabited (Nat × Nat) :=\n  inferInstance\n\nexample : foo.default = (default, default) :=\n  rfl\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L65-L66","name":"Function.const","docLink":"./Init/Prelude.html#Function.const","doc":"The constant function. If `a : α`, then `Function.const β a : β → α` is the\n\"constant function with value `a`\", that is, `Function.const β a b = a`.\n```\nexample (b : Bool) : Function.const Bool 10 b = 10 :=\n  rfl\n\n#check Function.const Bool 10\n-- Bool → Nat\n```\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L51-L52","name":"Function.comp","docLink":"./Init/Prelude.html#Function.comp","doc":"Function composition is the act of pipelining the result of one function, to the input of another, creating an entirely new function.\nExample:\n```\n#eval Function.comp List.reverse (List.drop 2) [3, 2, 4, 1]\n-- [1, 4]\n```\nYou can use the notation `f ∘ g` as shorthand for `Function.comp f g`.\n```\n#eval (List.reverse ∘ List.drop 2) [3, 2, 4, 1]\n-- [1, 4]\n```\nA simpler way of thinking about it, is that `List.reverse ∘ List.drop 2`\nis equivalent to `fun xs => List.reverse (List.drop 2 xs)`,\nthe benefit is that the meaning of composition is obvious,\nand the representation is compact.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Init/Prelude.lean#L32-L32","name":"id","docLink":"./Init/Prelude.html#id","doc":"The identity function. `id` takes an implicit argument `α : Sort u`\n(a type in any universe), and an argument `a : α`, and returns `a`.\n\nAlthough this may look like a useless function, one application of the identity\nfunction is to explicitly put a type on an expression. If `e` has type `T`,\nand `T'` is definitionally equal to `T`, then `@id T' e` typechecks, and lean\nknows that this expression has type `T'` rather than `T`. This can make a\ndifference for typeclass inference, since `T` and `T'` may have different\ntypeclass instances on them. `show T' from e` is sugar for an `@id T' e`\nexpression.\n"}]}