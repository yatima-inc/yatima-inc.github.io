{"name":"Lean.Parser.Command","instances":[],"imports":["Init","Lean.Parser.Term","Lean.Parser.Do"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L196-L197","name":"Lean.Parser.Tactic.set_option","docLink":"./Lean/Parser/Command.html#Lean.Parser.Tactic.set_option","doc":"`set_option opt val in tacs` (the tactic) acts like `set_option opt val` at command level,\nbut it sets the option only within the tactics `tacs`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L191-L192","name":"Lean.Parser.Tactic.open","docLink":"./Lean/Parser/Command.html#Lean.Parser.Tactic.open","doc":"`open Foo in tacs` (the tactic) acts like `open Foo` at command level,\nbut it opens a namespace only within the tactics `tacs`. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L184-L185","name":"Lean.Parser.Term.set_option","docLink":"./Lean/Parser/Command.html#Lean.Parser.Term.set_option","doc":"`set_option opt val in e` is like `set_option opt val` but scoped to a single term. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L180-L181","name":"Lean.Parser.Term.open","docLink":"./Lean/Parser/Command.html#Lean.Parser.Term.open","doc":"`open Foo in e` is like `open Foo` but scoped to a single term. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L164-L164","name":"Lean.Parser.Command.declModifiersT","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.declModifiersT","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L163-L163","name":"Lean.Parser.Command.declModifiersF","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.declModifiersF","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L161-L161","name":"Lean.Parser.Command.genInjectiveTheorems","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.genInjectiveTheorems","doc":"This is an auxiliary command for generation constructor injectivity theorems for inductive types defined at `Prelude.lean`.\nIt is meant for bootstrapping purposes only. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L156-L156","name":"Lean.Parser.Command.addDocString","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.addDocString","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L154-L154","name":"Lean.Parser.Command.in","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.in","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L152-L152","name":"Lean.Parser.Command.initialize","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.initialize","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L151-L151","name":"Lean.Parser.Command.initializeKeyword","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.initializeKeyword","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L150-L150","name":"Lean.Parser.Command.mutual","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.mutual","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L148-L148","name":"Lean.Parser.Command.open","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.open","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L146-L147","name":"Lean.Parser.Command.openDecl","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.openDecl","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L145-L145","name":"Lean.Parser.Command.openScoped","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.openScoped","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L144-L144","name":"Lean.Parser.Command.openSimple","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.openSimple","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L143-L143","name":"Lean.Parser.Command.openOnly","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.openOnly","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L142-L142","name":"Lean.Parser.Command.openRenaming","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.openRenaming","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L141-L141","name":"Lean.Parser.Command.openRenamingItem","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.openRenamingItem","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L140-L140","name":"Lean.Parser.Command.openHiding","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.openHiding","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L139-L139","name":"Lean.Parser.Command.export","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.export","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L138-L138","name":"Lean.Parser.Command.attribute","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.attribute","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L137-L137","name":"Lean.Parser.Command.eraseAttr","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.eraseAttr","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L136-L136","name":"Lean.Parser.Command.set_option","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.set_option","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L135-L135","name":"Lean.Parser.Command.optionValue","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.optionValue","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L134-L134","name":"Lean.Parser.Command.init_quot","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.init_quot","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L133-L133","name":"Lean.Parser.Command.resolve_name","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.resolve_name","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L132-L132","name":"Lean.Parser.Command.printAxioms","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.printAxioms","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L131-L131","name":"Lean.Parser.Command.print","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.print","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L130-L130","name":"Lean.Parser.Command.exit","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.exit","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L129-L129","name":"Lean.Parser.Command.synth","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.synth","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L128-L128","name":"Lean.Parser.Command.eval","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.eval","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L127-L127","name":"Lean.Parser.Command.reduce","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.reduce","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L126-L126","name":"Lean.Parser.Command.check_failure","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.check_failure","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L125-L125","name":"Lean.Parser.Command.check","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.check","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L124-L124","name":"Lean.Parser.Command.universe","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.universe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L123-L123","name":"Lean.Parser.Command.variable","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.variable","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L122-L122","name":"Lean.Parser.Command.end","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.end","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L121-L121","name":"Lean.Parser.Command.namespace","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.namespace","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L120-L120","name":"Lean.Parser.Command.section","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.section","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L119-L119","name":"Lean.Parser.Command.noncomputableSection","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.noncomputableSection","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L118-L118","name":"Lean.Parser.Command.deriving","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.deriving","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L116-L117","name":"Lean.Parser.Command.declaration","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.declaration","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L112-L115","name":"Lean.Parser.Command.structure","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.structure","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L111-L111","name":"Lean.Parser.Command.extends","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.extends","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L110-L110","name":"Lean.Parser.Command.classTk","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.classTk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L109-L109","name":"Lean.Parser.Command.structureTk","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.structureTk","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L108-L108","name":"Lean.Parser.Command.structCtor","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.structCtor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L107-L107","name":"Lean.Parser.Command.structFields","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.structFields","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L106-L106","name":"Lean.Parser.Command.structSimpleBinder","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.structSimpleBinder","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L105-L105","name":"Lean.Parser.Command.structInstBinder","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.structInstBinder","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L104-L104","name":"Lean.Parser.Command.structImplicitBinder","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.structImplicitBinder","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L103-L103","name":"Lean.Parser.Command.structExplicitBinder","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.structExplicitBinder","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L102-L102","name":"Lean.Parser.Command.classInductive","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.classInductive","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L100-L101","name":"Lean.Parser.Command.inductive","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.inductive","doc":"In Lean, every concrete type other than the universes and every type constructor other than dependent arrows is\nan instance of a general family of type constructions known as inductive types.\nIt is remarkable that it is possible to construct a substantial edifice of mathematics based on nothing more than the\ntype universes, dependent arrow types, and inductive types; everything else follows from those.\nIntuitively, an inductive type is built up from a specified list of constructor. For example, `List α` is the list of elements of type `α`, and\nis defined as follows\n```\ninductive List (α : Type u) where\n| nil\n| cons (head : α) (tail : List α)\n```\nA list of elements of type `α` is either the empty list, `nil`, or an element `head : α` followed by a list `tail : List α`.\nFor more information about [inductive types](https://leanprover.github.io/theorem_proving_in_lean4/inductive_types.html).\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L84-L84","name":"Lean.Parser.Command.computedFields","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.computedFields","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L83-L83","name":"Lean.Parser.Command.computedField","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.computedField","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L82-L82","name":"Lean.Parser.Command.optDeriving","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.optDeriving","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L81-L81","name":"Lean.Parser.Command.derivingClasses","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.derivingClasses","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L80-L80","name":"Lean.Parser.Command.ctor","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.ctor","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L79-L79","name":"Lean.Parser.Command.example","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.example","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L77-L77","name":"Lean.Parser.Command.axiom","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.axiom","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L76-L76","name":"Lean.Parser.Command.instance","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.instance","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L74-L74","name":"Lean.Parser.Command.opaque","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.opaque","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L73-L73","name":"Lean.Parser.Command.theorem","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.theorem","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L72-L72","name":"Lean.Parser.Command.def","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.def","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L71-L71","name":"Lean.Parser.Command.optDefDeriving","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.optDefDeriving","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L70-L70","name":"Lean.Parser.Command.abbrev","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.abbrev","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L68-L69","name":"Lean.Parser.Command.declVal","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.declVal","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L63-L63","name":"Lean.Parser.Command.whereStructInst","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.whereStructInst","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L62-L62","name":"Lean.Parser.Command.whereStructField","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.whereStructField","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L61-L61","name":"Lean.Parser.Command.declValEqns","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.declValEqns","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L60-L60","name":"Lean.Parser.Command.declValSimple","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.declValSimple","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L59-L59","name":"Lean.Parser.Command.optDeclSig","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.optDeclSig","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L58-L58","name":"Lean.Parser.Command.declSig","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.declSig","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L57-L57","name":"Lean.Parser.Command.declId","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.declId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L56-L56","name":"Lean.Parser.Command.declModifiers","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.declModifiers","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L55-L55","name":"Lean.Parser.Command.nonrec","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.nonrec","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L54-L54","name":"Lean.Parser.Command.partial","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.partial","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L53-L53","name":"Lean.Parser.Command.unsafe","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.unsafe","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L52-L52","name":"Lean.Parser.Command.noncomputable","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.noncomputable","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L51-L51","name":"Lean.Parser.Command.visibility","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.visibility","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L50-L50","name":"Lean.Parser.Command.protected","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.protected","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L49-L49","name":"Lean.Parser.Command.private","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.private","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L47-L47","name":"Lean.Parser.Command.optNamedPrio","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.optNamedPrio","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L46-L46","name":"Lean.Parser.Command.namedPrio","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.namedPrio","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L44-L44","name":"Lean.Parser.Command.moduleDoc","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.moduleDoc","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L41-L41","name":"Lean.Parser.Command.terminationSuffix","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.terminationSuffix","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L39-L39","name":"Lean.Parser.Command.terminationBy","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.terminationBy","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L38-L38","name":"Lean.Parser.Command.terminationByElement","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.terminationByElement","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L36-L36","name":"Lean.Parser.Command.decreasingBy","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.decreasingBy","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L35-L35","name":"Lean.Parser.Command.terminationByCore","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.terminationByCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L33-L33","name":"Lean.Parser.Command.terminationHint","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.terminationHint","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L32-L32","name":"Lean.Parser.Command.terminationHint1","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.terminationHint1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L31-L31","name":"Lean.Parser.Command.terminationHintMany","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.terminationHintMany","doc":"A mutual block may be broken in different cliques, we identify them using an `ident` (an element of the clique)\nWe provide two kinds of hints to the termination checker:\n1- A wellfounded relation (`p` is `termParser`)\n2- A tactic for proving the recursive applications are \"decreasing\" (`p` is `tacticSeq`)\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L23-L23","name":"Lean.Parser.Command.quot","docLink":"./Lean/Parser/Command.html#Lean.Parser.Command.quot","doc":"Syntax quotation for (sequences of) commands. The identical syntax for term quotations takes priority, so ambiguous quotations like\n`` `($x $y) `` will be parsed as an application, not two commands. Use `` `($x:command $y:command) `` instead.\nMultiple commands will be put in a `` `null `` node, but a single command will not (so that you can directly\nmatch against a quotation in a command kind's elaborator). "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L14-L14","name":"Lean.Parser.Term.precheckedQuot","docLink":"./Lean/Parser/Command.html#Lean.Parser.Term.precheckedQuot","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Parser/Command.lean#L13-L13","name":"Lean.Parser.Term.quot","docLink":"./Lean/Parser/Command.html#Lean.Parser.Term.quot","doc":"Syntax quotation for terms. "}]}