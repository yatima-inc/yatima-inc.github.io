{"name":"Lean.Meta.Tactic.Intro","instances":[],"imports":["Init","Lean.Meta.Tactic.Util"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Intro.lean#L192-L193","name":"Lean.Meta.intros","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.Meta.intros","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Intro.lean#L182-L189","name":"Lean.MVarId.intros","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.MVarId.intros","doc":"Introduce as many binders as possible without unfolding definitions.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Intro.lean#L170-L171","name":"Lean.Meta.intro1P","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.Meta.intro1P","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Intro.lean#L166-L167","name":"Lean.MVarId.intro1P","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.MVarId.intro1P","doc":"Introduce one object from the goal `mvarid`, preserving the name used in the binder.\nReturns a pair made of the newly introduced variable and the new goal.\nThis will fail if there is nothing to introduce, ie when the goal\ndoes not start with a forall, lambda or let. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Intro.lean#L159-L160","name":"Lean.Meta.intro1","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.Meta.intro1","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Intro.lean#L155-L156","name":"Lean.MVarId.intro1","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.MVarId.intro1","doc":"Introduce one object from the goal `mvarid`, without preserving the name used in the binder.\nReturns a pair made of the newly introduced variable (which will have an inaccessible name)\nand the new goal. This will fail if there is nothing to introduce, ie when the goal\ndoes not start with a forall, lambda or let. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Intro.lean#L147-L149","name":"Lean.Meta.intro1Core","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.Meta.intro1Core","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Intro.lean#L144-L145","name":"Lean.Meta.intro","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.Meta.intro","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Intro.lean#L139-L141","name":"Lean.MVarId.intro","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.MVarId.intro","doc":"Introduce one binder using `name` as the the new hypothesis name.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Intro.lean#L133-L134","name":"Lean.Meta.introNP","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.Meta.introNP","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Intro.lean#L129-L130","name":"Lean.MVarId.introNP","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.MVarId.introNP","doc":"Introduce `n` binders in the goal `mvarId`. The new hypotheses are named using the binder names.\nThe suffix `P` stands for \"preserving`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Intro.lean#L122-L123","name":"Lean.Meta.introN","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.Meta.introN","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Intro.lean#L118-L119","name":"Lean.MVarId.introN","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.MVarId.introN","doc":"Introduce `n` binders in the goal `mvarId`.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Intro.lean#L107-L113","name":"Lean.Meta.introNCore","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.Meta.introNCore","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Intro.lean#L86-L87","name":"Lean.Meta.mkFreshBinderNameForTactic","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.Meta.mkFreshBinderNameForTactic","doc":"Similar to `mkFreshUserName`, but takes into account `tactic.hygienic` option value.\nIf `tactic.hygienic = true`, then the current macro scopes are applied to `binderName`.\nIf not, then an unused (accessible) name (based on `binderName`) in the local context is used.\n"},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/Tactic/Intro.lean#L69-L69","name":"Lean.Meta.tactic.hygienic","docLink":"./Lean/Meta/Tactic/Intro.html#Lean.Meta.tactic.hygienic","doc":""}]}