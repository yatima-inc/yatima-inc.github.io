{"name":"Lean.Meta.AbstractMVars","instances":[{"typeNames":["Lean.Meta.AbstractMVarsResult"],"name":"Lean.Meta.instInhabitedAbstractMVarsResult","className":"Inhabited"},{"typeNames":["Lean.Meta.AbstractMVarsResult"],"name":"Lean.Meta.instBEqAbstractMVarsResult","className":"BEq"},{"typeNames":["Lean.Meta.AbstractMVars.M"],"name":"Lean.Meta.AbstractMVars.instMonadMCtxM","className":"Lean.MonadMCtx"}],"imports":["Init","Lean.Meta.Basic"],"declarations":[{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/AbstractMVars.lean#L137-L140","name":"Lean.Meta.openAbstractMVarsResult","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.openAbstractMVarsResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/AbstractMVars.lean#L129-L135","name":"Lean.Meta.abstractMVars","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.abstractMVars","doc":"Abstract (current depth) metavariables occurring in `e`.\n  The result contains\n  - An array of universe level parameters that replaced universe metavariables occurring in `e`.\n  - The number of (expr) metavariables abstracted.\n  - And an expression of the form `fun (m_1 : A_1) ... (m_k : A_k) => e'`, where\n    `k` equal to the number of (expr) metavariables abstracted, and `e'` is `e` after we\n    replace the metavariables.\n\n  Example: given `f.{?u} ?m1` where `?m1 : ?m2 Nat`, `?m2 : Type -> Type`. This function returns\n  `{ levels := #[u], size := 2, expr := (fun (m2 : Type -> Type) (m1 : m2 Nat) => f.{u} m1) }`\n\n  This API can be used to \"transport\" to a different metavariable context.\n  Given a new metavariable context, we replace the `AbstractMVarsResult.levels` with\n  new fresh universe metavariables, and instantiate the `(m_i : A_i)` in the lambda-expression\n  with new fresh metavariables.\n\n  Application: we use this method to cache the results of type class resolution. "},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/AbstractMVars.lean#L69-L107","name":"Lean.Meta.AbstractMVars.abstractExprMVars","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.abstractExprMVars","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/AbstractMVars.lean#L42-L43","name":"Lean.Meta.AbstractMVars.mkFreshFVarId","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.mkFreshFVarId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/AbstractMVars.lean#L36-L40","name":"Lean.Meta.AbstractMVars.mkFreshId","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.mkFreshId","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/AbstractMVars.lean#L32-L34","name":"Lean.Meta.AbstractMVars.instMonadMCtxM","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.instMonadMCtxM","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/AbstractMVars.lean#L30-L30","name":"Lean.Meta.AbstractMVars.M","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.M","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/AbstractMVars.lean#L20-L28","name":"Lean.Meta.AbstractMVars.State","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVars.State","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/AbstractMVars.lean#L14-L14","name":"Lean.Meta.instBEqAbstractMVarsResult","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.instBEqAbstractMVarsResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/AbstractMVars.lean#L14-L14","name":"Lean.Meta.instInhabitedAbstractMVarsResult","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.instInhabitedAbstractMVarsResult","doc":""},{"sourceLink":"https://github.com/leanprover/lean4/blob/fbb858a32cee8090e5390df1fb688b032148645b/src/Lean/Meta/AbstractMVars.lean#L10-L14","name":"Lean.Meta.AbstractMVarsResult","docLink":"./Lean/Meta/AbstractMVars.html#Lean.Meta.AbstractMVarsResult","doc":""}]}